// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/coinsetting"
	"github.com/google/uuid"
)

// CoinSettingCreate is the builder for creating a CoinSetting entity.
type CoinSettingCreate struct {
	config
	mutation *CoinSettingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCoinTypeID sets the "coin_type_id" field.
func (csc *CoinSettingCreate) SetCoinTypeID(u uuid.UUID) *CoinSettingCreate {
	csc.mutation.SetCoinTypeID(u)
	return csc
}

// SetWarmAccountCoinAmount sets the "warm_account_coin_amount" field.
func (csc *CoinSettingCreate) SetWarmAccountCoinAmount(u uint64) *CoinSettingCreate {
	csc.mutation.SetWarmAccountCoinAmount(u)
	return csc
}

// SetPaymentAccountCoinAmount sets the "payment_account_coin_amount" field.
func (csc *CoinSettingCreate) SetPaymentAccountCoinAmount(u uint64) *CoinSettingCreate {
	csc.mutation.SetPaymentAccountCoinAmount(u)
	return csc
}

// SetPlatformOfflineAccountID sets the "platform_offline_account_id" field.
func (csc *CoinSettingCreate) SetPlatformOfflineAccountID(u uuid.UUID) *CoinSettingCreate {
	csc.mutation.SetPlatformOfflineAccountID(u)
	return csc
}

// SetUserOnlineAccountID sets the "user_online_account_id" field.
func (csc *CoinSettingCreate) SetUserOnlineAccountID(u uuid.UUID) *CoinSettingCreate {
	csc.mutation.SetUserOnlineAccountID(u)
	return csc
}

// SetUserOfflineAccountID sets the "user_offline_account_id" field.
func (csc *CoinSettingCreate) SetUserOfflineAccountID(u uuid.UUID) *CoinSettingCreate {
	csc.mutation.SetUserOfflineAccountID(u)
	return csc
}

// SetGoodIncomingAccountID sets the "good_incoming_account_id" field.
func (csc *CoinSettingCreate) SetGoodIncomingAccountID(u uuid.UUID) *CoinSettingCreate {
	csc.mutation.SetGoodIncomingAccountID(u)
	return csc
}

// SetGasProviderAccountID sets the "gas_provider_account_id" field.
func (csc *CoinSettingCreate) SetGasProviderAccountID(u uuid.UUID) *CoinSettingCreate {
	csc.mutation.SetGasProviderAccountID(u)
	return csc
}

// SetCreateAt sets the "create_at" field.
func (csc *CoinSettingCreate) SetCreateAt(u uint32) *CoinSettingCreate {
	csc.mutation.SetCreateAt(u)
	return csc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (csc *CoinSettingCreate) SetNillableCreateAt(u *uint32) *CoinSettingCreate {
	if u != nil {
		csc.SetCreateAt(*u)
	}
	return csc
}

// SetUpdateAt sets the "update_at" field.
func (csc *CoinSettingCreate) SetUpdateAt(u uint32) *CoinSettingCreate {
	csc.mutation.SetUpdateAt(u)
	return csc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (csc *CoinSettingCreate) SetNillableUpdateAt(u *uint32) *CoinSettingCreate {
	if u != nil {
		csc.SetUpdateAt(*u)
	}
	return csc
}

// SetDeleteAt sets the "delete_at" field.
func (csc *CoinSettingCreate) SetDeleteAt(u uint32) *CoinSettingCreate {
	csc.mutation.SetDeleteAt(u)
	return csc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (csc *CoinSettingCreate) SetNillableDeleteAt(u *uint32) *CoinSettingCreate {
	if u != nil {
		csc.SetDeleteAt(*u)
	}
	return csc
}

// SetID sets the "id" field.
func (csc *CoinSettingCreate) SetID(u uuid.UUID) *CoinSettingCreate {
	csc.mutation.SetID(u)
	return csc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (csc *CoinSettingCreate) SetNillableID(u *uuid.UUID) *CoinSettingCreate {
	if u != nil {
		csc.SetID(*u)
	}
	return csc
}

// Mutation returns the CoinSettingMutation object of the builder.
func (csc *CoinSettingCreate) Mutation() *CoinSettingMutation {
	return csc.mutation
}

// Save creates the CoinSetting in the database.
func (csc *CoinSettingCreate) Save(ctx context.Context) (*CoinSetting, error) {
	var (
		err  error
		node *CoinSetting
	)
	csc.defaults()
	if len(csc.hooks) == 0 {
		if err = csc.check(); err != nil {
			return nil, err
		}
		node, err = csc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CoinSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = csc.check(); err != nil {
				return nil, err
			}
			csc.mutation = mutation
			if node, err = csc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(csc.hooks) - 1; i >= 0; i-- {
			if csc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = csc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, csc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (csc *CoinSettingCreate) SaveX(ctx context.Context) *CoinSetting {
	v, err := csc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csc *CoinSettingCreate) Exec(ctx context.Context) error {
	_, err := csc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csc *CoinSettingCreate) ExecX(ctx context.Context) {
	if err := csc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csc *CoinSettingCreate) defaults() {
	if _, ok := csc.mutation.CreateAt(); !ok {
		v := coinsetting.DefaultCreateAt()
		csc.mutation.SetCreateAt(v)
	}
	if _, ok := csc.mutation.UpdateAt(); !ok {
		v := coinsetting.DefaultUpdateAt()
		csc.mutation.SetUpdateAt(v)
	}
	if _, ok := csc.mutation.DeleteAt(); !ok {
		v := coinsetting.DefaultDeleteAt()
		csc.mutation.SetDeleteAt(v)
	}
	if _, ok := csc.mutation.ID(); !ok {
		v := coinsetting.DefaultID()
		csc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csc *CoinSettingCreate) check() error {
	if _, ok := csc.mutation.CoinTypeID(); !ok {
		return &ValidationError{Name: "coin_type_id", err: errors.New(`ent: missing required field "CoinSetting.coin_type_id"`)}
	}
	if _, ok := csc.mutation.WarmAccountCoinAmount(); !ok {
		return &ValidationError{Name: "warm_account_coin_amount", err: errors.New(`ent: missing required field "CoinSetting.warm_account_coin_amount"`)}
	}
	if _, ok := csc.mutation.PaymentAccountCoinAmount(); !ok {
		return &ValidationError{Name: "payment_account_coin_amount", err: errors.New(`ent: missing required field "CoinSetting.payment_account_coin_amount"`)}
	}
	if _, ok := csc.mutation.PlatformOfflineAccountID(); !ok {
		return &ValidationError{Name: "platform_offline_account_id", err: errors.New(`ent: missing required field "CoinSetting.platform_offline_account_id"`)}
	}
	if _, ok := csc.mutation.UserOnlineAccountID(); !ok {
		return &ValidationError{Name: "user_online_account_id", err: errors.New(`ent: missing required field "CoinSetting.user_online_account_id"`)}
	}
	if _, ok := csc.mutation.UserOfflineAccountID(); !ok {
		return &ValidationError{Name: "user_offline_account_id", err: errors.New(`ent: missing required field "CoinSetting.user_offline_account_id"`)}
	}
	if _, ok := csc.mutation.GoodIncomingAccountID(); !ok {
		return &ValidationError{Name: "good_incoming_account_id", err: errors.New(`ent: missing required field "CoinSetting.good_incoming_account_id"`)}
	}
	if _, ok := csc.mutation.GasProviderAccountID(); !ok {
		return &ValidationError{Name: "gas_provider_account_id", err: errors.New(`ent: missing required field "CoinSetting.gas_provider_account_id"`)}
	}
	if _, ok := csc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "CoinSetting.create_at"`)}
	}
	if _, ok := csc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "CoinSetting.update_at"`)}
	}
	if _, ok := csc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "CoinSetting.delete_at"`)}
	}
	return nil
}

func (csc *CoinSettingCreate) sqlSave(ctx context.Context) (*CoinSetting, error) {
	_node, _spec := csc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (csc *CoinSettingCreate) createSpec() (*CoinSetting, *sqlgraph.CreateSpec) {
	var (
		_node = &CoinSetting{config: csc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: coinsetting.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: coinsetting.FieldID,
			},
		}
	)
	_spec.OnConflict = csc.conflict
	if id, ok := csc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := csc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinsetting.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := csc.mutation.WarmAccountCoinAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: coinsetting.FieldWarmAccountCoinAmount,
		})
		_node.WarmAccountCoinAmount = value
	}
	if value, ok := csc.mutation.PaymentAccountCoinAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: coinsetting.FieldPaymentAccountCoinAmount,
		})
		_node.PaymentAccountCoinAmount = value
	}
	if value, ok := csc.mutation.PlatformOfflineAccountID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinsetting.FieldPlatformOfflineAccountID,
		})
		_node.PlatformOfflineAccountID = value
	}
	if value, ok := csc.mutation.UserOnlineAccountID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinsetting.FieldUserOnlineAccountID,
		})
		_node.UserOnlineAccountID = value
	}
	if value, ok := csc.mutation.UserOfflineAccountID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinsetting.FieldUserOfflineAccountID,
		})
		_node.UserOfflineAccountID = value
	}
	if value, ok := csc.mutation.GoodIncomingAccountID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinsetting.FieldGoodIncomingAccountID,
		})
		_node.GoodIncomingAccountID = value
	}
	if value, ok := csc.mutation.GasProviderAccountID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinsetting.FieldGasProviderAccountID,
		})
		_node.GasProviderAccountID = value
	}
	if value, ok := csc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinsetting.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := csc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinsetting.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := csc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinsetting.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CoinSetting.Create().
//		SetCoinTypeID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CoinSettingUpsert) {
//			SetCoinTypeID(v+v).
//		}).
//		Exec(ctx)
//
func (csc *CoinSettingCreate) OnConflict(opts ...sql.ConflictOption) *CoinSettingUpsertOne {
	csc.conflict = opts
	return &CoinSettingUpsertOne{
		create: csc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CoinSetting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (csc *CoinSettingCreate) OnConflictColumns(columns ...string) *CoinSettingUpsertOne {
	csc.conflict = append(csc.conflict, sql.ConflictColumns(columns...))
	return &CoinSettingUpsertOne{
		create: csc,
	}
}

type (
	// CoinSettingUpsertOne is the builder for "upsert"-ing
	//  one CoinSetting node.
	CoinSettingUpsertOne struct {
		create *CoinSettingCreate
	}

	// CoinSettingUpsert is the "OnConflict" setter.
	CoinSettingUpsert struct {
		*sql.UpdateSet
	}
)

// SetCoinTypeID sets the "coin_type_id" field.
func (u *CoinSettingUpsert) SetCoinTypeID(v uuid.UUID) *CoinSettingUpsert {
	u.Set(coinsetting.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *CoinSettingUpsert) UpdateCoinTypeID() *CoinSettingUpsert {
	u.SetExcluded(coinsetting.FieldCoinTypeID)
	return u
}

// SetWarmAccountCoinAmount sets the "warm_account_coin_amount" field.
func (u *CoinSettingUpsert) SetWarmAccountCoinAmount(v uint64) *CoinSettingUpsert {
	u.Set(coinsetting.FieldWarmAccountCoinAmount, v)
	return u
}

// UpdateWarmAccountCoinAmount sets the "warm_account_coin_amount" field to the value that was provided on create.
func (u *CoinSettingUpsert) UpdateWarmAccountCoinAmount() *CoinSettingUpsert {
	u.SetExcluded(coinsetting.FieldWarmAccountCoinAmount)
	return u
}

// AddWarmAccountCoinAmount adds v to the "warm_account_coin_amount" field.
func (u *CoinSettingUpsert) AddWarmAccountCoinAmount(v uint64) *CoinSettingUpsert {
	u.Add(coinsetting.FieldWarmAccountCoinAmount, v)
	return u
}

// SetPaymentAccountCoinAmount sets the "payment_account_coin_amount" field.
func (u *CoinSettingUpsert) SetPaymentAccountCoinAmount(v uint64) *CoinSettingUpsert {
	u.Set(coinsetting.FieldPaymentAccountCoinAmount, v)
	return u
}

// UpdatePaymentAccountCoinAmount sets the "payment_account_coin_amount" field to the value that was provided on create.
func (u *CoinSettingUpsert) UpdatePaymentAccountCoinAmount() *CoinSettingUpsert {
	u.SetExcluded(coinsetting.FieldPaymentAccountCoinAmount)
	return u
}

// AddPaymentAccountCoinAmount adds v to the "payment_account_coin_amount" field.
func (u *CoinSettingUpsert) AddPaymentAccountCoinAmount(v uint64) *CoinSettingUpsert {
	u.Add(coinsetting.FieldPaymentAccountCoinAmount, v)
	return u
}

// SetPlatformOfflineAccountID sets the "platform_offline_account_id" field.
func (u *CoinSettingUpsert) SetPlatformOfflineAccountID(v uuid.UUID) *CoinSettingUpsert {
	u.Set(coinsetting.FieldPlatformOfflineAccountID, v)
	return u
}

// UpdatePlatformOfflineAccountID sets the "platform_offline_account_id" field to the value that was provided on create.
func (u *CoinSettingUpsert) UpdatePlatformOfflineAccountID() *CoinSettingUpsert {
	u.SetExcluded(coinsetting.FieldPlatformOfflineAccountID)
	return u
}

// SetUserOnlineAccountID sets the "user_online_account_id" field.
func (u *CoinSettingUpsert) SetUserOnlineAccountID(v uuid.UUID) *CoinSettingUpsert {
	u.Set(coinsetting.FieldUserOnlineAccountID, v)
	return u
}

// UpdateUserOnlineAccountID sets the "user_online_account_id" field to the value that was provided on create.
func (u *CoinSettingUpsert) UpdateUserOnlineAccountID() *CoinSettingUpsert {
	u.SetExcluded(coinsetting.FieldUserOnlineAccountID)
	return u
}

// SetUserOfflineAccountID sets the "user_offline_account_id" field.
func (u *CoinSettingUpsert) SetUserOfflineAccountID(v uuid.UUID) *CoinSettingUpsert {
	u.Set(coinsetting.FieldUserOfflineAccountID, v)
	return u
}

// UpdateUserOfflineAccountID sets the "user_offline_account_id" field to the value that was provided on create.
func (u *CoinSettingUpsert) UpdateUserOfflineAccountID() *CoinSettingUpsert {
	u.SetExcluded(coinsetting.FieldUserOfflineAccountID)
	return u
}

// SetGoodIncomingAccountID sets the "good_incoming_account_id" field.
func (u *CoinSettingUpsert) SetGoodIncomingAccountID(v uuid.UUID) *CoinSettingUpsert {
	u.Set(coinsetting.FieldGoodIncomingAccountID, v)
	return u
}

// UpdateGoodIncomingAccountID sets the "good_incoming_account_id" field to the value that was provided on create.
func (u *CoinSettingUpsert) UpdateGoodIncomingAccountID() *CoinSettingUpsert {
	u.SetExcluded(coinsetting.FieldGoodIncomingAccountID)
	return u
}

// SetGasProviderAccountID sets the "gas_provider_account_id" field.
func (u *CoinSettingUpsert) SetGasProviderAccountID(v uuid.UUID) *CoinSettingUpsert {
	u.Set(coinsetting.FieldGasProviderAccountID, v)
	return u
}

// UpdateGasProviderAccountID sets the "gas_provider_account_id" field to the value that was provided on create.
func (u *CoinSettingUpsert) UpdateGasProviderAccountID() *CoinSettingUpsert {
	u.SetExcluded(coinsetting.FieldGasProviderAccountID)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *CoinSettingUpsert) SetCreateAt(v uint32) *CoinSettingUpsert {
	u.Set(coinsetting.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *CoinSettingUpsert) UpdateCreateAt() *CoinSettingUpsert {
	u.SetExcluded(coinsetting.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *CoinSettingUpsert) AddCreateAt(v uint32) *CoinSettingUpsert {
	u.Add(coinsetting.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *CoinSettingUpsert) SetUpdateAt(v uint32) *CoinSettingUpsert {
	u.Set(coinsetting.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *CoinSettingUpsert) UpdateUpdateAt() *CoinSettingUpsert {
	u.SetExcluded(coinsetting.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *CoinSettingUpsert) AddUpdateAt(v uint32) *CoinSettingUpsert {
	u.Add(coinsetting.FieldUpdateAt, v)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *CoinSettingUpsert) SetDeleteAt(v uint32) *CoinSettingUpsert {
	u.Set(coinsetting.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *CoinSettingUpsert) UpdateDeleteAt() *CoinSettingUpsert {
	u.SetExcluded(coinsetting.FieldDeleteAt)
	return u
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *CoinSettingUpsert) AddDeleteAt(v uint32) *CoinSettingUpsert {
	u.Add(coinsetting.FieldDeleteAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CoinSetting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(coinsetting.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CoinSettingUpsertOne) UpdateNewValues() *CoinSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(coinsetting.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.CoinSetting.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CoinSettingUpsertOne) Ignore() *CoinSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CoinSettingUpsertOne) DoNothing() *CoinSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CoinSettingCreate.OnConflict
// documentation for more info.
func (u *CoinSettingUpsertOne) Update(set func(*CoinSettingUpsert)) *CoinSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CoinSettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *CoinSettingUpsertOne) SetCoinTypeID(v uuid.UUID) *CoinSettingUpsertOne {
	return u.Update(func(s *CoinSettingUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *CoinSettingUpsertOne) UpdateCoinTypeID() *CoinSettingUpsertOne {
	return u.Update(func(s *CoinSettingUpsert) {
		s.UpdateCoinTypeID()
	})
}

// SetWarmAccountCoinAmount sets the "warm_account_coin_amount" field.
func (u *CoinSettingUpsertOne) SetWarmAccountCoinAmount(v uint64) *CoinSettingUpsertOne {
	return u.Update(func(s *CoinSettingUpsert) {
		s.SetWarmAccountCoinAmount(v)
	})
}

// AddWarmAccountCoinAmount adds v to the "warm_account_coin_amount" field.
func (u *CoinSettingUpsertOne) AddWarmAccountCoinAmount(v uint64) *CoinSettingUpsertOne {
	return u.Update(func(s *CoinSettingUpsert) {
		s.AddWarmAccountCoinAmount(v)
	})
}

// UpdateWarmAccountCoinAmount sets the "warm_account_coin_amount" field to the value that was provided on create.
func (u *CoinSettingUpsertOne) UpdateWarmAccountCoinAmount() *CoinSettingUpsertOne {
	return u.Update(func(s *CoinSettingUpsert) {
		s.UpdateWarmAccountCoinAmount()
	})
}

// SetPaymentAccountCoinAmount sets the "payment_account_coin_amount" field.
func (u *CoinSettingUpsertOne) SetPaymentAccountCoinAmount(v uint64) *CoinSettingUpsertOne {
	return u.Update(func(s *CoinSettingUpsert) {
		s.SetPaymentAccountCoinAmount(v)
	})
}

// AddPaymentAccountCoinAmount adds v to the "payment_account_coin_amount" field.
func (u *CoinSettingUpsertOne) AddPaymentAccountCoinAmount(v uint64) *CoinSettingUpsertOne {
	return u.Update(func(s *CoinSettingUpsert) {
		s.AddPaymentAccountCoinAmount(v)
	})
}

// UpdatePaymentAccountCoinAmount sets the "payment_account_coin_amount" field to the value that was provided on create.
func (u *CoinSettingUpsertOne) UpdatePaymentAccountCoinAmount() *CoinSettingUpsertOne {
	return u.Update(func(s *CoinSettingUpsert) {
		s.UpdatePaymentAccountCoinAmount()
	})
}

// SetPlatformOfflineAccountID sets the "platform_offline_account_id" field.
func (u *CoinSettingUpsertOne) SetPlatformOfflineAccountID(v uuid.UUID) *CoinSettingUpsertOne {
	return u.Update(func(s *CoinSettingUpsert) {
		s.SetPlatformOfflineAccountID(v)
	})
}

// UpdatePlatformOfflineAccountID sets the "platform_offline_account_id" field to the value that was provided on create.
func (u *CoinSettingUpsertOne) UpdatePlatformOfflineAccountID() *CoinSettingUpsertOne {
	return u.Update(func(s *CoinSettingUpsert) {
		s.UpdatePlatformOfflineAccountID()
	})
}

// SetUserOnlineAccountID sets the "user_online_account_id" field.
func (u *CoinSettingUpsertOne) SetUserOnlineAccountID(v uuid.UUID) *CoinSettingUpsertOne {
	return u.Update(func(s *CoinSettingUpsert) {
		s.SetUserOnlineAccountID(v)
	})
}

// UpdateUserOnlineAccountID sets the "user_online_account_id" field to the value that was provided on create.
func (u *CoinSettingUpsertOne) UpdateUserOnlineAccountID() *CoinSettingUpsertOne {
	return u.Update(func(s *CoinSettingUpsert) {
		s.UpdateUserOnlineAccountID()
	})
}

// SetUserOfflineAccountID sets the "user_offline_account_id" field.
func (u *CoinSettingUpsertOne) SetUserOfflineAccountID(v uuid.UUID) *CoinSettingUpsertOne {
	return u.Update(func(s *CoinSettingUpsert) {
		s.SetUserOfflineAccountID(v)
	})
}

// UpdateUserOfflineAccountID sets the "user_offline_account_id" field to the value that was provided on create.
func (u *CoinSettingUpsertOne) UpdateUserOfflineAccountID() *CoinSettingUpsertOne {
	return u.Update(func(s *CoinSettingUpsert) {
		s.UpdateUserOfflineAccountID()
	})
}

// SetGoodIncomingAccountID sets the "good_incoming_account_id" field.
func (u *CoinSettingUpsertOne) SetGoodIncomingAccountID(v uuid.UUID) *CoinSettingUpsertOne {
	return u.Update(func(s *CoinSettingUpsert) {
		s.SetGoodIncomingAccountID(v)
	})
}

// UpdateGoodIncomingAccountID sets the "good_incoming_account_id" field to the value that was provided on create.
func (u *CoinSettingUpsertOne) UpdateGoodIncomingAccountID() *CoinSettingUpsertOne {
	return u.Update(func(s *CoinSettingUpsert) {
		s.UpdateGoodIncomingAccountID()
	})
}

// SetGasProviderAccountID sets the "gas_provider_account_id" field.
func (u *CoinSettingUpsertOne) SetGasProviderAccountID(v uuid.UUID) *CoinSettingUpsertOne {
	return u.Update(func(s *CoinSettingUpsert) {
		s.SetGasProviderAccountID(v)
	})
}

// UpdateGasProviderAccountID sets the "gas_provider_account_id" field to the value that was provided on create.
func (u *CoinSettingUpsertOne) UpdateGasProviderAccountID() *CoinSettingUpsertOne {
	return u.Update(func(s *CoinSettingUpsert) {
		s.UpdateGasProviderAccountID()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *CoinSettingUpsertOne) SetCreateAt(v uint32) *CoinSettingUpsertOne {
	return u.Update(func(s *CoinSettingUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *CoinSettingUpsertOne) AddCreateAt(v uint32) *CoinSettingUpsertOne {
	return u.Update(func(s *CoinSettingUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *CoinSettingUpsertOne) UpdateCreateAt() *CoinSettingUpsertOne {
	return u.Update(func(s *CoinSettingUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *CoinSettingUpsertOne) SetUpdateAt(v uint32) *CoinSettingUpsertOne {
	return u.Update(func(s *CoinSettingUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *CoinSettingUpsertOne) AddUpdateAt(v uint32) *CoinSettingUpsertOne {
	return u.Update(func(s *CoinSettingUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *CoinSettingUpsertOne) UpdateUpdateAt() *CoinSettingUpsertOne {
	return u.Update(func(s *CoinSettingUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *CoinSettingUpsertOne) SetDeleteAt(v uint32) *CoinSettingUpsertOne {
	return u.Update(func(s *CoinSettingUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *CoinSettingUpsertOne) AddDeleteAt(v uint32) *CoinSettingUpsertOne {
	return u.Update(func(s *CoinSettingUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *CoinSettingUpsertOne) UpdateDeleteAt() *CoinSettingUpsertOne {
	return u.Update(func(s *CoinSettingUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *CoinSettingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CoinSettingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CoinSettingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CoinSettingUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CoinSettingUpsertOne.ID is not supported by MySQL driver. Use CoinSettingUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CoinSettingUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CoinSettingCreateBulk is the builder for creating many CoinSetting entities in bulk.
type CoinSettingCreateBulk struct {
	config
	builders []*CoinSettingCreate
	conflict []sql.ConflictOption
}

// Save creates the CoinSetting entities in the database.
func (cscb *CoinSettingCreateBulk) Save(ctx context.Context) ([]*CoinSetting, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cscb.builders))
	nodes := make([]*CoinSetting, len(cscb.builders))
	mutators := make([]Mutator, len(cscb.builders))
	for i := range cscb.builders {
		func(i int, root context.Context) {
			builder := cscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CoinSettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cscb *CoinSettingCreateBulk) SaveX(ctx context.Context) []*CoinSetting {
	v, err := cscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cscb *CoinSettingCreateBulk) Exec(ctx context.Context) error {
	_, err := cscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cscb *CoinSettingCreateBulk) ExecX(ctx context.Context) {
	if err := cscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CoinSetting.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CoinSettingUpsert) {
//			SetCoinTypeID(v+v).
//		}).
//		Exec(ctx)
//
func (cscb *CoinSettingCreateBulk) OnConflict(opts ...sql.ConflictOption) *CoinSettingUpsertBulk {
	cscb.conflict = opts
	return &CoinSettingUpsertBulk{
		create: cscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CoinSetting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cscb *CoinSettingCreateBulk) OnConflictColumns(columns ...string) *CoinSettingUpsertBulk {
	cscb.conflict = append(cscb.conflict, sql.ConflictColumns(columns...))
	return &CoinSettingUpsertBulk{
		create: cscb,
	}
}

// CoinSettingUpsertBulk is the builder for "upsert"-ing
// a bulk of CoinSetting nodes.
type CoinSettingUpsertBulk struct {
	create *CoinSettingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CoinSetting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(coinsetting.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CoinSettingUpsertBulk) UpdateNewValues() *CoinSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(coinsetting.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CoinSetting.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *CoinSettingUpsertBulk) Ignore() *CoinSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CoinSettingUpsertBulk) DoNothing() *CoinSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CoinSettingCreateBulk.OnConflict
// documentation for more info.
func (u *CoinSettingUpsertBulk) Update(set func(*CoinSettingUpsert)) *CoinSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CoinSettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *CoinSettingUpsertBulk) SetCoinTypeID(v uuid.UUID) *CoinSettingUpsertBulk {
	return u.Update(func(s *CoinSettingUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *CoinSettingUpsertBulk) UpdateCoinTypeID() *CoinSettingUpsertBulk {
	return u.Update(func(s *CoinSettingUpsert) {
		s.UpdateCoinTypeID()
	})
}

// SetWarmAccountCoinAmount sets the "warm_account_coin_amount" field.
func (u *CoinSettingUpsertBulk) SetWarmAccountCoinAmount(v uint64) *CoinSettingUpsertBulk {
	return u.Update(func(s *CoinSettingUpsert) {
		s.SetWarmAccountCoinAmount(v)
	})
}

// AddWarmAccountCoinAmount adds v to the "warm_account_coin_amount" field.
func (u *CoinSettingUpsertBulk) AddWarmAccountCoinAmount(v uint64) *CoinSettingUpsertBulk {
	return u.Update(func(s *CoinSettingUpsert) {
		s.AddWarmAccountCoinAmount(v)
	})
}

// UpdateWarmAccountCoinAmount sets the "warm_account_coin_amount" field to the value that was provided on create.
func (u *CoinSettingUpsertBulk) UpdateWarmAccountCoinAmount() *CoinSettingUpsertBulk {
	return u.Update(func(s *CoinSettingUpsert) {
		s.UpdateWarmAccountCoinAmount()
	})
}

// SetPaymentAccountCoinAmount sets the "payment_account_coin_amount" field.
func (u *CoinSettingUpsertBulk) SetPaymentAccountCoinAmount(v uint64) *CoinSettingUpsertBulk {
	return u.Update(func(s *CoinSettingUpsert) {
		s.SetPaymentAccountCoinAmount(v)
	})
}

// AddPaymentAccountCoinAmount adds v to the "payment_account_coin_amount" field.
func (u *CoinSettingUpsertBulk) AddPaymentAccountCoinAmount(v uint64) *CoinSettingUpsertBulk {
	return u.Update(func(s *CoinSettingUpsert) {
		s.AddPaymentAccountCoinAmount(v)
	})
}

// UpdatePaymentAccountCoinAmount sets the "payment_account_coin_amount" field to the value that was provided on create.
func (u *CoinSettingUpsertBulk) UpdatePaymentAccountCoinAmount() *CoinSettingUpsertBulk {
	return u.Update(func(s *CoinSettingUpsert) {
		s.UpdatePaymentAccountCoinAmount()
	})
}

// SetPlatformOfflineAccountID sets the "platform_offline_account_id" field.
func (u *CoinSettingUpsertBulk) SetPlatformOfflineAccountID(v uuid.UUID) *CoinSettingUpsertBulk {
	return u.Update(func(s *CoinSettingUpsert) {
		s.SetPlatformOfflineAccountID(v)
	})
}

// UpdatePlatformOfflineAccountID sets the "platform_offline_account_id" field to the value that was provided on create.
func (u *CoinSettingUpsertBulk) UpdatePlatformOfflineAccountID() *CoinSettingUpsertBulk {
	return u.Update(func(s *CoinSettingUpsert) {
		s.UpdatePlatformOfflineAccountID()
	})
}

// SetUserOnlineAccountID sets the "user_online_account_id" field.
func (u *CoinSettingUpsertBulk) SetUserOnlineAccountID(v uuid.UUID) *CoinSettingUpsertBulk {
	return u.Update(func(s *CoinSettingUpsert) {
		s.SetUserOnlineAccountID(v)
	})
}

// UpdateUserOnlineAccountID sets the "user_online_account_id" field to the value that was provided on create.
func (u *CoinSettingUpsertBulk) UpdateUserOnlineAccountID() *CoinSettingUpsertBulk {
	return u.Update(func(s *CoinSettingUpsert) {
		s.UpdateUserOnlineAccountID()
	})
}

// SetUserOfflineAccountID sets the "user_offline_account_id" field.
func (u *CoinSettingUpsertBulk) SetUserOfflineAccountID(v uuid.UUID) *CoinSettingUpsertBulk {
	return u.Update(func(s *CoinSettingUpsert) {
		s.SetUserOfflineAccountID(v)
	})
}

// UpdateUserOfflineAccountID sets the "user_offline_account_id" field to the value that was provided on create.
func (u *CoinSettingUpsertBulk) UpdateUserOfflineAccountID() *CoinSettingUpsertBulk {
	return u.Update(func(s *CoinSettingUpsert) {
		s.UpdateUserOfflineAccountID()
	})
}

// SetGoodIncomingAccountID sets the "good_incoming_account_id" field.
func (u *CoinSettingUpsertBulk) SetGoodIncomingAccountID(v uuid.UUID) *CoinSettingUpsertBulk {
	return u.Update(func(s *CoinSettingUpsert) {
		s.SetGoodIncomingAccountID(v)
	})
}

// UpdateGoodIncomingAccountID sets the "good_incoming_account_id" field to the value that was provided on create.
func (u *CoinSettingUpsertBulk) UpdateGoodIncomingAccountID() *CoinSettingUpsertBulk {
	return u.Update(func(s *CoinSettingUpsert) {
		s.UpdateGoodIncomingAccountID()
	})
}

// SetGasProviderAccountID sets the "gas_provider_account_id" field.
func (u *CoinSettingUpsertBulk) SetGasProviderAccountID(v uuid.UUID) *CoinSettingUpsertBulk {
	return u.Update(func(s *CoinSettingUpsert) {
		s.SetGasProviderAccountID(v)
	})
}

// UpdateGasProviderAccountID sets the "gas_provider_account_id" field to the value that was provided on create.
func (u *CoinSettingUpsertBulk) UpdateGasProviderAccountID() *CoinSettingUpsertBulk {
	return u.Update(func(s *CoinSettingUpsert) {
		s.UpdateGasProviderAccountID()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *CoinSettingUpsertBulk) SetCreateAt(v uint32) *CoinSettingUpsertBulk {
	return u.Update(func(s *CoinSettingUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *CoinSettingUpsertBulk) AddCreateAt(v uint32) *CoinSettingUpsertBulk {
	return u.Update(func(s *CoinSettingUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *CoinSettingUpsertBulk) UpdateCreateAt() *CoinSettingUpsertBulk {
	return u.Update(func(s *CoinSettingUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *CoinSettingUpsertBulk) SetUpdateAt(v uint32) *CoinSettingUpsertBulk {
	return u.Update(func(s *CoinSettingUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *CoinSettingUpsertBulk) AddUpdateAt(v uint32) *CoinSettingUpsertBulk {
	return u.Update(func(s *CoinSettingUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *CoinSettingUpsertBulk) UpdateUpdateAt() *CoinSettingUpsertBulk {
	return u.Update(func(s *CoinSettingUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *CoinSettingUpsertBulk) SetDeleteAt(v uint32) *CoinSettingUpsertBulk {
	return u.Update(func(s *CoinSettingUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *CoinSettingUpsertBulk) AddDeleteAt(v uint32) *CoinSettingUpsertBulk {
	return u.Update(func(s *CoinSettingUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *CoinSettingUpsertBulk) UpdateDeleteAt() *CoinSettingUpsertBulk {
	return u.Update(func(s *CoinSettingUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *CoinSettingUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CoinSettingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CoinSettingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CoinSettingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
