// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/goodsetting"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// GoodSettingUpdate is the builder for updating GoodSetting entities.
type GoodSettingUpdate struct {
	config
	hooks    []Hook
	mutation *GoodSettingMutation
}

// Where appends a list predicates to the GoodSettingUpdate builder.
func (gsu *GoodSettingUpdate) Where(ps ...predicate.GoodSetting) *GoodSettingUpdate {
	gsu.mutation.Where(ps...)
	return gsu
}

// SetGoodID sets the "good_id" field.
func (gsu *GoodSettingUpdate) SetGoodID(u uuid.UUID) *GoodSettingUpdate {
	gsu.mutation.SetGoodID(u)
	return gsu
}

// SetWarmAccountUsdAmount sets the "warm_account_usd_amount" field.
func (gsu *GoodSettingUpdate) SetWarmAccountUsdAmount(u uint64) *GoodSettingUpdate {
	gsu.mutation.ResetWarmAccountUsdAmount()
	gsu.mutation.SetWarmAccountUsdAmount(u)
	return gsu
}

// AddWarmAccountUsdAmount adds u to the "warm_account_usd_amount" field.
func (gsu *GoodSettingUpdate) AddWarmAccountUsdAmount(u int64) *GoodSettingUpdate {
	gsu.mutation.AddWarmAccountUsdAmount(u)
	return gsu
}

// SetWarmAccountCoinAmount sets the "warm_account_coin_amount" field.
func (gsu *GoodSettingUpdate) SetWarmAccountCoinAmount(u uint64) *GoodSettingUpdate {
	gsu.mutation.ResetWarmAccountCoinAmount()
	gsu.mutation.SetWarmAccountCoinAmount(u)
	return gsu
}

// AddWarmAccountCoinAmount adds u to the "warm_account_coin_amount" field.
func (gsu *GoodSettingUpdate) AddWarmAccountCoinAmount(u int64) *GoodSettingUpdate {
	gsu.mutation.AddWarmAccountCoinAmount(u)
	return gsu
}

// SetCreateAt sets the "create_at" field.
func (gsu *GoodSettingUpdate) SetCreateAt(u uint32) *GoodSettingUpdate {
	gsu.mutation.ResetCreateAt()
	gsu.mutation.SetCreateAt(u)
	return gsu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (gsu *GoodSettingUpdate) SetNillableCreateAt(u *uint32) *GoodSettingUpdate {
	if u != nil {
		gsu.SetCreateAt(*u)
	}
	return gsu
}

// AddCreateAt adds u to the "create_at" field.
func (gsu *GoodSettingUpdate) AddCreateAt(u int32) *GoodSettingUpdate {
	gsu.mutation.AddCreateAt(u)
	return gsu
}

// SetUpdateAt sets the "update_at" field.
func (gsu *GoodSettingUpdate) SetUpdateAt(u uint32) *GoodSettingUpdate {
	gsu.mutation.ResetUpdateAt()
	gsu.mutation.SetUpdateAt(u)
	return gsu
}

// AddUpdateAt adds u to the "update_at" field.
func (gsu *GoodSettingUpdate) AddUpdateAt(u int32) *GoodSettingUpdate {
	gsu.mutation.AddUpdateAt(u)
	return gsu
}

// SetDeleteAt sets the "delete_at" field.
func (gsu *GoodSettingUpdate) SetDeleteAt(u uint32) *GoodSettingUpdate {
	gsu.mutation.ResetDeleteAt()
	gsu.mutation.SetDeleteAt(u)
	return gsu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (gsu *GoodSettingUpdate) SetNillableDeleteAt(u *uint32) *GoodSettingUpdate {
	if u != nil {
		gsu.SetDeleteAt(*u)
	}
	return gsu
}

// AddDeleteAt adds u to the "delete_at" field.
func (gsu *GoodSettingUpdate) AddDeleteAt(u int32) *GoodSettingUpdate {
	gsu.mutation.AddDeleteAt(u)
	return gsu
}

// Mutation returns the GoodSettingMutation object of the builder.
func (gsu *GoodSettingUpdate) Mutation() *GoodSettingMutation {
	return gsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gsu *GoodSettingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	gsu.defaults()
	if len(gsu.hooks) == 0 {
		affected, err = gsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gsu.mutation = mutation
			affected, err = gsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gsu.hooks) - 1; i >= 0; i-- {
			if gsu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gsu *GoodSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := gsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gsu *GoodSettingUpdate) Exec(ctx context.Context) error {
	_, err := gsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gsu *GoodSettingUpdate) ExecX(ctx context.Context) {
	if err := gsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gsu *GoodSettingUpdate) defaults() {
	if _, ok := gsu.mutation.UpdateAt(); !ok {
		v := goodsetting.UpdateDefaultUpdateAt()
		gsu.mutation.SetUpdateAt(v)
	}
}

func (gsu *GoodSettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodsetting.Table,
			Columns: goodsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodsetting.FieldID,
			},
		},
	}
	if ps := gsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gsu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodsetting.FieldGoodID,
		})
	}
	if value, ok := gsu.mutation.WarmAccountUsdAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: goodsetting.FieldWarmAccountUsdAmount,
		})
	}
	if value, ok := gsu.mutation.AddedWarmAccountUsdAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: goodsetting.FieldWarmAccountUsdAmount,
		})
	}
	if value, ok := gsu.mutation.WarmAccountCoinAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: goodsetting.FieldWarmAccountCoinAmount,
		})
	}
	if value, ok := gsu.mutation.AddedWarmAccountCoinAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: goodsetting.FieldWarmAccountCoinAmount,
		})
	}
	if value, ok := gsu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodsetting.FieldCreateAt,
		})
	}
	if value, ok := gsu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodsetting.FieldCreateAt,
		})
	}
	if value, ok := gsu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodsetting.FieldUpdateAt,
		})
	}
	if value, ok := gsu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodsetting.FieldUpdateAt,
		})
	}
	if value, ok := gsu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodsetting.FieldDeleteAt,
		})
	}
	if value, ok := gsu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodsetting.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// GoodSettingUpdateOne is the builder for updating a single GoodSetting entity.
type GoodSettingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GoodSettingMutation
}

// SetGoodID sets the "good_id" field.
func (gsuo *GoodSettingUpdateOne) SetGoodID(u uuid.UUID) *GoodSettingUpdateOne {
	gsuo.mutation.SetGoodID(u)
	return gsuo
}

// SetWarmAccountUsdAmount sets the "warm_account_usd_amount" field.
func (gsuo *GoodSettingUpdateOne) SetWarmAccountUsdAmount(u uint64) *GoodSettingUpdateOne {
	gsuo.mutation.ResetWarmAccountUsdAmount()
	gsuo.mutation.SetWarmAccountUsdAmount(u)
	return gsuo
}

// AddWarmAccountUsdAmount adds u to the "warm_account_usd_amount" field.
func (gsuo *GoodSettingUpdateOne) AddWarmAccountUsdAmount(u int64) *GoodSettingUpdateOne {
	gsuo.mutation.AddWarmAccountUsdAmount(u)
	return gsuo
}

// SetWarmAccountCoinAmount sets the "warm_account_coin_amount" field.
func (gsuo *GoodSettingUpdateOne) SetWarmAccountCoinAmount(u uint64) *GoodSettingUpdateOne {
	gsuo.mutation.ResetWarmAccountCoinAmount()
	gsuo.mutation.SetWarmAccountCoinAmount(u)
	return gsuo
}

// AddWarmAccountCoinAmount adds u to the "warm_account_coin_amount" field.
func (gsuo *GoodSettingUpdateOne) AddWarmAccountCoinAmount(u int64) *GoodSettingUpdateOne {
	gsuo.mutation.AddWarmAccountCoinAmount(u)
	return gsuo
}

// SetCreateAt sets the "create_at" field.
func (gsuo *GoodSettingUpdateOne) SetCreateAt(u uint32) *GoodSettingUpdateOne {
	gsuo.mutation.ResetCreateAt()
	gsuo.mutation.SetCreateAt(u)
	return gsuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (gsuo *GoodSettingUpdateOne) SetNillableCreateAt(u *uint32) *GoodSettingUpdateOne {
	if u != nil {
		gsuo.SetCreateAt(*u)
	}
	return gsuo
}

// AddCreateAt adds u to the "create_at" field.
func (gsuo *GoodSettingUpdateOne) AddCreateAt(u int32) *GoodSettingUpdateOne {
	gsuo.mutation.AddCreateAt(u)
	return gsuo
}

// SetUpdateAt sets the "update_at" field.
func (gsuo *GoodSettingUpdateOne) SetUpdateAt(u uint32) *GoodSettingUpdateOne {
	gsuo.mutation.ResetUpdateAt()
	gsuo.mutation.SetUpdateAt(u)
	return gsuo
}

// AddUpdateAt adds u to the "update_at" field.
func (gsuo *GoodSettingUpdateOne) AddUpdateAt(u int32) *GoodSettingUpdateOne {
	gsuo.mutation.AddUpdateAt(u)
	return gsuo
}

// SetDeleteAt sets the "delete_at" field.
func (gsuo *GoodSettingUpdateOne) SetDeleteAt(u uint32) *GoodSettingUpdateOne {
	gsuo.mutation.ResetDeleteAt()
	gsuo.mutation.SetDeleteAt(u)
	return gsuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (gsuo *GoodSettingUpdateOne) SetNillableDeleteAt(u *uint32) *GoodSettingUpdateOne {
	if u != nil {
		gsuo.SetDeleteAt(*u)
	}
	return gsuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (gsuo *GoodSettingUpdateOne) AddDeleteAt(u int32) *GoodSettingUpdateOne {
	gsuo.mutation.AddDeleteAt(u)
	return gsuo
}

// Mutation returns the GoodSettingMutation object of the builder.
func (gsuo *GoodSettingUpdateOne) Mutation() *GoodSettingMutation {
	return gsuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gsuo *GoodSettingUpdateOne) Select(field string, fields ...string) *GoodSettingUpdateOne {
	gsuo.fields = append([]string{field}, fields...)
	return gsuo
}

// Save executes the query and returns the updated GoodSetting entity.
func (gsuo *GoodSettingUpdateOne) Save(ctx context.Context) (*GoodSetting, error) {
	var (
		err  error
		node *GoodSetting
	)
	gsuo.defaults()
	if len(gsuo.hooks) == 0 {
		node, err = gsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gsuo.mutation = mutation
			node, err = gsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gsuo.hooks) - 1; i >= 0; i-- {
			if gsuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gsuo *GoodSettingUpdateOne) SaveX(ctx context.Context) *GoodSetting {
	node, err := gsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gsuo *GoodSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := gsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gsuo *GoodSettingUpdateOne) ExecX(ctx context.Context) {
	if err := gsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gsuo *GoodSettingUpdateOne) defaults() {
	if _, ok := gsuo.mutation.UpdateAt(); !ok {
		v := goodsetting.UpdateDefaultUpdateAt()
		gsuo.mutation.SetUpdateAt(v)
	}
}

func (gsuo *GoodSettingUpdateOne) sqlSave(ctx context.Context) (_node *GoodSetting, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodsetting.Table,
			Columns: goodsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodsetting.FieldID,
			},
		},
	}
	id, ok := gsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GoodSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goodsetting.FieldID)
		for _, f := range fields {
			if !goodsetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != goodsetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gsuo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodsetting.FieldGoodID,
		})
	}
	if value, ok := gsuo.mutation.WarmAccountUsdAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: goodsetting.FieldWarmAccountUsdAmount,
		})
	}
	if value, ok := gsuo.mutation.AddedWarmAccountUsdAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: goodsetting.FieldWarmAccountUsdAmount,
		})
	}
	if value, ok := gsuo.mutation.WarmAccountCoinAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: goodsetting.FieldWarmAccountCoinAmount,
		})
	}
	if value, ok := gsuo.mutation.AddedWarmAccountCoinAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: goodsetting.FieldWarmAccountCoinAmount,
		})
	}
	if value, ok := gsuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodsetting.FieldCreateAt,
		})
	}
	if value, ok := gsuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodsetting.FieldCreateAt,
		})
	}
	if value, ok := gsuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodsetting.FieldUpdateAt,
		})
	}
	if value, ok := gsuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodsetting.FieldUpdateAt,
		})
	}
	if value, ok := gsuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodsetting.FieldDeleteAt,
		})
	}
	if value, ok := gsuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodsetting.FieldDeleteAt,
		})
	}
	_node = &GoodSetting{config: gsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
