// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/coinaccountinfo"
	"github.com/google/uuid"
)

// CoinAccountInfo is the model entity for the CoinAccountInfo schema.
type CoinAccountInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CoinTypeID holds the value of the "coin_type_id" field.
	CoinTypeID uuid.UUID `json:"coin_type_id,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// PlatformHoldPrivateKey holds the value of the "platform_hold_private_key" field.
	PlatformHoldPrivateKey bool `json:"platform_hold_private_key,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CoinAccountInfo) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case coinaccountinfo.FieldPlatformHoldPrivateKey:
			values[i] = new(sql.NullBool)
		case coinaccountinfo.FieldCreateAt, coinaccountinfo.FieldUpdateAt, coinaccountinfo.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case coinaccountinfo.FieldAddress:
			values[i] = new(sql.NullString)
		case coinaccountinfo.FieldID, coinaccountinfo.FieldCoinTypeID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CoinAccountInfo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CoinAccountInfo fields.
func (cai *CoinAccountInfo) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case coinaccountinfo.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cai.ID = *value
			}
		case coinaccountinfo.FieldCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type_id", values[i])
			} else if value != nil {
				cai.CoinTypeID = *value
			}
		case coinaccountinfo.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				cai.Address = value.String
			}
		case coinaccountinfo.FieldPlatformHoldPrivateKey:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field platform_hold_private_key", values[i])
			} else if value.Valid {
				cai.PlatformHoldPrivateKey = value.Bool
			}
		case coinaccountinfo.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				cai.CreateAt = uint32(value.Int64)
			}
		case coinaccountinfo.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				cai.UpdateAt = uint32(value.Int64)
			}
		case coinaccountinfo.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				cai.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CoinAccountInfo.
// Note that you need to call CoinAccountInfo.Unwrap() before calling this method if this CoinAccountInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (cai *CoinAccountInfo) Update() *CoinAccountInfoUpdateOne {
	return (&CoinAccountInfoClient{config: cai.config}).UpdateOne(cai)
}

// Unwrap unwraps the CoinAccountInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cai *CoinAccountInfo) Unwrap() *CoinAccountInfo {
	_tx, ok := cai.config.driver.(*txDriver)
	if !ok {
		panic("ent: CoinAccountInfo is not a transactional entity")
	}
	cai.config.driver = _tx.drv
	return cai
}

// String implements the fmt.Stringer.
func (cai *CoinAccountInfo) String() string {
	var builder strings.Builder
	builder.WriteString("CoinAccountInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cai.ID))
	builder.WriteString("coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", cai.CoinTypeID))
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(cai.Address)
	builder.WriteString(", ")
	builder.WriteString("platform_hold_private_key=")
	builder.WriteString(fmt.Sprintf("%v", cai.PlatformHoldPrivateKey))
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(fmt.Sprintf("%v", cai.CreateAt))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(fmt.Sprintf("%v", cai.UpdateAt))
	builder.WriteString(", ")
	builder.WriteString("delete_at=")
	builder.WriteString(fmt.Sprintf("%v", cai.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// CoinAccountInfos is a parsable slice of CoinAccountInfo.
type CoinAccountInfos []*CoinAccountInfo

func (cai CoinAccountInfos) config(cfg config) {
	for _i := range cai {
		cai[_i].config = cfg
	}
}
