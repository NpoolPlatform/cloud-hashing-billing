// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/userbenefit"
	"github.com/google/uuid"
)

// UserBenefitCreate is the builder for creating a UserBenefit entity.
type UserBenefitCreate struct {
	config
	mutation *UserBenefitMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetGoodID sets the "good_id" field.
func (ubc *UserBenefitCreate) SetGoodID(u uuid.UUID) *UserBenefitCreate {
	ubc.mutation.SetGoodID(u)
	return ubc
}

// SetAppID sets the "app_id" field.
func (ubc *UserBenefitCreate) SetAppID(u uuid.UUID) *UserBenefitCreate {
	ubc.mutation.SetAppID(u)
	return ubc
}

// SetUserID sets the "user_id" field.
func (ubc *UserBenefitCreate) SetUserID(u uuid.UUID) *UserBenefitCreate {
	ubc.mutation.SetUserID(u)
	return ubc
}

// SetOrderID sets the "order_id" field.
func (ubc *UserBenefitCreate) SetOrderID(u uuid.UUID) *UserBenefitCreate {
	ubc.mutation.SetOrderID(u)
	return ubc
}

// SetAmount sets the "amount" field.
func (ubc *UserBenefitCreate) SetAmount(u uint64) *UserBenefitCreate {
	ubc.mutation.SetAmount(u)
	return ubc
}

// SetLastBenefitTimestamp sets the "last_benefit_timestamp" field.
func (ubc *UserBenefitCreate) SetLastBenefitTimestamp(u uint32) *UserBenefitCreate {
	ubc.mutation.SetLastBenefitTimestamp(u)
	return ubc
}

// SetCreateAt sets the "create_at" field.
func (ubc *UserBenefitCreate) SetCreateAt(u uint32) *UserBenefitCreate {
	ubc.mutation.SetCreateAt(u)
	return ubc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ubc *UserBenefitCreate) SetNillableCreateAt(u *uint32) *UserBenefitCreate {
	if u != nil {
		ubc.SetCreateAt(*u)
	}
	return ubc
}

// SetUpdateAt sets the "update_at" field.
func (ubc *UserBenefitCreate) SetUpdateAt(u uint32) *UserBenefitCreate {
	ubc.mutation.SetUpdateAt(u)
	return ubc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ubc *UserBenefitCreate) SetNillableUpdateAt(u *uint32) *UserBenefitCreate {
	if u != nil {
		ubc.SetUpdateAt(*u)
	}
	return ubc
}

// SetDeleteAt sets the "delete_at" field.
func (ubc *UserBenefitCreate) SetDeleteAt(u uint32) *UserBenefitCreate {
	ubc.mutation.SetDeleteAt(u)
	return ubc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (ubc *UserBenefitCreate) SetNillableDeleteAt(u *uint32) *UserBenefitCreate {
	if u != nil {
		ubc.SetDeleteAt(*u)
	}
	return ubc
}

// SetID sets the "id" field.
func (ubc *UserBenefitCreate) SetID(u uuid.UUID) *UserBenefitCreate {
	ubc.mutation.SetID(u)
	return ubc
}

// Mutation returns the UserBenefitMutation object of the builder.
func (ubc *UserBenefitCreate) Mutation() *UserBenefitMutation {
	return ubc.mutation
}

// Save creates the UserBenefit in the database.
func (ubc *UserBenefitCreate) Save(ctx context.Context) (*UserBenefit, error) {
	var (
		err  error
		node *UserBenefit
	)
	ubc.defaults()
	if len(ubc.hooks) == 0 {
		if err = ubc.check(); err != nil {
			return nil, err
		}
		node, err = ubc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserBenefitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ubc.check(); err != nil {
				return nil, err
			}
			ubc.mutation = mutation
			if node, err = ubc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ubc.hooks) - 1; i >= 0; i-- {
			if ubc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ubc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ubc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ubc *UserBenefitCreate) SaveX(ctx context.Context) *UserBenefit {
	v, err := ubc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ubc *UserBenefitCreate) Exec(ctx context.Context) error {
	_, err := ubc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ubc *UserBenefitCreate) ExecX(ctx context.Context) {
	if err := ubc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ubc *UserBenefitCreate) defaults() {
	if _, ok := ubc.mutation.CreateAt(); !ok {
		v := userbenefit.DefaultCreateAt()
		ubc.mutation.SetCreateAt(v)
	}
	if _, ok := ubc.mutation.UpdateAt(); !ok {
		v := userbenefit.DefaultUpdateAt()
		ubc.mutation.SetUpdateAt(v)
	}
	if _, ok := ubc.mutation.DeleteAt(); !ok {
		v := userbenefit.DefaultDeleteAt()
		ubc.mutation.SetDeleteAt(v)
	}
	if _, ok := ubc.mutation.ID(); !ok {
		v := userbenefit.DefaultID()
		ubc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ubc *UserBenefitCreate) check() error {
	if _, ok := ubc.mutation.GoodID(); !ok {
		return &ValidationError{Name: "good_id", err: errors.New(`ent: missing required field "good_id"`)}
	}
	if _, ok := ubc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "app_id"`)}
	}
	if _, ok := ubc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "user_id"`)}
	}
	if _, ok := ubc.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order_id", err: errors.New(`ent: missing required field "order_id"`)}
	}
	if _, ok := ubc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "amount"`)}
	}
	if _, ok := ubc.mutation.LastBenefitTimestamp(); !ok {
		return &ValidationError{Name: "last_benefit_timestamp", err: errors.New(`ent: missing required field "last_benefit_timestamp"`)}
	}
	if _, ok := ubc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "create_at"`)}
	}
	if _, ok := ubc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "update_at"`)}
	}
	if _, ok := ubc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "delete_at"`)}
	}
	return nil
}

func (ubc *UserBenefitCreate) sqlSave(ctx context.Context) (*UserBenefit, error) {
	_node, _spec := ubc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ubc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (ubc *UserBenefitCreate) createSpec() (*UserBenefit, *sqlgraph.CreateSpec) {
	var (
		_node = &UserBenefit{config: ubc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userbenefit.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userbenefit.FieldID,
			},
		}
	)
	_spec.OnConflict = ubc.conflict
	if id, ok := ubc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ubc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userbenefit.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := ubc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userbenefit.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := ubc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userbenefit.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := ubc.mutation.OrderID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userbenefit.FieldOrderID,
		})
		_node.OrderID = value
	}
	if value, ok := ubc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: userbenefit.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := ubc.mutation.LastBenefitTimestamp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userbenefit.FieldLastBenefitTimestamp,
		})
		_node.LastBenefitTimestamp = value
	}
	if value, ok := ubc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userbenefit.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := ubc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userbenefit.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := ubc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userbenefit.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserBenefit.Create().
//		SetGoodID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserBenefitUpsert) {
//			SetGoodID(v+v).
//		}).
//		Exec(ctx)
//
func (ubc *UserBenefitCreate) OnConflict(opts ...sql.ConflictOption) *UserBenefitUpsertOne {
	ubc.conflict = opts
	return &UserBenefitUpsertOne{
		create: ubc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserBenefit.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ubc *UserBenefitCreate) OnConflictColumns(columns ...string) *UserBenefitUpsertOne {
	ubc.conflict = append(ubc.conflict, sql.ConflictColumns(columns...))
	return &UserBenefitUpsertOne{
		create: ubc,
	}
}

type (
	// UserBenefitUpsertOne is the builder for "upsert"-ing
	//  one UserBenefit node.
	UserBenefitUpsertOne struct {
		create *UserBenefitCreate
	}

	// UserBenefitUpsert is the "OnConflict" setter.
	UserBenefitUpsert struct {
		*sql.UpdateSet
	}
)

// SetGoodID sets the "good_id" field.
func (u *UserBenefitUpsert) SetGoodID(v uuid.UUID) *UserBenefitUpsert {
	u.Set(userbenefit.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *UserBenefitUpsert) UpdateGoodID() *UserBenefitUpsert {
	u.SetExcluded(userbenefit.FieldGoodID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *UserBenefitUpsert) SetAppID(v uuid.UUID) *UserBenefitUpsert {
	u.Set(userbenefit.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *UserBenefitUpsert) UpdateAppID() *UserBenefitUpsert {
	u.SetExcluded(userbenefit.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserBenefitUpsert) SetUserID(v uuid.UUID) *UserBenefitUpsert {
	u.Set(userbenefit.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserBenefitUpsert) UpdateUserID() *UserBenefitUpsert {
	u.SetExcluded(userbenefit.FieldUserID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *UserBenefitUpsert) SetOrderID(v uuid.UUID) *UserBenefitUpsert {
	u.Set(userbenefit.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *UserBenefitUpsert) UpdateOrderID() *UserBenefitUpsert {
	u.SetExcluded(userbenefit.FieldOrderID)
	return u
}

// SetAmount sets the "amount" field.
func (u *UserBenefitUpsert) SetAmount(v uint64) *UserBenefitUpsert {
	u.Set(userbenefit.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *UserBenefitUpsert) UpdateAmount() *UserBenefitUpsert {
	u.SetExcluded(userbenefit.FieldAmount)
	return u
}

// SetLastBenefitTimestamp sets the "last_benefit_timestamp" field.
func (u *UserBenefitUpsert) SetLastBenefitTimestamp(v uint32) *UserBenefitUpsert {
	u.Set(userbenefit.FieldLastBenefitTimestamp, v)
	return u
}

// UpdateLastBenefitTimestamp sets the "last_benefit_timestamp" field to the value that was provided on create.
func (u *UserBenefitUpsert) UpdateLastBenefitTimestamp() *UserBenefitUpsert {
	u.SetExcluded(userbenefit.FieldLastBenefitTimestamp)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *UserBenefitUpsert) SetCreateAt(v uint32) *UserBenefitUpsert {
	u.Set(userbenefit.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *UserBenefitUpsert) UpdateCreateAt() *UserBenefitUpsert {
	u.SetExcluded(userbenefit.FieldCreateAt)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *UserBenefitUpsert) SetUpdateAt(v uint32) *UserBenefitUpsert {
	u.Set(userbenefit.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *UserBenefitUpsert) UpdateUpdateAt() *UserBenefitUpsert {
	u.SetExcluded(userbenefit.FieldUpdateAt)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *UserBenefitUpsert) SetDeleteAt(v uint32) *UserBenefitUpsert {
	u.Set(userbenefit.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *UserBenefitUpsert) UpdateDeleteAt() *UserBenefitUpsert {
	u.SetExcluded(userbenefit.FieldDeleteAt)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserBenefit.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userbenefit.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *UserBenefitUpsertOne) UpdateNewValues() *UserBenefitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(userbenefit.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.UserBenefit.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *UserBenefitUpsertOne) Ignore() *UserBenefitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserBenefitUpsertOne) DoNothing() *UserBenefitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserBenefitCreate.OnConflict
// documentation for more info.
func (u *UserBenefitUpsertOne) Update(set func(*UserBenefitUpsert)) *UserBenefitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserBenefitUpsert{UpdateSet: update})
	}))
	return u
}

// SetGoodID sets the "good_id" field.
func (u *UserBenefitUpsertOne) SetGoodID(v uuid.UUID) *UserBenefitUpsertOne {
	return u.Update(func(s *UserBenefitUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *UserBenefitUpsertOne) UpdateGoodID() *UserBenefitUpsertOne {
	return u.Update(func(s *UserBenefitUpsert) {
		s.UpdateGoodID()
	})
}

// SetAppID sets the "app_id" field.
func (u *UserBenefitUpsertOne) SetAppID(v uuid.UUID) *UserBenefitUpsertOne {
	return u.Update(func(s *UserBenefitUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *UserBenefitUpsertOne) UpdateAppID() *UserBenefitUpsertOne {
	return u.Update(func(s *UserBenefitUpsert) {
		s.UpdateAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserBenefitUpsertOne) SetUserID(v uuid.UUID) *UserBenefitUpsertOne {
	return u.Update(func(s *UserBenefitUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserBenefitUpsertOne) UpdateUserID() *UserBenefitUpsertOne {
	return u.Update(func(s *UserBenefitUpsert) {
		s.UpdateUserID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *UserBenefitUpsertOne) SetOrderID(v uuid.UUID) *UserBenefitUpsertOne {
	return u.Update(func(s *UserBenefitUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *UserBenefitUpsertOne) UpdateOrderID() *UserBenefitUpsertOne {
	return u.Update(func(s *UserBenefitUpsert) {
		s.UpdateOrderID()
	})
}

// SetAmount sets the "amount" field.
func (u *UserBenefitUpsertOne) SetAmount(v uint64) *UserBenefitUpsertOne {
	return u.Update(func(s *UserBenefitUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *UserBenefitUpsertOne) UpdateAmount() *UserBenefitUpsertOne {
	return u.Update(func(s *UserBenefitUpsert) {
		s.UpdateAmount()
	})
}

// SetLastBenefitTimestamp sets the "last_benefit_timestamp" field.
func (u *UserBenefitUpsertOne) SetLastBenefitTimestamp(v uint32) *UserBenefitUpsertOne {
	return u.Update(func(s *UserBenefitUpsert) {
		s.SetLastBenefitTimestamp(v)
	})
}

// UpdateLastBenefitTimestamp sets the "last_benefit_timestamp" field to the value that was provided on create.
func (u *UserBenefitUpsertOne) UpdateLastBenefitTimestamp() *UserBenefitUpsertOne {
	return u.Update(func(s *UserBenefitUpsert) {
		s.UpdateLastBenefitTimestamp()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *UserBenefitUpsertOne) SetCreateAt(v uint32) *UserBenefitUpsertOne {
	return u.Update(func(s *UserBenefitUpsert) {
		s.SetCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *UserBenefitUpsertOne) UpdateCreateAt() *UserBenefitUpsertOne {
	return u.Update(func(s *UserBenefitUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *UserBenefitUpsertOne) SetUpdateAt(v uint32) *UserBenefitUpsertOne {
	return u.Update(func(s *UserBenefitUpsert) {
		s.SetUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *UserBenefitUpsertOne) UpdateUpdateAt() *UserBenefitUpsertOne {
	return u.Update(func(s *UserBenefitUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *UserBenefitUpsertOne) SetDeleteAt(v uint32) *UserBenefitUpsertOne {
	return u.Update(func(s *UserBenefitUpsert) {
		s.SetDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *UserBenefitUpsertOne) UpdateDeleteAt() *UserBenefitUpsertOne {
	return u.Update(func(s *UserBenefitUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *UserBenefitUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserBenefitCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserBenefitUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserBenefitUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: UserBenefitUpsertOne.ID is not supported by MySQL driver. Use UserBenefitUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserBenefitUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserBenefitCreateBulk is the builder for creating many UserBenefit entities in bulk.
type UserBenefitCreateBulk struct {
	config
	builders []*UserBenefitCreate
	conflict []sql.ConflictOption
}

// Save creates the UserBenefit entities in the database.
func (ubcb *UserBenefitCreateBulk) Save(ctx context.Context) ([]*UserBenefit, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ubcb.builders))
	nodes := make([]*UserBenefit, len(ubcb.builders))
	mutators := make([]Mutator, len(ubcb.builders))
	for i := range ubcb.builders {
		func(i int, root context.Context) {
			builder := ubcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserBenefitMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ubcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ubcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ubcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ubcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ubcb *UserBenefitCreateBulk) SaveX(ctx context.Context) []*UserBenefit {
	v, err := ubcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ubcb *UserBenefitCreateBulk) Exec(ctx context.Context) error {
	_, err := ubcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ubcb *UserBenefitCreateBulk) ExecX(ctx context.Context) {
	if err := ubcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserBenefit.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserBenefitUpsert) {
//			SetGoodID(v+v).
//		}).
//		Exec(ctx)
//
func (ubcb *UserBenefitCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserBenefitUpsertBulk {
	ubcb.conflict = opts
	return &UserBenefitUpsertBulk{
		create: ubcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserBenefit.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ubcb *UserBenefitCreateBulk) OnConflictColumns(columns ...string) *UserBenefitUpsertBulk {
	ubcb.conflict = append(ubcb.conflict, sql.ConflictColumns(columns...))
	return &UserBenefitUpsertBulk{
		create: ubcb,
	}
}

// UserBenefitUpsertBulk is the builder for "upsert"-ing
// a bulk of UserBenefit nodes.
type UserBenefitUpsertBulk struct {
	create *UserBenefitCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserBenefit.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userbenefit.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *UserBenefitUpsertBulk) UpdateNewValues() *UserBenefitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(userbenefit.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserBenefit.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *UserBenefitUpsertBulk) Ignore() *UserBenefitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserBenefitUpsertBulk) DoNothing() *UserBenefitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserBenefitCreateBulk.OnConflict
// documentation for more info.
func (u *UserBenefitUpsertBulk) Update(set func(*UserBenefitUpsert)) *UserBenefitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserBenefitUpsert{UpdateSet: update})
	}))
	return u
}

// SetGoodID sets the "good_id" field.
func (u *UserBenefitUpsertBulk) SetGoodID(v uuid.UUID) *UserBenefitUpsertBulk {
	return u.Update(func(s *UserBenefitUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *UserBenefitUpsertBulk) UpdateGoodID() *UserBenefitUpsertBulk {
	return u.Update(func(s *UserBenefitUpsert) {
		s.UpdateGoodID()
	})
}

// SetAppID sets the "app_id" field.
func (u *UserBenefitUpsertBulk) SetAppID(v uuid.UUID) *UserBenefitUpsertBulk {
	return u.Update(func(s *UserBenefitUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *UserBenefitUpsertBulk) UpdateAppID() *UserBenefitUpsertBulk {
	return u.Update(func(s *UserBenefitUpsert) {
		s.UpdateAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserBenefitUpsertBulk) SetUserID(v uuid.UUID) *UserBenefitUpsertBulk {
	return u.Update(func(s *UserBenefitUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserBenefitUpsertBulk) UpdateUserID() *UserBenefitUpsertBulk {
	return u.Update(func(s *UserBenefitUpsert) {
		s.UpdateUserID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *UserBenefitUpsertBulk) SetOrderID(v uuid.UUID) *UserBenefitUpsertBulk {
	return u.Update(func(s *UserBenefitUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *UserBenefitUpsertBulk) UpdateOrderID() *UserBenefitUpsertBulk {
	return u.Update(func(s *UserBenefitUpsert) {
		s.UpdateOrderID()
	})
}

// SetAmount sets the "amount" field.
func (u *UserBenefitUpsertBulk) SetAmount(v uint64) *UserBenefitUpsertBulk {
	return u.Update(func(s *UserBenefitUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *UserBenefitUpsertBulk) UpdateAmount() *UserBenefitUpsertBulk {
	return u.Update(func(s *UserBenefitUpsert) {
		s.UpdateAmount()
	})
}

// SetLastBenefitTimestamp sets the "last_benefit_timestamp" field.
func (u *UserBenefitUpsertBulk) SetLastBenefitTimestamp(v uint32) *UserBenefitUpsertBulk {
	return u.Update(func(s *UserBenefitUpsert) {
		s.SetLastBenefitTimestamp(v)
	})
}

// UpdateLastBenefitTimestamp sets the "last_benefit_timestamp" field to the value that was provided on create.
func (u *UserBenefitUpsertBulk) UpdateLastBenefitTimestamp() *UserBenefitUpsertBulk {
	return u.Update(func(s *UserBenefitUpsert) {
		s.UpdateLastBenefitTimestamp()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *UserBenefitUpsertBulk) SetCreateAt(v uint32) *UserBenefitUpsertBulk {
	return u.Update(func(s *UserBenefitUpsert) {
		s.SetCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *UserBenefitUpsertBulk) UpdateCreateAt() *UserBenefitUpsertBulk {
	return u.Update(func(s *UserBenefitUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *UserBenefitUpsertBulk) SetUpdateAt(v uint32) *UserBenefitUpsertBulk {
	return u.Update(func(s *UserBenefitUpsert) {
		s.SetUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *UserBenefitUpsertBulk) UpdateUpdateAt() *UserBenefitUpsertBulk {
	return u.Update(func(s *UserBenefitUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *UserBenefitUpsertBulk) SetDeleteAt(v uint32) *UserBenefitUpsertBulk {
	return u.Update(func(s *UserBenefitUpsert) {
		s.SetDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *UserBenefitUpsertBulk) UpdateDeleteAt() *UserBenefitUpsertBulk {
	return u.Update(func(s *UserBenefitUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *UserBenefitUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserBenefitCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserBenefitCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserBenefitUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
