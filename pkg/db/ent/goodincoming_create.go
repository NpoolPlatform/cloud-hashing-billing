// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/goodincoming"
	"github.com/google/uuid"
)

// GoodIncomingCreate is the builder for creating a GoodIncoming entity.
type GoodIncomingCreate struct {
	config
	mutation *GoodIncomingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetGoodID sets the "good_id" field.
func (gic *GoodIncomingCreate) SetGoodID(u uuid.UUID) *GoodIncomingCreate {
	gic.mutation.SetGoodID(u)
	return gic
}

// SetCoinTypeID sets the "coin_type_id" field.
func (gic *GoodIncomingCreate) SetCoinTypeID(u uuid.UUID) *GoodIncomingCreate {
	gic.mutation.SetCoinTypeID(u)
	return gic
}

// SetAccountID sets the "account_id" field.
func (gic *GoodIncomingCreate) SetAccountID(u uuid.UUID) *GoodIncomingCreate {
	gic.mutation.SetAccountID(u)
	return gic
}

// SetCreateAt sets the "create_at" field.
func (gic *GoodIncomingCreate) SetCreateAt(u uint32) *GoodIncomingCreate {
	gic.mutation.SetCreateAt(u)
	return gic
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (gic *GoodIncomingCreate) SetNillableCreateAt(u *uint32) *GoodIncomingCreate {
	if u != nil {
		gic.SetCreateAt(*u)
	}
	return gic
}

// SetUpdateAt sets the "update_at" field.
func (gic *GoodIncomingCreate) SetUpdateAt(u uint32) *GoodIncomingCreate {
	gic.mutation.SetUpdateAt(u)
	return gic
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (gic *GoodIncomingCreate) SetNillableUpdateAt(u *uint32) *GoodIncomingCreate {
	if u != nil {
		gic.SetUpdateAt(*u)
	}
	return gic
}

// SetDeleteAt sets the "delete_at" field.
func (gic *GoodIncomingCreate) SetDeleteAt(u uint32) *GoodIncomingCreate {
	gic.mutation.SetDeleteAt(u)
	return gic
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (gic *GoodIncomingCreate) SetNillableDeleteAt(u *uint32) *GoodIncomingCreate {
	if u != nil {
		gic.SetDeleteAt(*u)
	}
	return gic
}

// SetID sets the "id" field.
func (gic *GoodIncomingCreate) SetID(u uuid.UUID) *GoodIncomingCreate {
	gic.mutation.SetID(u)
	return gic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (gic *GoodIncomingCreate) SetNillableID(u *uuid.UUID) *GoodIncomingCreate {
	if u != nil {
		gic.SetID(*u)
	}
	return gic
}

// Mutation returns the GoodIncomingMutation object of the builder.
func (gic *GoodIncomingCreate) Mutation() *GoodIncomingMutation {
	return gic.mutation
}

// Save creates the GoodIncoming in the database.
func (gic *GoodIncomingCreate) Save(ctx context.Context) (*GoodIncoming, error) {
	var (
		err  error
		node *GoodIncoming
	)
	gic.defaults()
	if len(gic.hooks) == 0 {
		if err = gic.check(); err != nil {
			return nil, err
		}
		node, err = gic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodIncomingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gic.check(); err != nil {
				return nil, err
			}
			gic.mutation = mutation
			if node, err = gic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gic.hooks) - 1; i >= 0; i-- {
			if gic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gic *GoodIncomingCreate) SaveX(ctx context.Context) *GoodIncoming {
	v, err := gic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gic *GoodIncomingCreate) Exec(ctx context.Context) error {
	_, err := gic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gic *GoodIncomingCreate) ExecX(ctx context.Context) {
	if err := gic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gic *GoodIncomingCreate) defaults() {
	if _, ok := gic.mutation.CreateAt(); !ok {
		v := goodincoming.DefaultCreateAt()
		gic.mutation.SetCreateAt(v)
	}
	if _, ok := gic.mutation.UpdateAt(); !ok {
		v := goodincoming.DefaultUpdateAt()
		gic.mutation.SetUpdateAt(v)
	}
	if _, ok := gic.mutation.DeleteAt(); !ok {
		v := goodincoming.DefaultDeleteAt()
		gic.mutation.SetDeleteAt(v)
	}
	if _, ok := gic.mutation.ID(); !ok {
		v := goodincoming.DefaultID()
		gic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gic *GoodIncomingCreate) check() error {
	if _, ok := gic.mutation.GoodID(); !ok {
		return &ValidationError{Name: "good_id", err: errors.New(`ent: missing required field "GoodIncoming.good_id"`)}
	}
	if _, ok := gic.mutation.CoinTypeID(); !ok {
		return &ValidationError{Name: "coin_type_id", err: errors.New(`ent: missing required field "GoodIncoming.coin_type_id"`)}
	}
	if _, ok := gic.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account_id", err: errors.New(`ent: missing required field "GoodIncoming.account_id"`)}
	}
	if _, ok := gic.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "GoodIncoming.create_at"`)}
	}
	if _, ok := gic.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "GoodIncoming.update_at"`)}
	}
	if _, ok := gic.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "GoodIncoming.delete_at"`)}
	}
	return nil
}

func (gic *GoodIncomingCreate) sqlSave(ctx context.Context) (*GoodIncoming, error) {
	_node, _spec := gic.createSpec()
	if err := sqlgraph.CreateNode(ctx, gic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (gic *GoodIncomingCreate) createSpec() (*GoodIncoming, *sqlgraph.CreateSpec) {
	var (
		_node = &GoodIncoming{config: gic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: goodincoming.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodincoming.FieldID,
			},
		}
	)
	_spec.OnConflict = gic.conflict
	if id, ok := gic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := gic.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodincoming.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := gic.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodincoming.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := gic.mutation.AccountID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodincoming.FieldAccountID,
		})
		_node.AccountID = value
	}
	if value, ok := gic.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodincoming.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := gic.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodincoming.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := gic.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodincoming.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodIncoming.Create().
//		SetGoodID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodIncomingUpsert) {
//			SetGoodID(v+v).
//		}).
//		Exec(ctx)
//
func (gic *GoodIncomingCreate) OnConflict(opts ...sql.ConflictOption) *GoodIncomingUpsertOne {
	gic.conflict = opts
	return &GoodIncomingUpsertOne{
		create: gic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodIncoming.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gic *GoodIncomingCreate) OnConflictColumns(columns ...string) *GoodIncomingUpsertOne {
	gic.conflict = append(gic.conflict, sql.ConflictColumns(columns...))
	return &GoodIncomingUpsertOne{
		create: gic,
	}
}

type (
	// GoodIncomingUpsertOne is the builder for "upsert"-ing
	//  one GoodIncoming node.
	GoodIncomingUpsertOne struct {
		create *GoodIncomingCreate
	}

	// GoodIncomingUpsert is the "OnConflict" setter.
	GoodIncomingUpsert struct {
		*sql.UpdateSet
	}
)

// SetGoodID sets the "good_id" field.
func (u *GoodIncomingUpsert) SetGoodID(v uuid.UUID) *GoodIncomingUpsert {
	u.Set(goodincoming.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodIncomingUpsert) UpdateGoodID() *GoodIncomingUpsert {
	u.SetExcluded(goodincoming.FieldGoodID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *GoodIncomingUpsert) SetCoinTypeID(v uuid.UUID) *GoodIncomingUpsert {
	u.Set(goodincoming.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *GoodIncomingUpsert) UpdateCoinTypeID() *GoodIncomingUpsert {
	u.SetExcluded(goodincoming.FieldCoinTypeID)
	return u
}

// SetAccountID sets the "account_id" field.
func (u *GoodIncomingUpsert) SetAccountID(v uuid.UUID) *GoodIncomingUpsert {
	u.Set(goodincoming.FieldAccountID, v)
	return u
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *GoodIncomingUpsert) UpdateAccountID() *GoodIncomingUpsert {
	u.SetExcluded(goodincoming.FieldAccountID)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *GoodIncomingUpsert) SetCreateAt(v uint32) *GoodIncomingUpsert {
	u.Set(goodincoming.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *GoodIncomingUpsert) UpdateCreateAt() *GoodIncomingUpsert {
	u.SetExcluded(goodincoming.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *GoodIncomingUpsert) AddCreateAt(v uint32) *GoodIncomingUpsert {
	u.Add(goodincoming.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *GoodIncomingUpsert) SetUpdateAt(v uint32) *GoodIncomingUpsert {
	u.Set(goodincoming.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *GoodIncomingUpsert) UpdateUpdateAt() *GoodIncomingUpsert {
	u.SetExcluded(goodincoming.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *GoodIncomingUpsert) AddUpdateAt(v uint32) *GoodIncomingUpsert {
	u.Add(goodincoming.FieldUpdateAt, v)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *GoodIncomingUpsert) SetDeleteAt(v uint32) *GoodIncomingUpsert {
	u.Set(goodincoming.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *GoodIncomingUpsert) UpdateDeleteAt() *GoodIncomingUpsert {
	u.SetExcluded(goodincoming.FieldDeleteAt)
	return u
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *GoodIncomingUpsert) AddDeleteAt(v uint32) *GoodIncomingUpsert {
	u.Add(goodincoming.FieldDeleteAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GoodIncoming.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodincoming.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodIncomingUpsertOne) UpdateNewValues() *GoodIncomingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(goodincoming.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.GoodIncoming.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *GoodIncomingUpsertOne) Ignore() *GoodIncomingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodIncomingUpsertOne) DoNothing() *GoodIncomingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodIncomingCreate.OnConflict
// documentation for more info.
func (u *GoodIncomingUpsertOne) Update(set func(*GoodIncomingUpsert)) *GoodIncomingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodIncomingUpsert{UpdateSet: update})
	}))
	return u
}

// SetGoodID sets the "good_id" field.
func (u *GoodIncomingUpsertOne) SetGoodID(v uuid.UUID) *GoodIncomingUpsertOne {
	return u.Update(func(s *GoodIncomingUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodIncomingUpsertOne) UpdateGoodID() *GoodIncomingUpsertOne {
	return u.Update(func(s *GoodIncomingUpsert) {
		s.UpdateGoodID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *GoodIncomingUpsertOne) SetCoinTypeID(v uuid.UUID) *GoodIncomingUpsertOne {
	return u.Update(func(s *GoodIncomingUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *GoodIncomingUpsertOne) UpdateCoinTypeID() *GoodIncomingUpsertOne {
	return u.Update(func(s *GoodIncomingUpsert) {
		s.UpdateCoinTypeID()
	})
}

// SetAccountID sets the "account_id" field.
func (u *GoodIncomingUpsertOne) SetAccountID(v uuid.UUID) *GoodIncomingUpsertOne {
	return u.Update(func(s *GoodIncomingUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *GoodIncomingUpsertOne) UpdateAccountID() *GoodIncomingUpsertOne {
	return u.Update(func(s *GoodIncomingUpsert) {
		s.UpdateAccountID()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *GoodIncomingUpsertOne) SetCreateAt(v uint32) *GoodIncomingUpsertOne {
	return u.Update(func(s *GoodIncomingUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *GoodIncomingUpsertOne) AddCreateAt(v uint32) *GoodIncomingUpsertOne {
	return u.Update(func(s *GoodIncomingUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *GoodIncomingUpsertOne) UpdateCreateAt() *GoodIncomingUpsertOne {
	return u.Update(func(s *GoodIncomingUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *GoodIncomingUpsertOne) SetUpdateAt(v uint32) *GoodIncomingUpsertOne {
	return u.Update(func(s *GoodIncomingUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *GoodIncomingUpsertOne) AddUpdateAt(v uint32) *GoodIncomingUpsertOne {
	return u.Update(func(s *GoodIncomingUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *GoodIncomingUpsertOne) UpdateUpdateAt() *GoodIncomingUpsertOne {
	return u.Update(func(s *GoodIncomingUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *GoodIncomingUpsertOne) SetDeleteAt(v uint32) *GoodIncomingUpsertOne {
	return u.Update(func(s *GoodIncomingUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *GoodIncomingUpsertOne) AddDeleteAt(v uint32) *GoodIncomingUpsertOne {
	return u.Update(func(s *GoodIncomingUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *GoodIncomingUpsertOne) UpdateDeleteAt() *GoodIncomingUpsertOne {
	return u.Update(func(s *GoodIncomingUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *GoodIncomingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoodIncomingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodIncomingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GoodIncomingUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: GoodIncomingUpsertOne.ID is not supported by MySQL driver. Use GoodIncomingUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GoodIncomingUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GoodIncomingCreateBulk is the builder for creating many GoodIncoming entities in bulk.
type GoodIncomingCreateBulk struct {
	config
	builders []*GoodIncomingCreate
	conflict []sql.ConflictOption
}

// Save creates the GoodIncoming entities in the database.
func (gicb *GoodIncomingCreateBulk) Save(ctx context.Context) ([]*GoodIncoming, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gicb.builders))
	nodes := make([]*GoodIncoming, len(gicb.builders))
	mutators := make([]Mutator, len(gicb.builders))
	for i := range gicb.builders {
		func(i int, root context.Context) {
			builder := gicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoodIncomingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gicb *GoodIncomingCreateBulk) SaveX(ctx context.Context) []*GoodIncoming {
	v, err := gicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gicb *GoodIncomingCreateBulk) Exec(ctx context.Context) error {
	_, err := gicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gicb *GoodIncomingCreateBulk) ExecX(ctx context.Context) {
	if err := gicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodIncoming.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodIncomingUpsert) {
//			SetGoodID(v+v).
//		}).
//		Exec(ctx)
//
func (gicb *GoodIncomingCreateBulk) OnConflict(opts ...sql.ConflictOption) *GoodIncomingUpsertBulk {
	gicb.conflict = opts
	return &GoodIncomingUpsertBulk{
		create: gicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodIncoming.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gicb *GoodIncomingCreateBulk) OnConflictColumns(columns ...string) *GoodIncomingUpsertBulk {
	gicb.conflict = append(gicb.conflict, sql.ConflictColumns(columns...))
	return &GoodIncomingUpsertBulk{
		create: gicb,
	}
}

// GoodIncomingUpsertBulk is the builder for "upsert"-ing
// a bulk of GoodIncoming nodes.
type GoodIncomingUpsertBulk struct {
	create *GoodIncomingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GoodIncoming.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodincoming.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodIncomingUpsertBulk) UpdateNewValues() *GoodIncomingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(goodincoming.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GoodIncoming.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *GoodIncomingUpsertBulk) Ignore() *GoodIncomingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodIncomingUpsertBulk) DoNothing() *GoodIncomingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodIncomingCreateBulk.OnConflict
// documentation for more info.
func (u *GoodIncomingUpsertBulk) Update(set func(*GoodIncomingUpsert)) *GoodIncomingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodIncomingUpsert{UpdateSet: update})
	}))
	return u
}

// SetGoodID sets the "good_id" field.
func (u *GoodIncomingUpsertBulk) SetGoodID(v uuid.UUID) *GoodIncomingUpsertBulk {
	return u.Update(func(s *GoodIncomingUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodIncomingUpsertBulk) UpdateGoodID() *GoodIncomingUpsertBulk {
	return u.Update(func(s *GoodIncomingUpsert) {
		s.UpdateGoodID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *GoodIncomingUpsertBulk) SetCoinTypeID(v uuid.UUID) *GoodIncomingUpsertBulk {
	return u.Update(func(s *GoodIncomingUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *GoodIncomingUpsertBulk) UpdateCoinTypeID() *GoodIncomingUpsertBulk {
	return u.Update(func(s *GoodIncomingUpsert) {
		s.UpdateCoinTypeID()
	})
}

// SetAccountID sets the "account_id" field.
func (u *GoodIncomingUpsertBulk) SetAccountID(v uuid.UUID) *GoodIncomingUpsertBulk {
	return u.Update(func(s *GoodIncomingUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *GoodIncomingUpsertBulk) UpdateAccountID() *GoodIncomingUpsertBulk {
	return u.Update(func(s *GoodIncomingUpsert) {
		s.UpdateAccountID()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *GoodIncomingUpsertBulk) SetCreateAt(v uint32) *GoodIncomingUpsertBulk {
	return u.Update(func(s *GoodIncomingUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *GoodIncomingUpsertBulk) AddCreateAt(v uint32) *GoodIncomingUpsertBulk {
	return u.Update(func(s *GoodIncomingUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *GoodIncomingUpsertBulk) UpdateCreateAt() *GoodIncomingUpsertBulk {
	return u.Update(func(s *GoodIncomingUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *GoodIncomingUpsertBulk) SetUpdateAt(v uint32) *GoodIncomingUpsertBulk {
	return u.Update(func(s *GoodIncomingUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *GoodIncomingUpsertBulk) AddUpdateAt(v uint32) *GoodIncomingUpsertBulk {
	return u.Update(func(s *GoodIncomingUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *GoodIncomingUpsertBulk) UpdateUpdateAt() *GoodIncomingUpsertBulk {
	return u.Update(func(s *GoodIncomingUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *GoodIncomingUpsertBulk) SetDeleteAt(v uint32) *GoodIncomingUpsertBulk {
	return u.Update(func(s *GoodIncomingUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *GoodIncomingUpsertBulk) AddDeleteAt(v uint32) *GoodIncomingUpsertBulk {
	return u.Update(func(s *GoodIncomingUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *GoodIncomingUpsertBulk) UpdateDeleteAt() *GoodIncomingUpsertBulk {
	return u.Update(func(s *GoodIncomingUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *GoodIncomingUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GoodIncomingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoodIncomingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodIncomingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
