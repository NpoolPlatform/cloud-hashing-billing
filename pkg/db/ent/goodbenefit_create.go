// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/goodbenefit"
	"github.com/google/uuid"
)

// GoodBenefitCreate is the builder for creating a GoodBenefit entity.
type GoodBenefitCreate struct {
	config
	mutation *GoodBenefitMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetGoodID sets the "good_id" field.
func (gbc *GoodBenefitCreate) SetGoodID(u uuid.UUID) *GoodBenefitCreate {
	gbc.mutation.SetGoodID(u)
	return gbc
}

// SetBenefitAccountID sets the "benefit_account_id" field.
func (gbc *GoodBenefitCreate) SetBenefitAccountID(u uuid.UUID) *GoodBenefitCreate {
	gbc.mutation.SetBenefitAccountID(u)
	return gbc
}

// SetPlatformOfflineAccountID sets the "platform_offline_account_id" field.
func (gbc *GoodBenefitCreate) SetPlatformOfflineAccountID(u uuid.UUID) *GoodBenefitCreate {
	gbc.mutation.SetPlatformOfflineAccountID(u)
	return gbc
}

// SetUserOnlineAccountID sets the "user_online_account_id" field.
func (gbc *GoodBenefitCreate) SetUserOnlineAccountID(u uuid.UUID) *GoodBenefitCreate {
	gbc.mutation.SetUserOnlineAccountID(u)
	return gbc
}

// SetUserOfflineAccountID sets the "user_offline_account_id" field.
func (gbc *GoodBenefitCreate) SetUserOfflineAccountID(u uuid.UUID) *GoodBenefitCreate {
	gbc.mutation.SetUserOfflineAccountID(u)
	return gbc
}

// SetBenefitIntervalHours sets the "benefit_interval_hours" field.
func (gbc *GoodBenefitCreate) SetBenefitIntervalHours(i int32) *GoodBenefitCreate {
	gbc.mutation.SetBenefitIntervalHours(i)
	return gbc
}

// SetCreateAt sets the "create_at" field.
func (gbc *GoodBenefitCreate) SetCreateAt(u uint32) *GoodBenefitCreate {
	gbc.mutation.SetCreateAt(u)
	return gbc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (gbc *GoodBenefitCreate) SetNillableCreateAt(u *uint32) *GoodBenefitCreate {
	if u != nil {
		gbc.SetCreateAt(*u)
	}
	return gbc
}

// SetUpdateAt sets the "update_at" field.
func (gbc *GoodBenefitCreate) SetUpdateAt(u uint32) *GoodBenefitCreate {
	gbc.mutation.SetUpdateAt(u)
	return gbc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (gbc *GoodBenefitCreate) SetNillableUpdateAt(u *uint32) *GoodBenefitCreate {
	if u != nil {
		gbc.SetUpdateAt(*u)
	}
	return gbc
}

// SetDeleteAt sets the "delete_at" field.
func (gbc *GoodBenefitCreate) SetDeleteAt(u uint32) *GoodBenefitCreate {
	gbc.mutation.SetDeleteAt(u)
	return gbc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (gbc *GoodBenefitCreate) SetNillableDeleteAt(u *uint32) *GoodBenefitCreate {
	if u != nil {
		gbc.SetDeleteAt(*u)
	}
	return gbc
}

// SetID sets the "id" field.
func (gbc *GoodBenefitCreate) SetID(u uuid.UUID) *GoodBenefitCreate {
	gbc.mutation.SetID(u)
	return gbc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (gbc *GoodBenefitCreate) SetNillableID(u *uuid.UUID) *GoodBenefitCreate {
	if u != nil {
		gbc.SetID(*u)
	}
	return gbc
}

// Mutation returns the GoodBenefitMutation object of the builder.
func (gbc *GoodBenefitCreate) Mutation() *GoodBenefitMutation {
	return gbc.mutation
}

// Save creates the GoodBenefit in the database.
func (gbc *GoodBenefitCreate) Save(ctx context.Context) (*GoodBenefit, error) {
	var (
		err  error
		node *GoodBenefit
	)
	gbc.defaults()
	if len(gbc.hooks) == 0 {
		if err = gbc.check(); err != nil {
			return nil, err
		}
		node, err = gbc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodBenefitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gbc.check(); err != nil {
				return nil, err
			}
			gbc.mutation = mutation
			if node, err = gbc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gbc.hooks) - 1; i >= 0; i-- {
			if gbc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gbc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gbc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gbc *GoodBenefitCreate) SaveX(ctx context.Context) *GoodBenefit {
	v, err := gbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gbc *GoodBenefitCreate) Exec(ctx context.Context) error {
	_, err := gbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gbc *GoodBenefitCreate) ExecX(ctx context.Context) {
	if err := gbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gbc *GoodBenefitCreate) defaults() {
	if _, ok := gbc.mutation.CreateAt(); !ok {
		v := goodbenefit.DefaultCreateAt()
		gbc.mutation.SetCreateAt(v)
	}
	if _, ok := gbc.mutation.UpdateAt(); !ok {
		v := goodbenefit.DefaultUpdateAt()
		gbc.mutation.SetUpdateAt(v)
	}
	if _, ok := gbc.mutation.DeleteAt(); !ok {
		v := goodbenefit.DefaultDeleteAt()
		gbc.mutation.SetDeleteAt(v)
	}
	if _, ok := gbc.mutation.ID(); !ok {
		v := goodbenefit.DefaultID()
		gbc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gbc *GoodBenefitCreate) check() error {
	if _, ok := gbc.mutation.GoodID(); !ok {
		return &ValidationError{Name: "good_id", err: errors.New(`ent: missing required field "GoodBenefit.good_id"`)}
	}
	if _, ok := gbc.mutation.BenefitAccountID(); !ok {
		return &ValidationError{Name: "benefit_account_id", err: errors.New(`ent: missing required field "GoodBenefit.benefit_account_id"`)}
	}
	if _, ok := gbc.mutation.PlatformOfflineAccountID(); !ok {
		return &ValidationError{Name: "platform_offline_account_id", err: errors.New(`ent: missing required field "GoodBenefit.platform_offline_account_id"`)}
	}
	if _, ok := gbc.mutation.UserOnlineAccountID(); !ok {
		return &ValidationError{Name: "user_online_account_id", err: errors.New(`ent: missing required field "GoodBenefit.user_online_account_id"`)}
	}
	if _, ok := gbc.mutation.UserOfflineAccountID(); !ok {
		return &ValidationError{Name: "user_offline_account_id", err: errors.New(`ent: missing required field "GoodBenefit.user_offline_account_id"`)}
	}
	if _, ok := gbc.mutation.BenefitIntervalHours(); !ok {
		return &ValidationError{Name: "benefit_interval_hours", err: errors.New(`ent: missing required field "GoodBenefit.benefit_interval_hours"`)}
	}
	if _, ok := gbc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "GoodBenefit.create_at"`)}
	}
	if _, ok := gbc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "GoodBenefit.update_at"`)}
	}
	if _, ok := gbc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "GoodBenefit.delete_at"`)}
	}
	return nil
}

func (gbc *GoodBenefitCreate) sqlSave(ctx context.Context) (*GoodBenefit, error) {
	_node, _spec := gbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (gbc *GoodBenefitCreate) createSpec() (*GoodBenefit, *sqlgraph.CreateSpec) {
	var (
		_node = &GoodBenefit{config: gbc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: goodbenefit.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodbenefit.FieldID,
			},
		}
	)
	_spec.OnConflict = gbc.conflict
	if id, ok := gbc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := gbc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodbenefit.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := gbc.mutation.BenefitAccountID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodbenefit.FieldBenefitAccountID,
		})
		_node.BenefitAccountID = value
	}
	if value, ok := gbc.mutation.PlatformOfflineAccountID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodbenefit.FieldPlatformOfflineAccountID,
		})
		_node.PlatformOfflineAccountID = value
	}
	if value, ok := gbc.mutation.UserOnlineAccountID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodbenefit.FieldUserOnlineAccountID,
		})
		_node.UserOnlineAccountID = value
	}
	if value, ok := gbc.mutation.UserOfflineAccountID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodbenefit.FieldUserOfflineAccountID,
		})
		_node.UserOfflineAccountID = value
	}
	if value, ok := gbc.mutation.BenefitIntervalHours(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: goodbenefit.FieldBenefitIntervalHours,
		})
		_node.BenefitIntervalHours = value
	}
	if value, ok := gbc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := gbc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := gbc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodBenefit.Create().
//		SetGoodID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodBenefitUpsert) {
//			SetGoodID(v+v).
//		}).
//		Exec(ctx)
//
func (gbc *GoodBenefitCreate) OnConflict(opts ...sql.ConflictOption) *GoodBenefitUpsertOne {
	gbc.conflict = opts
	return &GoodBenefitUpsertOne{
		create: gbc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodBenefit.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gbc *GoodBenefitCreate) OnConflictColumns(columns ...string) *GoodBenefitUpsertOne {
	gbc.conflict = append(gbc.conflict, sql.ConflictColumns(columns...))
	return &GoodBenefitUpsertOne{
		create: gbc,
	}
}

type (
	// GoodBenefitUpsertOne is the builder for "upsert"-ing
	//  one GoodBenefit node.
	GoodBenefitUpsertOne struct {
		create *GoodBenefitCreate
	}

	// GoodBenefitUpsert is the "OnConflict" setter.
	GoodBenefitUpsert struct {
		*sql.UpdateSet
	}
)

// SetGoodID sets the "good_id" field.
func (u *GoodBenefitUpsert) SetGoodID(v uuid.UUID) *GoodBenefitUpsert {
	u.Set(goodbenefit.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodBenefitUpsert) UpdateGoodID() *GoodBenefitUpsert {
	u.SetExcluded(goodbenefit.FieldGoodID)
	return u
}

// SetBenefitAccountID sets the "benefit_account_id" field.
func (u *GoodBenefitUpsert) SetBenefitAccountID(v uuid.UUID) *GoodBenefitUpsert {
	u.Set(goodbenefit.FieldBenefitAccountID, v)
	return u
}

// UpdateBenefitAccountID sets the "benefit_account_id" field to the value that was provided on create.
func (u *GoodBenefitUpsert) UpdateBenefitAccountID() *GoodBenefitUpsert {
	u.SetExcluded(goodbenefit.FieldBenefitAccountID)
	return u
}

// SetPlatformOfflineAccountID sets the "platform_offline_account_id" field.
func (u *GoodBenefitUpsert) SetPlatformOfflineAccountID(v uuid.UUID) *GoodBenefitUpsert {
	u.Set(goodbenefit.FieldPlatformOfflineAccountID, v)
	return u
}

// UpdatePlatformOfflineAccountID sets the "platform_offline_account_id" field to the value that was provided on create.
func (u *GoodBenefitUpsert) UpdatePlatformOfflineAccountID() *GoodBenefitUpsert {
	u.SetExcluded(goodbenefit.FieldPlatformOfflineAccountID)
	return u
}

// SetUserOnlineAccountID sets the "user_online_account_id" field.
func (u *GoodBenefitUpsert) SetUserOnlineAccountID(v uuid.UUID) *GoodBenefitUpsert {
	u.Set(goodbenefit.FieldUserOnlineAccountID, v)
	return u
}

// UpdateUserOnlineAccountID sets the "user_online_account_id" field to the value that was provided on create.
func (u *GoodBenefitUpsert) UpdateUserOnlineAccountID() *GoodBenefitUpsert {
	u.SetExcluded(goodbenefit.FieldUserOnlineAccountID)
	return u
}

// SetUserOfflineAccountID sets the "user_offline_account_id" field.
func (u *GoodBenefitUpsert) SetUserOfflineAccountID(v uuid.UUID) *GoodBenefitUpsert {
	u.Set(goodbenefit.FieldUserOfflineAccountID, v)
	return u
}

// UpdateUserOfflineAccountID sets the "user_offline_account_id" field to the value that was provided on create.
func (u *GoodBenefitUpsert) UpdateUserOfflineAccountID() *GoodBenefitUpsert {
	u.SetExcluded(goodbenefit.FieldUserOfflineAccountID)
	return u
}

// SetBenefitIntervalHours sets the "benefit_interval_hours" field.
func (u *GoodBenefitUpsert) SetBenefitIntervalHours(v int32) *GoodBenefitUpsert {
	u.Set(goodbenefit.FieldBenefitIntervalHours, v)
	return u
}

// UpdateBenefitIntervalHours sets the "benefit_interval_hours" field to the value that was provided on create.
func (u *GoodBenefitUpsert) UpdateBenefitIntervalHours() *GoodBenefitUpsert {
	u.SetExcluded(goodbenefit.FieldBenefitIntervalHours)
	return u
}

// AddBenefitIntervalHours adds v to the "benefit_interval_hours" field.
func (u *GoodBenefitUpsert) AddBenefitIntervalHours(v int32) *GoodBenefitUpsert {
	u.Add(goodbenefit.FieldBenefitIntervalHours, v)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *GoodBenefitUpsert) SetCreateAt(v uint32) *GoodBenefitUpsert {
	u.Set(goodbenefit.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *GoodBenefitUpsert) UpdateCreateAt() *GoodBenefitUpsert {
	u.SetExcluded(goodbenefit.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *GoodBenefitUpsert) AddCreateAt(v uint32) *GoodBenefitUpsert {
	u.Add(goodbenefit.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *GoodBenefitUpsert) SetUpdateAt(v uint32) *GoodBenefitUpsert {
	u.Set(goodbenefit.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *GoodBenefitUpsert) UpdateUpdateAt() *GoodBenefitUpsert {
	u.SetExcluded(goodbenefit.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *GoodBenefitUpsert) AddUpdateAt(v uint32) *GoodBenefitUpsert {
	u.Add(goodbenefit.FieldUpdateAt, v)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *GoodBenefitUpsert) SetDeleteAt(v uint32) *GoodBenefitUpsert {
	u.Set(goodbenefit.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *GoodBenefitUpsert) UpdateDeleteAt() *GoodBenefitUpsert {
	u.SetExcluded(goodbenefit.FieldDeleteAt)
	return u
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *GoodBenefitUpsert) AddDeleteAt(v uint32) *GoodBenefitUpsert {
	u.Add(goodbenefit.FieldDeleteAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GoodBenefit.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodbenefit.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodBenefitUpsertOne) UpdateNewValues() *GoodBenefitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(goodbenefit.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.GoodBenefit.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *GoodBenefitUpsertOne) Ignore() *GoodBenefitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodBenefitUpsertOne) DoNothing() *GoodBenefitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodBenefitCreate.OnConflict
// documentation for more info.
func (u *GoodBenefitUpsertOne) Update(set func(*GoodBenefitUpsert)) *GoodBenefitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodBenefitUpsert{UpdateSet: update})
	}))
	return u
}

// SetGoodID sets the "good_id" field.
func (u *GoodBenefitUpsertOne) SetGoodID(v uuid.UUID) *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodBenefitUpsertOne) UpdateGoodID() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateGoodID()
	})
}

// SetBenefitAccountID sets the "benefit_account_id" field.
func (u *GoodBenefitUpsertOne) SetBenefitAccountID(v uuid.UUID) *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetBenefitAccountID(v)
	})
}

// UpdateBenefitAccountID sets the "benefit_account_id" field to the value that was provided on create.
func (u *GoodBenefitUpsertOne) UpdateBenefitAccountID() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateBenefitAccountID()
	})
}

// SetPlatformOfflineAccountID sets the "platform_offline_account_id" field.
func (u *GoodBenefitUpsertOne) SetPlatformOfflineAccountID(v uuid.UUID) *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetPlatformOfflineAccountID(v)
	})
}

// UpdatePlatformOfflineAccountID sets the "platform_offline_account_id" field to the value that was provided on create.
func (u *GoodBenefitUpsertOne) UpdatePlatformOfflineAccountID() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdatePlatformOfflineAccountID()
	})
}

// SetUserOnlineAccountID sets the "user_online_account_id" field.
func (u *GoodBenefitUpsertOne) SetUserOnlineAccountID(v uuid.UUID) *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetUserOnlineAccountID(v)
	})
}

// UpdateUserOnlineAccountID sets the "user_online_account_id" field to the value that was provided on create.
func (u *GoodBenefitUpsertOne) UpdateUserOnlineAccountID() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateUserOnlineAccountID()
	})
}

// SetUserOfflineAccountID sets the "user_offline_account_id" field.
func (u *GoodBenefitUpsertOne) SetUserOfflineAccountID(v uuid.UUID) *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetUserOfflineAccountID(v)
	})
}

// UpdateUserOfflineAccountID sets the "user_offline_account_id" field to the value that was provided on create.
func (u *GoodBenefitUpsertOne) UpdateUserOfflineAccountID() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateUserOfflineAccountID()
	})
}

// SetBenefitIntervalHours sets the "benefit_interval_hours" field.
func (u *GoodBenefitUpsertOne) SetBenefitIntervalHours(v int32) *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetBenefitIntervalHours(v)
	})
}

// AddBenefitIntervalHours adds v to the "benefit_interval_hours" field.
func (u *GoodBenefitUpsertOne) AddBenefitIntervalHours(v int32) *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.AddBenefitIntervalHours(v)
	})
}

// UpdateBenefitIntervalHours sets the "benefit_interval_hours" field to the value that was provided on create.
func (u *GoodBenefitUpsertOne) UpdateBenefitIntervalHours() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateBenefitIntervalHours()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *GoodBenefitUpsertOne) SetCreateAt(v uint32) *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *GoodBenefitUpsertOne) AddCreateAt(v uint32) *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *GoodBenefitUpsertOne) UpdateCreateAt() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *GoodBenefitUpsertOne) SetUpdateAt(v uint32) *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *GoodBenefitUpsertOne) AddUpdateAt(v uint32) *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *GoodBenefitUpsertOne) UpdateUpdateAt() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *GoodBenefitUpsertOne) SetDeleteAt(v uint32) *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *GoodBenefitUpsertOne) AddDeleteAt(v uint32) *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *GoodBenefitUpsertOne) UpdateDeleteAt() *GoodBenefitUpsertOne {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *GoodBenefitUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoodBenefitCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodBenefitUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GoodBenefitUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: GoodBenefitUpsertOne.ID is not supported by MySQL driver. Use GoodBenefitUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GoodBenefitUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GoodBenefitCreateBulk is the builder for creating many GoodBenefit entities in bulk.
type GoodBenefitCreateBulk struct {
	config
	builders []*GoodBenefitCreate
	conflict []sql.ConflictOption
}

// Save creates the GoodBenefit entities in the database.
func (gbcb *GoodBenefitCreateBulk) Save(ctx context.Context) ([]*GoodBenefit, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gbcb.builders))
	nodes := make([]*GoodBenefit, len(gbcb.builders))
	mutators := make([]Mutator, len(gbcb.builders))
	for i := range gbcb.builders {
		func(i int, root context.Context) {
			builder := gbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoodBenefitMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gbcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gbcb *GoodBenefitCreateBulk) SaveX(ctx context.Context) []*GoodBenefit {
	v, err := gbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gbcb *GoodBenefitCreateBulk) Exec(ctx context.Context) error {
	_, err := gbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gbcb *GoodBenefitCreateBulk) ExecX(ctx context.Context) {
	if err := gbcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodBenefit.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodBenefitUpsert) {
//			SetGoodID(v+v).
//		}).
//		Exec(ctx)
//
func (gbcb *GoodBenefitCreateBulk) OnConflict(opts ...sql.ConflictOption) *GoodBenefitUpsertBulk {
	gbcb.conflict = opts
	return &GoodBenefitUpsertBulk{
		create: gbcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodBenefit.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gbcb *GoodBenefitCreateBulk) OnConflictColumns(columns ...string) *GoodBenefitUpsertBulk {
	gbcb.conflict = append(gbcb.conflict, sql.ConflictColumns(columns...))
	return &GoodBenefitUpsertBulk{
		create: gbcb,
	}
}

// GoodBenefitUpsertBulk is the builder for "upsert"-ing
// a bulk of GoodBenefit nodes.
type GoodBenefitUpsertBulk struct {
	create *GoodBenefitCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GoodBenefit.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodbenefit.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodBenefitUpsertBulk) UpdateNewValues() *GoodBenefitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(goodbenefit.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GoodBenefit.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *GoodBenefitUpsertBulk) Ignore() *GoodBenefitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodBenefitUpsertBulk) DoNothing() *GoodBenefitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodBenefitCreateBulk.OnConflict
// documentation for more info.
func (u *GoodBenefitUpsertBulk) Update(set func(*GoodBenefitUpsert)) *GoodBenefitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodBenefitUpsert{UpdateSet: update})
	}))
	return u
}

// SetGoodID sets the "good_id" field.
func (u *GoodBenefitUpsertBulk) SetGoodID(v uuid.UUID) *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodBenefitUpsertBulk) UpdateGoodID() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateGoodID()
	})
}

// SetBenefitAccountID sets the "benefit_account_id" field.
func (u *GoodBenefitUpsertBulk) SetBenefitAccountID(v uuid.UUID) *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetBenefitAccountID(v)
	})
}

// UpdateBenefitAccountID sets the "benefit_account_id" field to the value that was provided on create.
func (u *GoodBenefitUpsertBulk) UpdateBenefitAccountID() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateBenefitAccountID()
	})
}

// SetPlatformOfflineAccountID sets the "platform_offline_account_id" field.
func (u *GoodBenefitUpsertBulk) SetPlatformOfflineAccountID(v uuid.UUID) *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetPlatformOfflineAccountID(v)
	})
}

// UpdatePlatformOfflineAccountID sets the "platform_offline_account_id" field to the value that was provided on create.
func (u *GoodBenefitUpsertBulk) UpdatePlatformOfflineAccountID() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdatePlatformOfflineAccountID()
	})
}

// SetUserOnlineAccountID sets the "user_online_account_id" field.
func (u *GoodBenefitUpsertBulk) SetUserOnlineAccountID(v uuid.UUID) *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetUserOnlineAccountID(v)
	})
}

// UpdateUserOnlineAccountID sets the "user_online_account_id" field to the value that was provided on create.
func (u *GoodBenefitUpsertBulk) UpdateUserOnlineAccountID() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateUserOnlineAccountID()
	})
}

// SetUserOfflineAccountID sets the "user_offline_account_id" field.
func (u *GoodBenefitUpsertBulk) SetUserOfflineAccountID(v uuid.UUID) *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetUserOfflineAccountID(v)
	})
}

// UpdateUserOfflineAccountID sets the "user_offline_account_id" field to the value that was provided on create.
func (u *GoodBenefitUpsertBulk) UpdateUserOfflineAccountID() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateUserOfflineAccountID()
	})
}

// SetBenefitIntervalHours sets the "benefit_interval_hours" field.
func (u *GoodBenefitUpsertBulk) SetBenefitIntervalHours(v int32) *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetBenefitIntervalHours(v)
	})
}

// AddBenefitIntervalHours adds v to the "benefit_interval_hours" field.
func (u *GoodBenefitUpsertBulk) AddBenefitIntervalHours(v int32) *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.AddBenefitIntervalHours(v)
	})
}

// UpdateBenefitIntervalHours sets the "benefit_interval_hours" field to the value that was provided on create.
func (u *GoodBenefitUpsertBulk) UpdateBenefitIntervalHours() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateBenefitIntervalHours()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *GoodBenefitUpsertBulk) SetCreateAt(v uint32) *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *GoodBenefitUpsertBulk) AddCreateAt(v uint32) *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *GoodBenefitUpsertBulk) UpdateCreateAt() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *GoodBenefitUpsertBulk) SetUpdateAt(v uint32) *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *GoodBenefitUpsertBulk) AddUpdateAt(v uint32) *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *GoodBenefitUpsertBulk) UpdateUpdateAt() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *GoodBenefitUpsertBulk) SetDeleteAt(v uint32) *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *GoodBenefitUpsertBulk) AddDeleteAt(v uint32) *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *GoodBenefitUpsertBulk) UpdateDeleteAt() *GoodBenefitUpsertBulk {
	return u.Update(func(s *GoodBenefitUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *GoodBenefitUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GoodBenefitCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoodBenefitCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodBenefitUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
