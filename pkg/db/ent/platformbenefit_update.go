// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/platformbenefit"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// PlatformBenefitUpdate is the builder for updating PlatformBenefit entities.
type PlatformBenefitUpdate struct {
	config
	hooks    []Hook
	mutation *PlatformBenefitMutation
}

// Where appends a list predicates to the PlatformBenefitUpdate builder.
func (pbu *PlatformBenefitUpdate) Where(ps ...predicate.PlatformBenefit) *PlatformBenefitUpdate {
	pbu.mutation.Where(ps...)
	return pbu
}

// SetGoodID sets the "good_id" field.
func (pbu *PlatformBenefitUpdate) SetGoodID(u uuid.UUID) *PlatformBenefitUpdate {
	pbu.mutation.SetGoodID(u)
	return pbu
}

// SetBenefitAccountID sets the "benefit_account_id" field.
func (pbu *PlatformBenefitUpdate) SetBenefitAccountID(u uuid.UUID) *PlatformBenefitUpdate {
	pbu.mutation.SetBenefitAccountID(u)
	return pbu
}

// SetAmount sets the "amount" field.
func (pbu *PlatformBenefitUpdate) SetAmount(u uint64) *PlatformBenefitUpdate {
	pbu.mutation.ResetAmount()
	pbu.mutation.SetAmount(u)
	return pbu
}

// AddAmount adds u to the "amount" field.
func (pbu *PlatformBenefitUpdate) AddAmount(u int64) *PlatformBenefitUpdate {
	pbu.mutation.AddAmount(u)
	return pbu
}

// SetLastBenefitTimestamp sets the "last_benefit_timestamp" field.
func (pbu *PlatformBenefitUpdate) SetLastBenefitTimestamp(u uint32) *PlatformBenefitUpdate {
	pbu.mutation.ResetLastBenefitTimestamp()
	pbu.mutation.SetLastBenefitTimestamp(u)
	return pbu
}

// AddLastBenefitTimestamp adds u to the "last_benefit_timestamp" field.
func (pbu *PlatformBenefitUpdate) AddLastBenefitTimestamp(u int32) *PlatformBenefitUpdate {
	pbu.mutation.AddLastBenefitTimestamp(u)
	return pbu
}

// SetChainTransactionID sets the "chain_transaction_id" field.
func (pbu *PlatformBenefitUpdate) SetChainTransactionID(s string) *PlatformBenefitUpdate {
	pbu.mutation.SetChainTransactionID(s)
	return pbu
}

// SetPlatformTransactionID sets the "platform_transaction_id" field.
func (pbu *PlatformBenefitUpdate) SetPlatformTransactionID(u uuid.UUID) *PlatformBenefitUpdate {
	pbu.mutation.SetPlatformTransactionID(u)
	return pbu
}

// SetCreateAt sets the "create_at" field.
func (pbu *PlatformBenefitUpdate) SetCreateAt(u uint32) *PlatformBenefitUpdate {
	pbu.mutation.ResetCreateAt()
	pbu.mutation.SetCreateAt(u)
	return pbu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (pbu *PlatformBenefitUpdate) SetNillableCreateAt(u *uint32) *PlatformBenefitUpdate {
	if u != nil {
		pbu.SetCreateAt(*u)
	}
	return pbu
}

// AddCreateAt adds u to the "create_at" field.
func (pbu *PlatformBenefitUpdate) AddCreateAt(u int32) *PlatformBenefitUpdate {
	pbu.mutation.AddCreateAt(u)
	return pbu
}

// SetUpdateAt sets the "update_at" field.
func (pbu *PlatformBenefitUpdate) SetUpdateAt(u uint32) *PlatformBenefitUpdate {
	pbu.mutation.ResetUpdateAt()
	pbu.mutation.SetUpdateAt(u)
	return pbu
}

// AddUpdateAt adds u to the "update_at" field.
func (pbu *PlatformBenefitUpdate) AddUpdateAt(u int32) *PlatformBenefitUpdate {
	pbu.mutation.AddUpdateAt(u)
	return pbu
}

// SetDeleteAt sets the "delete_at" field.
func (pbu *PlatformBenefitUpdate) SetDeleteAt(u uint32) *PlatformBenefitUpdate {
	pbu.mutation.ResetDeleteAt()
	pbu.mutation.SetDeleteAt(u)
	return pbu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (pbu *PlatformBenefitUpdate) SetNillableDeleteAt(u *uint32) *PlatformBenefitUpdate {
	if u != nil {
		pbu.SetDeleteAt(*u)
	}
	return pbu
}

// AddDeleteAt adds u to the "delete_at" field.
func (pbu *PlatformBenefitUpdate) AddDeleteAt(u int32) *PlatformBenefitUpdate {
	pbu.mutation.AddDeleteAt(u)
	return pbu
}

// Mutation returns the PlatformBenefitMutation object of the builder.
func (pbu *PlatformBenefitUpdate) Mutation() *PlatformBenefitMutation {
	return pbu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pbu *PlatformBenefitUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pbu.defaults()
	if len(pbu.hooks) == 0 {
		affected, err = pbu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlatformBenefitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pbu.mutation = mutation
			affected, err = pbu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pbu.hooks) - 1; i >= 0; i-- {
			if pbu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pbu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pbu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pbu *PlatformBenefitUpdate) SaveX(ctx context.Context) int {
	affected, err := pbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pbu *PlatformBenefitUpdate) Exec(ctx context.Context) error {
	_, err := pbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pbu *PlatformBenefitUpdate) ExecX(ctx context.Context) {
	if err := pbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pbu *PlatformBenefitUpdate) defaults() {
	if _, ok := pbu.mutation.UpdateAt(); !ok {
		v := platformbenefit.UpdateDefaultUpdateAt()
		pbu.mutation.SetUpdateAt(v)
	}
}

func (pbu *PlatformBenefitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   platformbenefit.Table,
			Columns: platformbenefit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: platformbenefit.FieldID,
			},
		},
	}
	if ps := pbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pbu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: platformbenefit.FieldGoodID,
		})
	}
	if value, ok := pbu.mutation.BenefitAccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: platformbenefit.FieldBenefitAccountID,
		})
	}
	if value, ok := pbu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: platformbenefit.FieldAmount,
		})
	}
	if value, ok := pbu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: platformbenefit.FieldAmount,
		})
	}
	if value, ok := pbu.mutation.LastBenefitTimestamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: platformbenefit.FieldLastBenefitTimestamp,
		})
	}
	if value, ok := pbu.mutation.AddedLastBenefitTimestamp(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: platformbenefit.FieldLastBenefitTimestamp,
		})
	}
	if value, ok := pbu.mutation.ChainTransactionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: platformbenefit.FieldChainTransactionID,
		})
	}
	if value, ok := pbu.mutation.PlatformTransactionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: platformbenefit.FieldPlatformTransactionID,
		})
	}
	if value, ok := pbu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: platformbenefit.FieldCreateAt,
		})
	}
	if value, ok := pbu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: platformbenefit.FieldCreateAt,
		})
	}
	if value, ok := pbu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: platformbenefit.FieldUpdateAt,
		})
	}
	if value, ok := pbu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: platformbenefit.FieldUpdateAt,
		})
	}
	if value, ok := pbu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: platformbenefit.FieldDeleteAt,
		})
	}
	if value, ok := pbu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: platformbenefit.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{platformbenefit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PlatformBenefitUpdateOne is the builder for updating a single PlatformBenefit entity.
type PlatformBenefitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlatformBenefitMutation
}

// SetGoodID sets the "good_id" field.
func (pbuo *PlatformBenefitUpdateOne) SetGoodID(u uuid.UUID) *PlatformBenefitUpdateOne {
	pbuo.mutation.SetGoodID(u)
	return pbuo
}

// SetBenefitAccountID sets the "benefit_account_id" field.
func (pbuo *PlatformBenefitUpdateOne) SetBenefitAccountID(u uuid.UUID) *PlatformBenefitUpdateOne {
	pbuo.mutation.SetBenefitAccountID(u)
	return pbuo
}

// SetAmount sets the "amount" field.
func (pbuo *PlatformBenefitUpdateOne) SetAmount(u uint64) *PlatformBenefitUpdateOne {
	pbuo.mutation.ResetAmount()
	pbuo.mutation.SetAmount(u)
	return pbuo
}

// AddAmount adds u to the "amount" field.
func (pbuo *PlatformBenefitUpdateOne) AddAmount(u int64) *PlatformBenefitUpdateOne {
	pbuo.mutation.AddAmount(u)
	return pbuo
}

// SetLastBenefitTimestamp sets the "last_benefit_timestamp" field.
func (pbuo *PlatformBenefitUpdateOne) SetLastBenefitTimestamp(u uint32) *PlatformBenefitUpdateOne {
	pbuo.mutation.ResetLastBenefitTimestamp()
	pbuo.mutation.SetLastBenefitTimestamp(u)
	return pbuo
}

// AddLastBenefitTimestamp adds u to the "last_benefit_timestamp" field.
func (pbuo *PlatformBenefitUpdateOne) AddLastBenefitTimestamp(u int32) *PlatformBenefitUpdateOne {
	pbuo.mutation.AddLastBenefitTimestamp(u)
	return pbuo
}

// SetChainTransactionID sets the "chain_transaction_id" field.
func (pbuo *PlatformBenefitUpdateOne) SetChainTransactionID(s string) *PlatformBenefitUpdateOne {
	pbuo.mutation.SetChainTransactionID(s)
	return pbuo
}

// SetPlatformTransactionID sets the "platform_transaction_id" field.
func (pbuo *PlatformBenefitUpdateOne) SetPlatformTransactionID(u uuid.UUID) *PlatformBenefitUpdateOne {
	pbuo.mutation.SetPlatformTransactionID(u)
	return pbuo
}

// SetCreateAt sets the "create_at" field.
func (pbuo *PlatformBenefitUpdateOne) SetCreateAt(u uint32) *PlatformBenefitUpdateOne {
	pbuo.mutation.ResetCreateAt()
	pbuo.mutation.SetCreateAt(u)
	return pbuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (pbuo *PlatformBenefitUpdateOne) SetNillableCreateAt(u *uint32) *PlatformBenefitUpdateOne {
	if u != nil {
		pbuo.SetCreateAt(*u)
	}
	return pbuo
}

// AddCreateAt adds u to the "create_at" field.
func (pbuo *PlatformBenefitUpdateOne) AddCreateAt(u int32) *PlatformBenefitUpdateOne {
	pbuo.mutation.AddCreateAt(u)
	return pbuo
}

// SetUpdateAt sets the "update_at" field.
func (pbuo *PlatformBenefitUpdateOne) SetUpdateAt(u uint32) *PlatformBenefitUpdateOne {
	pbuo.mutation.ResetUpdateAt()
	pbuo.mutation.SetUpdateAt(u)
	return pbuo
}

// AddUpdateAt adds u to the "update_at" field.
func (pbuo *PlatformBenefitUpdateOne) AddUpdateAt(u int32) *PlatformBenefitUpdateOne {
	pbuo.mutation.AddUpdateAt(u)
	return pbuo
}

// SetDeleteAt sets the "delete_at" field.
func (pbuo *PlatformBenefitUpdateOne) SetDeleteAt(u uint32) *PlatformBenefitUpdateOne {
	pbuo.mutation.ResetDeleteAt()
	pbuo.mutation.SetDeleteAt(u)
	return pbuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (pbuo *PlatformBenefitUpdateOne) SetNillableDeleteAt(u *uint32) *PlatformBenefitUpdateOne {
	if u != nil {
		pbuo.SetDeleteAt(*u)
	}
	return pbuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (pbuo *PlatformBenefitUpdateOne) AddDeleteAt(u int32) *PlatformBenefitUpdateOne {
	pbuo.mutation.AddDeleteAt(u)
	return pbuo
}

// Mutation returns the PlatformBenefitMutation object of the builder.
func (pbuo *PlatformBenefitUpdateOne) Mutation() *PlatformBenefitMutation {
	return pbuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pbuo *PlatformBenefitUpdateOne) Select(field string, fields ...string) *PlatformBenefitUpdateOne {
	pbuo.fields = append([]string{field}, fields...)
	return pbuo
}

// Save executes the query and returns the updated PlatformBenefit entity.
func (pbuo *PlatformBenefitUpdateOne) Save(ctx context.Context) (*PlatformBenefit, error) {
	var (
		err  error
		node *PlatformBenefit
	)
	pbuo.defaults()
	if len(pbuo.hooks) == 0 {
		node, err = pbuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlatformBenefitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pbuo.mutation = mutation
			node, err = pbuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pbuo.hooks) - 1; i >= 0; i-- {
			if pbuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pbuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pbuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pbuo *PlatformBenefitUpdateOne) SaveX(ctx context.Context) *PlatformBenefit {
	node, err := pbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pbuo *PlatformBenefitUpdateOne) Exec(ctx context.Context) error {
	_, err := pbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pbuo *PlatformBenefitUpdateOne) ExecX(ctx context.Context) {
	if err := pbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pbuo *PlatformBenefitUpdateOne) defaults() {
	if _, ok := pbuo.mutation.UpdateAt(); !ok {
		v := platformbenefit.UpdateDefaultUpdateAt()
		pbuo.mutation.SetUpdateAt(v)
	}
}

func (pbuo *PlatformBenefitUpdateOne) sqlSave(ctx context.Context) (_node *PlatformBenefit, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   platformbenefit.Table,
			Columns: platformbenefit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: platformbenefit.FieldID,
			},
		},
	}
	id, ok := pbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PlatformBenefit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, platformbenefit.FieldID)
		for _, f := range fields {
			if !platformbenefit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != platformbenefit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pbuo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: platformbenefit.FieldGoodID,
		})
	}
	if value, ok := pbuo.mutation.BenefitAccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: platformbenefit.FieldBenefitAccountID,
		})
	}
	if value, ok := pbuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: platformbenefit.FieldAmount,
		})
	}
	if value, ok := pbuo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: platformbenefit.FieldAmount,
		})
	}
	if value, ok := pbuo.mutation.LastBenefitTimestamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: platformbenefit.FieldLastBenefitTimestamp,
		})
	}
	if value, ok := pbuo.mutation.AddedLastBenefitTimestamp(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: platformbenefit.FieldLastBenefitTimestamp,
		})
	}
	if value, ok := pbuo.mutation.ChainTransactionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: platformbenefit.FieldChainTransactionID,
		})
	}
	if value, ok := pbuo.mutation.PlatformTransactionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: platformbenefit.FieldPlatformTransactionID,
		})
	}
	if value, ok := pbuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: platformbenefit.FieldCreateAt,
		})
	}
	if value, ok := pbuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: platformbenefit.FieldCreateAt,
		})
	}
	if value, ok := pbuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: platformbenefit.FieldUpdateAt,
		})
	}
	if value, ok := pbuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: platformbenefit.FieldUpdateAt,
		})
	}
	if value, ok := pbuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: platformbenefit.FieldDeleteAt,
		})
	}
	if value, ok := pbuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: platformbenefit.FieldDeleteAt,
		})
	}
	_node = &PlatformBenefit{config: pbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{platformbenefit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
