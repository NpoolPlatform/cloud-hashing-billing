// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/userwithdraw"
	"github.com/google/uuid"
)

// UserWithdrawCreate is the builder for creating a UserWithdraw entity.
type UserWithdrawCreate struct {
	config
	mutation *UserWithdrawMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAppID sets the "app_id" field.
func (uwc *UserWithdrawCreate) SetAppID(u uuid.UUID) *UserWithdrawCreate {
	uwc.mutation.SetAppID(u)
	return uwc
}

// SetUserID sets the "user_id" field.
func (uwc *UserWithdrawCreate) SetUserID(u uuid.UUID) *UserWithdrawCreate {
	uwc.mutation.SetUserID(u)
	return uwc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (uwc *UserWithdrawCreate) SetCoinTypeID(u uuid.UUID) *UserWithdrawCreate {
	uwc.mutation.SetCoinTypeID(u)
	return uwc
}

// SetAccountID sets the "account_id" field.
func (uwc *UserWithdrawCreate) SetAccountID(u uuid.UUID) *UserWithdrawCreate {
	uwc.mutation.SetAccountID(u)
	return uwc
}

// SetName sets the "name" field.
func (uwc *UserWithdrawCreate) SetName(s string) *UserWithdrawCreate {
	uwc.mutation.SetName(s)
	return uwc
}

// SetMessage sets the "message" field.
func (uwc *UserWithdrawCreate) SetMessage(s string) *UserWithdrawCreate {
	uwc.mutation.SetMessage(s)
	return uwc
}

// SetCreateAt sets the "create_at" field.
func (uwc *UserWithdrawCreate) SetCreateAt(u uint32) *UserWithdrawCreate {
	uwc.mutation.SetCreateAt(u)
	return uwc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uwc *UserWithdrawCreate) SetNillableCreateAt(u *uint32) *UserWithdrawCreate {
	if u != nil {
		uwc.SetCreateAt(*u)
	}
	return uwc
}

// SetUpdateAt sets the "update_at" field.
func (uwc *UserWithdrawCreate) SetUpdateAt(u uint32) *UserWithdrawCreate {
	uwc.mutation.SetUpdateAt(u)
	return uwc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uwc *UserWithdrawCreate) SetNillableUpdateAt(u *uint32) *UserWithdrawCreate {
	if u != nil {
		uwc.SetUpdateAt(*u)
	}
	return uwc
}

// SetDeleteAt sets the "delete_at" field.
func (uwc *UserWithdrawCreate) SetDeleteAt(u uint32) *UserWithdrawCreate {
	uwc.mutation.SetDeleteAt(u)
	return uwc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (uwc *UserWithdrawCreate) SetNillableDeleteAt(u *uint32) *UserWithdrawCreate {
	if u != nil {
		uwc.SetDeleteAt(*u)
	}
	return uwc
}

// SetID sets the "id" field.
func (uwc *UserWithdrawCreate) SetID(u uuid.UUID) *UserWithdrawCreate {
	uwc.mutation.SetID(u)
	return uwc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uwc *UserWithdrawCreate) SetNillableID(u *uuid.UUID) *UserWithdrawCreate {
	if u != nil {
		uwc.SetID(*u)
	}
	return uwc
}

// Mutation returns the UserWithdrawMutation object of the builder.
func (uwc *UserWithdrawCreate) Mutation() *UserWithdrawMutation {
	return uwc.mutation
}

// Save creates the UserWithdraw in the database.
func (uwc *UserWithdrawCreate) Save(ctx context.Context) (*UserWithdraw, error) {
	var (
		err  error
		node *UserWithdraw
	)
	uwc.defaults()
	if len(uwc.hooks) == 0 {
		if err = uwc.check(); err != nil {
			return nil, err
		}
		node, err = uwc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserWithdrawMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uwc.check(); err != nil {
				return nil, err
			}
			uwc.mutation = mutation
			if node, err = uwc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(uwc.hooks) - 1; i >= 0; i-- {
			if uwc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uwc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uwc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uwc *UserWithdrawCreate) SaveX(ctx context.Context) *UserWithdraw {
	v, err := uwc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uwc *UserWithdrawCreate) Exec(ctx context.Context) error {
	_, err := uwc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uwc *UserWithdrawCreate) ExecX(ctx context.Context) {
	if err := uwc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uwc *UserWithdrawCreate) defaults() {
	if _, ok := uwc.mutation.CreateAt(); !ok {
		v := userwithdraw.DefaultCreateAt()
		uwc.mutation.SetCreateAt(v)
	}
	if _, ok := uwc.mutation.UpdateAt(); !ok {
		v := userwithdraw.DefaultUpdateAt()
		uwc.mutation.SetUpdateAt(v)
	}
	if _, ok := uwc.mutation.DeleteAt(); !ok {
		v := userwithdraw.DefaultDeleteAt()
		uwc.mutation.SetDeleteAt(v)
	}
	if _, ok := uwc.mutation.ID(); !ok {
		v := userwithdraw.DefaultID()
		uwc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uwc *UserWithdrawCreate) check() error {
	if _, ok := uwc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "UserWithdraw.app_id"`)}
	}
	if _, ok := uwc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserWithdraw.user_id"`)}
	}
	if _, ok := uwc.mutation.CoinTypeID(); !ok {
		return &ValidationError{Name: "coin_type_id", err: errors.New(`ent: missing required field "UserWithdraw.coin_type_id"`)}
	}
	if _, ok := uwc.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account_id", err: errors.New(`ent: missing required field "UserWithdraw.account_id"`)}
	}
	if _, ok := uwc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "UserWithdraw.name"`)}
	}
	if _, ok := uwc.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required field "UserWithdraw.message"`)}
	}
	if _, ok := uwc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "UserWithdraw.create_at"`)}
	}
	if _, ok := uwc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "UserWithdraw.update_at"`)}
	}
	if _, ok := uwc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "UserWithdraw.delete_at"`)}
	}
	return nil
}

func (uwc *UserWithdrawCreate) sqlSave(ctx context.Context) (*UserWithdraw, error) {
	_node, _spec := uwc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uwc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (uwc *UserWithdrawCreate) createSpec() (*UserWithdraw, *sqlgraph.CreateSpec) {
	var (
		_node = &UserWithdraw{config: uwc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userwithdraw.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userwithdraw.FieldID,
			},
		}
	)
	_spec.OnConflict = uwc.conflict
	if id, ok := uwc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := uwc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userwithdraw.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := uwc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userwithdraw.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := uwc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userwithdraw.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := uwc.mutation.AccountID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userwithdraw.FieldAccountID,
		})
		_node.AccountID = value
	}
	if value, ok := uwc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwithdraw.FieldName,
		})
		_node.Name = value
	}
	if value, ok := uwc.mutation.Message(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userwithdraw.FieldMessage,
		})
		_node.Message = value
	}
	if value, ok := uwc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userwithdraw.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := uwc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userwithdraw.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := uwc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userwithdraw.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserWithdraw.Create().
//		SetAppID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserWithdrawUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (uwc *UserWithdrawCreate) OnConflict(opts ...sql.ConflictOption) *UserWithdrawUpsertOne {
	uwc.conflict = opts
	return &UserWithdrawUpsertOne{
		create: uwc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserWithdraw.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (uwc *UserWithdrawCreate) OnConflictColumns(columns ...string) *UserWithdrawUpsertOne {
	uwc.conflict = append(uwc.conflict, sql.ConflictColumns(columns...))
	return &UserWithdrawUpsertOne{
		create: uwc,
	}
}

type (
	// UserWithdrawUpsertOne is the builder for "upsert"-ing
	//  one UserWithdraw node.
	UserWithdrawUpsertOne struct {
		create *UserWithdrawCreate
	}

	// UserWithdrawUpsert is the "OnConflict" setter.
	UserWithdrawUpsert struct {
		*sql.UpdateSet
	}
)

// SetAppID sets the "app_id" field.
func (u *UserWithdrawUpsert) SetAppID(v uuid.UUID) *UserWithdrawUpsert {
	u.Set(userwithdraw.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *UserWithdrawUpsert) UpdateAppID() *UserWithdrawUpsert {
	u.SetExcluded(userwithdraw.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserWithdrawUpsert) SetUserID(v uuid.UUID) *UserWithdrawUpsert {
	u.Set(userwithdraw.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserWithdrawUpsert) UpdateUserID() *UserWithdrawUpsert {
	u.SetExcluded(userwithdraw.FieldUserID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *UserWithdrawUpsert) SetCoinTypeID(v uuid.UUID) *UserWithdrawUpsert {
	u.Set(userwithdraw.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *UserWithdrawUpsert) UpdateCoinTypeID() *UserWithdrawUpsert {
	u.SetExcluded(userwithdraw.FieldCoinTypeID)
	return u
}

// SetAccountID sets the "account_id" field.
func (u *UserWithdrawUpsert) SetAccountID(v uuid.UUID) *UserWithdrawUpsert {
	u.Set(userwithdraw.FieldAccountID, v)
	return u
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *UserWithdrawUpsert) UpdateAccountID() *UserWithdrawUpsert {
	u.SetExcluded(userwithdraw.FieldAccountID)
	return u
}

// SetName sets the "name" field.
func (u *UserWithdrawUpsert) SetName(v string) *UserWithdrawUpsert {
	u.Set(userwithdraw.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserWithdrawUpsert) UpdateName() *UserWithdrawUpsert {
	u.SetExcluded(userwithdraw.FieldName)
	return u
}

// SetMessage sets the "message" field.
func (u *UserWithdrawUpsert) SetMessage(v string) *UserWithdrawUpsert {
	u.Set(userwithdraw.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *UserWithdrawUpsert) UpdateMessage() *UserWithdrawUpsert {
	u.SetExcluded(userwithdraw.FieldMessage)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *UserWithdrawUpsert) SetCreateAt(v uint32) *UserWithdrawUpsert {
	u.Set(userwithdraw.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *UserWithdrawUpsert) UpdateCreateAt() *UserWithdrawUpsert {
	u.SetExcluded(userwithdraw.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *UserWithdrawUpsert) AddCreateAt(v uint32) *UserWithdrawUpsert {
	u.Add(userwithdraw.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *UserWithdrawUpsert) SetUpdateAt(v uint32) *UserWithdrawUpsert {
	u.Set(userwithdraw.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *UserWithdrawUpsert) UpdateUpdateAt() *UserWithdrawUpsert {
	u.SetExcluded(userwithdraw.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *UserWithdrawUpsert) AddUpdateAt(v uint32) *UserWithdrawUpsert {
	u.Add(userwithdraw.FieldUpdateAt, v)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *UserWithdrawUpsert) SetDeleteAt(v uint32) *UserWithdrawUpsert {
	u.Set(userwithdraw.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *UserWithdrawUpsert) UpdateDeleteAt() *UserWithdrawUpsert {
	u.SetExcluded(userwithdraw.FieldDeleteAt)
	return u
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *UserWithdrawUpsert) AddDeleteAt(v uint32) *UserWithdrawUpsert {
	u.Add(userwithdraw.FieldDeleteAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserWithdraw.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userwithdraw.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *UserWithdrawUpsertOne) UpdateNewValues() *UserWithdrawUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(userwithdraw.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.UserWithdraw.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *UserWithdrawUpsertOne) Ignore() *UserWithdrawUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserWithdrawUpsertOne) DoNothing() *UserWithdrawUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserWithdrawCreate.OnConflict
// documentation for more info.
func (u *UserWithdrawUpsertOne) Update(set func(*UserWithdrawUpsert)) *UserWithdrawUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserWithdrawUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *UserWithdrawUpsertOne) SetAppID(v uuid.UUID) *UserWithdrawUpsertOne {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *UserWithdrawUpsertOne) UpdateAppID() *UserWithdrawUpsertOne {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.UpdateAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserWithdrawUpsertOne) SetUserID(v uuid.UUID) *UserWithdrawUpsertOne {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserWithdrawUpsertOne) UpdateUserID() *UserWithdrawUpsertOne {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.UpdateUserID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *UserWithdrawUpsertOne) SetCoinTypeID(v uuid.UUID) *UserWithdrawUpsertOne {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *UserWithdrawUpsertOne) UpdateCoinTypeID() *UserWithdrawUpsertOne {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.UpdateCoinTypeID()
	})
}

// SetAccountID sets the "account_id" field.
func (u *UserWithdrawUpsertOne) SetAccountID(v uuid.UUID) *UserWithdrawUpsertOne {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *UserWithdrawUpsertOne) UpdateAccountID() *UserWithdrawUpsertOne {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.UpdateAccountID()
	})
}

// SetName sets the "name" field.
func (u *UserWithdrawUpsertOne) SetName(v string) *UserWithdrawUpsertOne {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserWithdrawUpsertOne) UpdateName() *UserWithdrawUpsertOne {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.UpdateName()
	})
}

// SetMessage sets the "message" field.
func (u *UserWithdrawUpsertOne) SetMessage(v string) *UserWithdrawUpsertOne {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *UserWithdrawUpsertOne) UpdateMessage() *UserWithdrawUpsertOne {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.UpdateMessage()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *UserWithdrawUpsertOne) SetCreateAt(v uint32) *UserWithdrawUpsertOne {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *UserWithdrawUpsertOne) AddCreateAt(v uint32) *UserWithdrawUpsertOne {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *UserWithdrawUpsertOne) UpdateCreateAt() *UserWithdrawUpsertOne {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *UserWithdrawUpsertOne) SetUpdateAt(v uint32) *UserWithdrawUpsertOne {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *UserWithdrawUpsertOne) AddUpdateAt(v uint32) *UserWithdrawUpsertOne {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *UserWithdrawUpsertOne) UpdateUpdateAt() *UserWithdrawUpsertOne {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *UserWithdrawUpsertOne) SetDeleteAt(v uint32) *UserWithdrawUpsertOne {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *UserWithdrawUpsertOne) AddDeleteAt(v uint32) *UserWithdrawUpsertOne {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *UserWithdrawUpsertOne) UpdateDeleteAt() *UserWithdrawUpsertOne {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *UserWithdrawUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserWithdrawCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserWithdrawUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserWithdrawUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: UserWithdrawUpsertOne.ID is not supported by MySQL driver. Use UserWithdrawUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserWithdrawUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserWithdrawCreateBulk is the builder for creating many UserWithdraw entities in bulk.
type UserWithdrawCreateBulk struct {
	config
	builders []*UserWithdrawCreate
	conflict []sql.ConflictOption
}

// Save creates the UserWithdraw entities in the database.
func (uwcb *UserWithdrawCreateBulk) Save(ctx context.Context) ([]*UserWithdraw, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uwcb.builders))
	nodes := make([]*UserWithdraw, len(uwcb.builders))
	mutators := make([]Mutator, len(uwcb.builders))
	for i := range uwcb.builders {
		func(i int, root context.Context) {
			builder := uwcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserWithdrawMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uwcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = uwcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uwcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uwcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uwcb *UserWithdrawCreateBulk) SaveX(ctx context.Context) []*UserWithdraw {
	v, err := uwcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uwcb *UserWithdrawCreateBulk) Exec(ctx context.Context) error {
	_, err := uwcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uwcb *UserWithdrawCreateBulk) ExecX(ctx context.Context) {
	if err := uwcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserWithdraw.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserWithdrawUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (uwcb *UserWithdrawCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserWithdrawUpsertBulk {
	uwcb.conflict = opts
	return &UserWithdrawUpsertBulk{
		create: uwcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserWithdraw.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (uwcb *UserWithdrawCreateBulk) OnConflictColumns(columns ...string) *UserWithdrawUpsertBulk {
	uwcb.conflict = append(uwcb.conflict, sql.ConflictColumns(columns...))
	return &UserWithdrawUpsertBulk{
		create: uwcb,
	}
}

// UserWithdrawUpsertBulk is the builder for "upsert"-ing
// a bulk of UserWithdraw nodes.
type UserWithdrawUpsertBulk struct {
	create *UserWithdrawCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserWithdraw.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userwithdraw.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *UserWithdrawUpsertBulk) UpdateNewValues() *UserWithdrawUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(userwithdraw.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserWithdraw.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *UserWithdrawUpsertBulk) Ignore() *UserWithdrawUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserWithdrawUpsertBulk) DoNothing() *UserWithdrawUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserWithdrawCreateBulk.OnConflict
// documentation for more info.
func (u *UserWithdrawUpsertBulk) Update(set func(*UserWithdrawUpsert)) *UserWithdrawUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserWithdrawUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *UserWithdrawUpsertBulk) SetAppID(v uuid.UUID) *UserWithdrawUpsertBulk {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *UserWithdrawUpsertBulk) UpdateAppID() *UserWithdrawUpsertBulk {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.UpdateAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserWithdrawUpsertBulk) SetUserID(v uuid.UUID) *UserWithdrawUpsertBulk {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserWithdrawUpsertBulk) UpdateUserID() *UserWithdrawUpsertBulk {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.UpdateUserID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *UserWithdrawUpsertBulk) SetCoinTypeID(v uuid.UUID) *UserWithdrawUpsertBulk {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *UserWithdrawUpsertBulk) UpdateCoinTypeID() *UserWithdrawUpsertBulk {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.UpdateCoinTypeID()
	})
}

// SetAccountID sets the "account_id" field.
func (u *UserWithdrawUpsertBulk) SetAccountID(v uuid.UUID) *UserWithdrawUpsertBulk {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *UserWithdrawUpsertBulk) UpdateAccountID() *UserWithdrawUpsertBulk {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.UpdateAccountID()
	})
}

// SetName sets the "name" field.
func (u *UserWithdrawUpsertBulk) SetName(v string) *UserWithdrawUpsertBulk {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserWithdrawUpsertBulk) UpdateName() *UserWithdrawUpsertBulk {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.UpdateName()
	})
}

// SetMessage sets the "message" field.
func (u *UserWithdrawUpsertBulk) SetMessage(v string) *UserWithdrawUpsertBulk {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *UserWithdrawUpsertBulk) UpdateMessage() *UserWithdrawUpsertBulk {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.UpdateMessage()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *UserWithdrawUpsertBulk) SetCreateAt(v uint32) *UserWithdrawUpsertBulk {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *UserWithdrawUpsertBulk) AddCreateAt(v uint32) *UserWithdrawUpsertBulk {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *UserWithdrawUpsertBulk) UpdateCreateAt() *UserWithdrawUpsertBulk {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *UserWithdrawUpsertBulk) SetUpdateAt(v uint32) *UserWithdrawUpsertBulk {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *UserWithdrawUpsertBulk) AddUpdateAt(v uint32) *UserWithdrawUpsertBulk {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *UserWithdrawUpsertBulk) UpdateUpdateAt() *UserWithdrawUpsertBulk {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *UserWithdrawUpsertBulk) SetDeleteAt(v uint32) *UserWithdrawUpsertBulk {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *UserWithdrawUpsertBulk) AddDeleteAt(v uint32) *UserWithdrawUpsertBulk {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *UserWithdrawUpsertBulk) UpdateDeleteAt() *UserWithdrawUpsertBulk {
	return u.Update(func(s *UserWithdrawUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *UserWithdrawUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserWithdrawCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserWithdrawCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserWithdrawUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
