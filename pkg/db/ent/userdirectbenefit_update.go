// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/userdirectbenefit"
	"github.com/google/uuid"
)

// UserDirectBenefitUpdate is the builder for updating UserDirectBenefit entities.
type UserDirectBenefitUpdate struct {
	config
	hooks    []Hook
	mutation *UserDirectBenefitMutation
}

// Where appends a list predicates to the UserDirectBenefitUpdate builder.
func (udbu *UserDirectBenefitUpdate) Where(ps ...predicate.UserDirectBenefit) *UserDirectBenefitUpdate {
	udbu.mutation.Where(ps...)
	return udbu
}

// SetAppID sets the "app_id" field.
func (udbu *UserDirectBenefitUpdate) SetAppID(u uuid.UUID) *UserDirectBenefitUpdate {
	udbu.mutation.SetAppID(u)
	return udbu
}

// SetUserID sets the "user_id" field.
func (udbu *UserDirectBenefitUpdate) SetUserID(u uuid.UUID) *UserDirectBenefitUpdate {
	udbu.mutation.SetUserID(u)
	return udbu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (udbu *UserDirectBenefitUpdate) SetCoinTypeID(u uuid.UUID) *UserDirectBenefitUpdate {
	udbu.mutation.SetCoinTypeID(u)
	return udbu
}

// SetAccountID sets the "account_id" field.
func (udbu *UserDirectBenefitUpdate) SetAccountID(u uuid.UUID) *UserDirectBenefitUpdate {
	udbu.mutation.SetAccountID(u)
	return udbu
}

// SetCreateAt sets the "create_at" field.
func (udbu *UserDirectBenefitUpdate) SetCreateAt(u uint32) *UserDirectBenefitUpdate {
	udbu.mutation.ResetCreateAt()
	udbu.mutation.SetCreateAt(u)
	return udbu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (udbu *UserDirectBenefitUpdate) SetNillableCreateAt(u *uint32) *UserDirectBenefitUpdate {
	if u != nil {
		udbu.SetCreateAt(*u)
	}
	return udbu
}

// AddCreateAt adds u to the "create_at" field.
func (udbu *UserDirectBenefitUpdate) AddCreateAt(u int32) *UserDirectBenefitUpdate {
	udbu.mutation.AddCreateAt(u)
	return udbu
}

// SetUpdateAt sets the "update_at" field.
func (udbu *UserDirectBenefitUpdate) SetUpdateAt(u uint32) *UserDirectBenefitUpdate {
	udbu.mutation.ResetUpdateAt()
	udbu.mutation.SetUpdateAt(u)
	return udbu
}

// AddUpdateAt adds u to the "update_at" field.
func (udbu *UserDirectBenefitUpdate) AddUpdateAt(u int32) *UserDirectBenefitUpdate {
	udbu.mutation.AddUpdateAt(u)
	return udbu
}

// SetDeleteAt sets the "delete_at" field.
func (udbu *UserDirectBenefitUpdate) SetDeleteAt(u uint32) *UserDirectBenefitUpdate {
	udbu.mutation.ResetDeleteAt()
	udbu.mutation.SetDeleteAt(u)
	return udbu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (udbu *UserDirectBenefitUpdate) SetNillableDeleteAt(u *uint32) *UserDirectBenefitUpdate {
	if u != nil {
		udbu.SetDeleteAt(*u)
	}
	return udbu
}

// AddDeleteAt adds u to the "delete_at" field.
func (udbu *UserDirectBenefitUpdate) AddDeleteAt(u int32) *UserDirectBenefitUpdate {
	udbu.mutation.AddDeleteAt(u)
	return udbu
}

// Mutation returns the UserDirectBenefitMutation object of the builder.
func (udbu *UserDirectBenefitUpdate) Mutation() *UserDirectBenefitMutation {
	return udbu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (udbu *UserDirectBenefitUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	udbu.defaults()
	if len(udbu.hooks) == 0 {
		affected, err = udbu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserDirectBenefitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			udbu.mutation = mutation
			affected, err = udbu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(udbu.hooks) - 1; i >= 0; i-- {
			if udbu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = udbu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, udbu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (udbu *UserDirectBenefitUpdate) SaveX(ctx context.Context) int {
	affected, err := udbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (udbu *UserDirectBenefitUpdate) Exec(ctx context.Context) error {
	_, err := udbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udbu *UserDirectBenefitUpdate) ExecX(ctx context.Context) {
	if err := udbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (udbu *UserDirectBenefitUpdate) defaults() {
	if _, ok := udbu.mutation.UpdateAt(); !ok {
		v := userdirectbenefit.UpdateDefaultUpdateAt()
		udbu.mutation.SetUpdateAt(v)
	}
}

func (udbu *UserDirectBenefitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userdirectbenefit.Table,
			Columns: userdirectbenefit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userdirectbenefit.FieldID,
			},
		},
	}
	if ps := udbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := udbu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userdirectbenefit.FieldAppID,
		})
	}
	if value, ok := udbu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userdirectbenefit.FieldUserID,
		})
	}
	if value, ok := udbu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userdirectbenefit.FieldCoinTypeID,
		})
	}
	if value, ok := udbu.mutation.AccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userdirectbenefit.FieldAccountID,
		})
	}
	if value, ok := udbu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userdirectbenefit.FieldCreateAt,
		})
	}
	if value, ok := udbu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userdirectbenefit.FieldCreateAt,
		})
	}
	if value, ok := udbu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userdirectbenefit.FieldUpdateAt,
		})
	}
	if value, ok := udbu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userdirectbenefit.FieldUpdateAt,
		})
	}
	if value, ok := udbu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userdirectbenefit.FieldDeleteAt,
		})
	}
	if value, ok := udbu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userdirectbenefit.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, udbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userdirectbenefit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// UserDirectBenefitUpdateOne is the builder for updating a single UserDirectBenefit entity.
type UserDirectBenefitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserDirectBenefitMutation
}

// SetAppID sets the "app_id" field.
func (udbuo *UserDirectBenefitUpdateOne) SetAppID(u uuid.UUID) *UserDirectBenefitUpdateOne {
	udbuo.mutation.SetAppID(u)
	return udbuo
}

// SetUserID sets the "user_id" field.
func (udbuo *UserDirectBenefitUpdateOne) SetUserID(u uuid.UUID) *UserDirectBenefitUpdateOne {
	udbuo.mutation.SetUserID(u)
	return udbuo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (udbuo *UserDirectBenefitUpdateOne) SetCoinTypeID(u uuid.UUID) *UserDirectBenefitUpdateOne {
	udbuo.mutation.SetCoinTypeID(u)
	return udbuo
}

// SetAccountID sets the "account_id" field.
func (udbuo *UserDirectBenefitUpdateOne) SetAccountID(u uuid.UUID) *UserDirectBenefitUpdateOne {
	udbuo.mutation.SetAccountID(u)
	return udbuo
}

// SetCreateAt sets the "create_at" field.
func (udbuo *UserDirectBenefitUpdateOne) SetCreateAt(u uint32) *UserDirectBenefitUpdateOne {
	udbuo.mutation.ResetCreateAt()
	udbuo.mutation.SetCreateAt(u)
	return udbuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (udbuo *UserDirectBenefitUpdateOne) SetNillableCreateAt(u *uint32) *UserDirectBenefitUpdateOne {
	if u != nil {
		udbuo.SetCreateAt(*u)
	}
	return udbuo
}

// AddCreateAt adds u to the "create_at" field.
func (udbuo *UserDirectBenefitUpdateOne) AddCreateAt(u int32) *UserDirectBenefitUpdateOne {
	udbuo.mutation.AddCreateAt(u)
	return udbuo
}

// SetUpdateAt sets the "update_at" field.
func (udbuo *UserDirectBenefitUpdateOne) SetUpdateAt(u uint32) *UserDirectBenefitUpdateOne {
	udbuo.mutation.ResetUpdateAt()
	udbuo.mutation.SetUpdateAt(u)
	return udbuo
}

// AddUpdateAt adds u to the "update_at" field.
func (udbuo *UserDirectBenefitUpdateOne) AddUpdateAt(u int32) *UserDirectBenefitUpdateOne {
	udbuo.mutation.AddUpdateAt(u)
	return udbuo
}

// SetDeleteAt sets the "delete_at" field.
func (udbuo *UserDirectBenefitUpdateOne) SetDeleteAt(u uint32) *UserDirectBenefitUpdateOne {
	udbuo.mutation.ResetDeleteAt()
	udbuo.mutation.SetDeleteAt(u)
	return udbuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (udbuo *UserDirectBenefitUpdateOne) SetNillableDeleteAt(u *uint32) *UserDirectBenefitUpdateOne {
	if u != nil {
		udbuo.SetDeleteAt(*u)
	}
	return udbuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (udbuo *UserDirectBenefitUpdateOne) AddDeleteAt(u int32) *UserDirectBenefitUpdateOne {
	udbuo.mutation.AddDeleteAt(u)
	return udbuo
}

// Mutation returns the UserDirectBenefitMutation object of the builder.
func (udbuo *UserDirectBenefitUpdateOne) Mutation() *UserDirectBenefitMutation {
	return udbuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (udbuo *UserDirectBenefitUpdateOne) Select(field string, fields ...string) *UserDirectBenefitUpdateOne {
	udbuo.fields = append([]string{field}, fields...)
	return udbuo
}

// Save executes the query and returns the updated UserDirectBenefit entity.
func (udbuo *UserDirectBenefitUpdateOne) Save(ctx context.Context) (*UserDirectBenefit, error) {
	var (
		err  error
		node *UserDirectBenefit
	)
	udbuo.defaults()
	if len(udbuo.hooks) == 0 {
		node, err = udbuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserDirectBenefitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			udbuo.mutation = mutation
			node, err = udbuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(udbuo.hooks) - 1; i >= 0; i-- {
			if udbuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = udbuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, udbuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UserDirectBenefit)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserDirectBenefitMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (udbuo *UserDirectBenefitUpdateOne) SaveX(ctx context.Context) *UserDirectBenefit {
	node, err := udbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (udbuo *UserDirectBenefitUpdateOne) Exec(ctx context.Context) error {
	_, err := udbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udbuo *UserDirectBenefitUpdateOne) ExecX(ctx context.Context) {
	if err := udbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (udbuo *UserDirectBenefitUpdateOne) defaults() {
	if _, ok := udbuo.mutation.UpdateAt(); !ok {
		v := userdirectbenefit.UpdateDefaultUpdateAt()
		udbuo.mutation.SetUpdateAt(v)
	}
}

func (udbuo *UserDirectBenefitUpdateOne) sqlSave(ctx context.Context) (_node *UserDirectBenefit, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userdirectbenefit.Table,
			Columns: userdirectbenefit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userdirectbenefit.FieldID,
			},
		},
	}
	id, ok := udbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserDirectBenefit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := udbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userdirectbenefit.FieldID)
		for _, f := range fields {
			if !userdirectbenefit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userdirectbenefit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := udbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := udbuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userdirectbenefit.FieldAppID,
		})
	}
	if value, ok := udbuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userdirectbenefit.FieldUserID,
		})
	}
	if value, ok := udbuo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userdirectbenefit.FieldCoinTypeID,
		})
	}
	if value, ok := udbuo.mutation.AccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userdirectbenefit.FieldAccountID,
		})
	}
	if value, ok := udbuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userdirectbenefit.FieldCreateAt,
		})
	}
	if value, ok := udbuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userdirectbenefit.FieldCreateAt,
		})
	}
	if value, ok := udbuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userdirectbenefit.FieldUpdateAt,
		})
	}
	if value, ok := udbuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userdirectbenefit.FieldUpdateAt,
		})
	}
	if value, ok := udbuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userdirectbenefit.FieldDeleteAt,
		})
	}
	if value, ok := udbuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userdirectbenefit.FieldDeleteAt,
		})
	}
	_node = &UserDirectBenefit{config: udbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, udbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userdirectbenefit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
