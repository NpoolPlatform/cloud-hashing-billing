// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/coinaccounttransaction"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// CoinAccountTransactionUpdate is the builder for updating CoinAccountTransaction entities.
type CoinAccountTransactionUpdate struct {
	config
	hooks    []Hook
	mutation *CoinAccountTransactionMutation
}

// Where appends a list predicates to the CoinAccountTransactionUpdate builder.
func (catu *CoinAccountTransactionUpdate) Where(ps ...predicate.CoinAccountTransaction) *CoinAccountTransactionUpdate {
	catu.mutation.Where(ps...)
	return catu
}

// SetAppID sets the "app_id" field.
func (catu *CoinAccountTransactionUpdate) SetAppID(u uuid.UUID) *CoinAccountTransactionUpdate {
	catu.mutation.SetAppID(u)
	return catu
}

// SetUserID sets the "user_id" field.
func (catu *CoinAccountTransactionUpdate) SetUserID(u uuid.UUID) *CoinAccountTransactionUpdate {
	catu.mutation.SetUserID(u)
	return catu
}

// SetFromAddressID sets the "from_address_id" field.
func (catu *CoinAccountTransactionUpdate) SetFromAddressID(u uuid.UUID) *CoinAccountTransactionUpdate {
	catu.mutation.SetFromAddressID(u)
	return catu
}

// SetToAddressID sets the "to_address_id" field.
func (catu *CoinAccountTransactionUpdate) SetToAddressID(u uuid.UUID) *CoinAccountTransactionUpdate {
	catu.mutation.SetToAddressID(u)
	return catu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (catu *CoinAccountTransactionUpdate) SetCoinTypeID(u uuid.UUID) *CoinAccountTransactionUpdate {
	catu.mutation.SetCoinTypeID(u)
	return catu
}

// SetAmount sets the "amount" field.
func (catu *CoinAccountTransactionUpdate) SetAmount(u uint64) *CoinAccountTransactionUpdate {
	catu.mutation.ResetAmount()
	catu.mutation.SetAmount(u)
	return catu
}

// AddAmount adds u to the "amount" field.
func (catu *CoinAccountTransactionUpdate) AddAmount(u int64) *CoinAccountTransactionUpdate {
	catu.mutation.AddAmount(u)
	return catu
}

// SetMessage sets the "message" field.
func (catu *CoinAccountTransactionUpdate) SetMessage(s string) *CoinAccountTransactionUpdate {
	catu.mutation.SetMessage(s)
	return catu
}

// SetState sets the "state" field.
func (catu *CoinAccountTransactionUpdate) SetState(c coinaccounttransaction.State) *CoinAccountTransactionUpdate {
	catu.mutation.SetState(c)
	return catu
}

// SetChainTransactionID sets the "chain_transaction_id" field.
func (catu *CoinAccountTransactionUpdate) SetChainTransactionID(s string) *CoinAccountTransactionUpdate {
	catu.mutation.SetChainTransactionID(s)
	return catu
}

// SetPlatformTransactionID sets the "platform_transaction_id" field.
func (catu *CoinAccountTransactionUpdate) SetPlatformTransactionID(u uuid.UUID) *CoinAccountTransactionUpdate {
	catu.mutation.SetPlatformTransactionID(u)
	return catu
}

// SetCreateAt sets the "create_at" field.
func (catu *CoinAccountTransactionUpdate) SetCreateAt(u uint32) *CoinAccountTransactionUpdate {
	catu.mutation.ResetCreateAt()
	catu.mutation.SetCreateAt(u)
	return catu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (catu *CoinAccountTransactionUpdate) SetNillableCreateAt(u *uint32) *CoinAccountTransactionUpdate {
	if u != nil {
		catu.SetCreateAt(*u)
	}
	return catu
}

// AddCreateAt adds u to the "create_at" field.
func (catu *CoinAccountTransactionUpdate) AddCreateAt(u int32) *CoinAccountTransactionUpdate {
	catu.mutation.AddCreateAt(u)
	return catu
}

// SetUpdateAt sets the "update_at" field.
func (catu *CoinAccountTransactionUpdate) SetUpdateAt(u uint32) *CoinAccountTransactionUpdate {
	catu.mutation.ResetUpdateAt()
	catu.mutation.SetUpdateAt(u)
	return catu
}

// AddUpdateAt adds u to the "update_at" field.
func (catu *CoinAccountTransactionUpdate) AddUpdateAt(u int32) *CoinAccountTransactionUpdate {
	catu.mutation.AddUpdateAt(u)
	return catu
}

// SetDeleteAt sets the "delete_at" field.
func (catu *CoinAccountTransactionUpdate) SetDeleteAt(u uint32) *CoinAccountTransactionUpdate {
	catu.mutation.ResetDeleteAt()
	catu.mutation.SetDeleteAt(u)
	return catu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (catu *CoinAccountTransactionUpdate) SetNillableDeleteAt(u *uint32) *CoinAccountTransactionUpdate {
	if u != nil {
		catu.SetDeleteAt(*u)
	}
	return catu
}

// AddDeleteAt adds u to the "delete_at" field.
func (catu *CoinAccountTransactionUpdate) AddDeleteAt(u int32) *CoinAccountTransactionUpdate {
	catu.mutation.AddDeleteAt(u)
	return catu
}

// Mutation returns the CoinAccountTransactionMutation object of the builder.
func (catu *CoinAccountTransactionUpdate) Mutation() *CoinAccountTransactionMutation {
	return catu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (catu *CoinAccountTransactionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	catu.defaults()
	if len(catu.hooks) == 0 {
		if err = catu.check(); err != nil {
			return 0, err
		}
		affected, err = catu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CoinAccountTransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = catu.check(); err != nil {
				return 0, err
			}
			catu.mutation = mutation
			affected, err = catu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(catu.hooks) - 1; i >= 0; i-- {
			if catu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = catu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, catu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (catu *CoinAccountTransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := catu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (catu *CoinAccountTransactionUpdate) Exec(ctx context.Context) error {
	_, err := catu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (catu *CoinAccountTransactionUpdate) ExecX(ctx context.Context) {
	if err := catu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (catu *CoinAccountTransactionUpdate) defaults() {
	if _, ok := catu.mutation.UpdateAt(); !ok {
		v := coinaccounttransaction.UpdateDefaultUpdateAt()
		catu.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (catu *CoinAccountTransactionUpdate) check() error {
	if v, ok := catu.mutation.State(); ok {
		if err := coinaccounttransaction.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "CoinAccountTransaction.state": %w`, err)}
		}
	}
	return nil
}

func (catu *CoinAccountTransactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   coinaccounttransaction.Table,
			Columns: coinaccounttransaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: coinaccounttransaction.FieldID,
			},
		},
	}
	if ps := catu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := catu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinaccounttransaction.FieldAppID,
		})
	}
	if value, ok := catu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinaccounttransaction.FieldUserID,
		})
	}
	if value, ok := catu.mutation.FromAddressID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinaccounttransaction.FieldFromAddressID,
		})
	}
	if value, ok := catu.mutation.ToAddressID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinaccounttransaction.FieldToAddressID,
		})
	}
	if value, ok := catu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinaccounttransaction.FieldCoinTypeID,
		})
	}
	if value, ok := catu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: coinaccounttransaction.FieldAmount,
		})
	}
	if value, ok := catu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: coinaccounttransaction.FieldAmount,
		})
	}
	if value, ok := catu.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coinaccounttransaction.FieldMessage,
		})
	}
	if value, ok := catu.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: coinaccounttransaction.FieldState,
		})
	}
	if value, ok := catu.mutation.ChainTransactionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coinaccounttransaction.FieldChainTransactionID,
		})
	}
	if value, ok := catu.mutation.PlatformTransactionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinaccounttransaction.FieldPlatformTransactionID,
		})
	}
	if value, ok := catu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinaccounttransaction.FieldCreateAt,
		})
	}
	if value, ok := catu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinaccounttransaction.FieldCreateAt,
		})
	}
	if value, ok := catu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinaccounttransaction.FieldUpdateAt,
		})
	}
	if value, ok := catu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinaccounttransaction.FieldUpdateAt,
		})
	}
	if value, ok := catu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinaccounttransaction.FieldDeleteAt,
		})
	}
	if value, ok := catu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinaccounttransaction.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, catu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coinaccounttransaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CoinAccountTransactionUpdateOne is the builder for updating a single CoinAccountTransaction entity.
type CoinAccountTransactionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CoinAccountTransactionMutation
}

// SetAppID sets the "app_id" field.
func (catuo *CoinAccountTransactionUpdateOne) SetAppID(u uuid.UUID) *CoinAccountTransactionUpdateOne {
	catuo.mutation.SetAppID(u)
	return catuo
}

// SetUserID sets the "user_id" field.
func (catuo *CoinAccountTransactionUpdateOne) SetUserID(u uuid.UUID) *CoinAccountTransactionUpdateOne {
	catuo.mutation.SetUserID(u)
	return catuo
}

// SetFromAddressID sets the "from_address_id" field.
func (catuo *CoinAccountTransactionUpdateOne) SetFromAddressID(u uuid.UUID) *CoinAccountTransactionUpdateOne {
	catuo.mutation.SetFromAddressID(u)
	return catuo
}

// SetToAddressID sets the "to_address_id" field.
func (catuo *CoinAccountTransactionUpdateOne) SetToAddressID(u uuid.UUID) *CoinAccountTransactionUpdateOne {
	catuo.mutation.SetToAddressID(u)
	return catuo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (catuo *CoinAccountTransactionUpdateOne) SetCoinTypeID(u uuid.UUID) *CoinAccountTransactionUpdateOne {
	catuo.mutation.SetCoinTypeID(u)
	return catuo
}

// SetAmount sets the "amount" field.
func (catuo *CoinAccountTransactionUpdateOne) SetAmount(u uint64) *CoinAccountTransactionUpdateOne {
	catuo.mutation.ResetAmount()
	catuo.mutation.SetAmount(u)
	return catuo
}

// AddAmount adds u to the "amount" field.
func (catuo *CoinAccountTransactionUpdateOne) AddAmount(u int64) *CoinAccountTransactionUpdateOne {
	catuo.mutation.AddAmount(u)
	return catuo
}

// SetMessage sets the "message" field.
func (catuo *CoinAccountTransactionUpdateOne) SetMessage(s string) *CoinAccountTransactionUpdateOne {
	catuo.mutation.SetMessage(s)
	return catuo
}

// SetState sets the "state" field.
func (catuo *CoinAccountTransactionUpdateOne) SetState(c coinaccounttransaction.State) *CoinAccountTransactionUpdateOne {
	catuo.mutation.SetState(c)
	return catuo
}

// SetChainTransactionID sets the "chain_transaction_id" field.
func (catuo *CoinAccountTransactionUpdateOne) SetChainTransactionID(s string) *CoinAccountTransactionUpdateOne {
	catuo.mutation.SetChainTransactionID(s)
	return catuo
}

// SetPlatformTransactionID sets the "platform_transaction_id" field.
func (catuo *CoinAccountTransactionUpdateOne) SetPlatformTransactionID(u uuid.UUID) *CoinAccountTransactionUpdateOne {
	catuo.mutation.SetPlatformTransactionID(u)
	return catuo
}

// SetCreateAt sets the "create_at" field.
func (catuo *CoinAccountTransactionUpdateOne) SetCreateAt(u uint32) *CoinAccountTransactionUpdateOne {
	catuo.mutation.ResetCreateAt()
	catuo.mutation.SetCreateAt(u)
	return catuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (catuo *CoinAccountTransactionUpdateOne) SetNillableCreateAt(u *uint32) *CoinAccountTransactionUpdateOne {
	if u != nil {
		catuo.SetCreateAt(*u)
	}
	return catuo
}

// AddCreateAt adds u to the "create_at" field.
func (catuo *CoinAccountTransactionUpdateOne) AddCreateAt(u int32) *CoinAccountTransactionUpdateOne {
	catuo.mutation.AddCreateAt(u)
	return catuo
}

// SetUpdateAt sets the "update_at" field.
func (catuo *CoinAccountTransactionUpdateOne) SetUpdateAt(u uint32) *CoinAccountTransactionUpdateOne {
	catuo.mutation.ResetUpdateAt()
	catuo.mutation.SetUpdateAt(u)
	return catuo
}

// AddUpdateAt adds u to the "update_at" field.
func (catuo *CoinAccountTransactionUpdateOne) AddUpdateAt(u int32) *CoinAccountTransactionUpdateOne {
	catuo.mutation.AddUpdateAt(u)
	return catuo
}

// SetDeleteAt sets the "delete_at" field.
func (catuo *CoinAccountTransactionUpdateOne) SetDeleteAt(u uint32) *CoinAccountTransactionUpdateOne {
	catuo.mutation.ResetDeleteAt()
	catuo.mutation.SetDeleteAt(u)
	return catuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (catuo *CoinAccountTransactionUpdateOne) SetNillableDeleteAt(u *uint32) *CoinAccountTransactionUpdateOne {
	if u != nil {
		catuo.SetDeleteAt(*u)
	}
	return catuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (catuo *CoinAccountTransactionUpdateOne) AddDeleteAt(u int32) *CoinAccountTransactionUpdateOne {
	catuo.mutation.AddDeleteAt(u)
	return catuo
}

// Mutation returns the CoinAccountTransactionMutation object of the builder.
func (catuo *CoinAccountTransactionUpdateOne) Mutation() *CoinAccountTransactionMutation {
	return catuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (catuo *CoinAccountTransactionUpdateOne) Select(field string, fields ...string) *CoinAccountTransactionUpdateOne {
	catuo.fields = append([]string{field}, fields...)
	return catuo
}

// Save executes the query and returns the updated CoinAccountTransaction entity.
func (catuo *CoinAccountTransactionUpdateOne) Save(ctx context.Context) (*CoinAccountTransaction, error) {
	var (
		err  error
		node *CoinAccountTransaction
	)
	catuo.defaults()
	if len(catuo.hooks) == 0 {
		if err = catuo.check(); err != nil {
			return nil, err
		}
		node, err = catuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CoinAccountTransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = catuo.check(); err != nil {
				return nil, err
			}
			catuo.mutation = mutation
			node, err = catuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(catuo.hooks) - 1; i >= 0; i-- {
			if catuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = catuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, catuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (catuo *CoinAccountTransactionUpdateOne) SaveX(ctx context.Context) *CoinAccountTransaction {
	node, err := catuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (catuo *CoinAccountTransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := catuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (catuo *CoinAccountTransactionUpdateOne) ExecX(ctx context.Context) {
	if err := catuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (catuo *CoinAccountTransactionUpdateOne) defaults() {
	if _, ok := catuo.mutation.UpdateAt(); !ok {
		v := coinaccounttransaction.UpdateDefaultUpdateAt()
		catuo.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (catuo *CoinAccountTransactionUpdateOne) check() error {
	if v, ok := catuo.mutation.State(); ok {
		if err := coinaccounttransaction.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "CoinAccountTransaction.state": %w`, err)}
		}
	}
	return nil
}

func (catuo *CoinAccountTransactionUpdateOne) sqlSave(ctx context.Context) (_node *CoinAccountTransaction, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   coinaccounttransaction.Table,
			Columns: coinaccounttransaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: coinaccounttransaction.FieldID,
			},
		},
	}
	id, ok := catuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CoinAccountTransaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := catuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, coinaccounttransaction.FieldID)
		for _, f := range fields {
			if !coinaccounttransaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != coinaccounttransaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := catuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := catuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinaccounttransaction.FieldAppID,
		})
	}
	if value, ok := catuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinaccounttransaction.FieldUserID,
		})
	}
	if value, ok := catuo.mutation.FromAddressID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinaccounttransaction.FieldFromAddressID,
		})
	}
	if value, ok := catuo.mutation.ToAddressID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinaccounttransaction.FieldToAddressID,
		})
	}
	if value, ok := catuo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinaccounttransaction.FieldCoinTypeID,
		})
	}
	if value, ok := catuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: coinaccounttransaction.FieldAmount,
		})
	}
	if value, ok := catuo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: coinaccounttransaction.FieldAmount,
		})
	}
	if value, ok := catuo.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coinaccounttransaction.FieldMessage,
		})
	}
	if value, ok := catuo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: coinaccounttransaction.FieldState,
		})
	}
	if value, ok := catuo.mutation.ChainTransactionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coinaccounttransaction.FieldChainTransactionID,
		})
	}
	if value, ok := catuo.mutation.PlatformTransactionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinaccounttransaction.FieldPlatformTransactionID,
		})
	}
	if value, ok := catuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinaccounttransaction.FieldCreateAt,
		})
	}
	if value, ok := catuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinaccounttransaction.FieldCreateAt,
		})
	}
	if value, ok := catuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinaccounttransaction.FieldUpdateAt,
		})
	}
	if value, ok := catuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinaccounttransaction.FieldUpdateAt,
		})
	}
	if value, ok := catuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinaccounttransaction.FieldDeleteAt,
		})
	}
	if value, ok := catuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinaccounttransaction.FieldDeleteAt,
		})
	}
	_node = &CoinAccountTransaction{config: catuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, catuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coinaccounttransaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
