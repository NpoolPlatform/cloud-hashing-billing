// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/goodincoming"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// GoodIncomingUpdate is the builder for updating GoodIncoming entities.
type GoodIncomingUpdate struct {
	config
	hooks    []Hook
	mutation *GoodIncomingMutation
}

// Where appends a list predicates to the GoodIncomingUpdate builder.
func (giu *GoodIncomingUpdate) Where(ps ...predicate.GoodIncoming) *GoodIncomingUpdate {
	giu.mutation.Where(ps...)
	return giu
}

// SetGoodID sets the "good_id" field.
func (giu *GoodIncomingUpdate) SetGoodID(u uuid.UUID) *GoodIncomingUpdate {
	giu.mutation.SetGoodID(u)
	return giu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (giu *GoodIncomingUpdate) SetCoinTypeID(u uuid.UUID) *GoodIncomingUpdate {
	giu.mutation.SetCoinTypeID(u)
	return giu
}

// SetAccountID sets the "account_id" field.
func (giu *GoodIncomingUpdate) SetAccountID(u uuid.UUID) *GoodIncomingUpdate {
	giu.mutation.SetAccountID(u)
	return giu
}

// SetCreateAt sets the "create_at" field.
func (giu *GoodIncomingUpdate) SetCreateAt(u uint32) *GoodIncomingUpdate {
	giu.mutation.ResetCreateAt()
	giu.mutation.SetCreateAt(u)
	return giu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (giu *GoodIncomingUpdate) SetNillableCreateAt(u *uint32) *GoodIncomingUpdate {
	if u != nil {
		giu.SetCreateAt(*u)
	}
	return giu
}

// AddCreateAt adds u to the "create_at" field.
func (giu *GoodIncomingUpdate) AddCreateAt(u int32) *GoodIncomingUpdate {
	giu.mutation.AddCreateAt(u)
	return giu
}

// SetUpdateAt sets the "update_at" field.
func (giu *GoodIncomingUpdate) SetUpdateAt(u uint32) *GoodIncomingUpdate {
	giu.mutation.ResetUpdateAt()
	giu.mutation.SetUpdateAt(u)
	return giu
}

// AddUpdateAt adds u to the "update_at" field.
func (giu *GoodIncomingUpdate) AddUpdateAt(u int32) *GoodIncomingUpdate {
	giu.mutation.AddUpdateAt(u)
	return giu
}

// SetDeleteAt sets the "delete_at" field.
func (giu *GoodIncomingUpdate) SetDeleteAt(u uint32) *GoodIncomingUpdate {
	giu.mutation.ResetDeleteAt()
	giu.mutation.SetDeleteAt(u)
	return giu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (giu *GoodIncomingUpdate) SetNillableDeleteAt(u *uint32) *GoodIncomingUpdate {
	if u != nil {
		giu.SetDeleteAt(*u)
	}
	return giu
}

// AddDeleteAt adds u to the "delete_at" field.
func (giu *GoodIncomingUpdate) AddDeleteAt(u int32) *GoodIncomingUpdate {
	giu.mutation.AddDeleteAt(u)
	return giu
}

// Mutation returns the GoodIncomingMutation object of the builder.
func (giu *GoodIncomingUpdate) Mutation() *GoodIncomingMutation {
	return giu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (giu *GoodIncomingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	giu.defaults()
	if len(giu.hooks) == 0 {
		affected, err = giu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodIncomingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			giu.mutation = mutation
			affected, err = giu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(giu.hooks) - 1; i >= 0; i-- {
			if giu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = giu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, giu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (giu *GoodIncomingUpdate) SaveX(ctx context.Context) int {
	affected, err := giu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (giu *GoodIncomingUpdate) Exec(ctx context.Context) error {
	_, err := giu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (giu *GoodIncomingUpdate) ExecX(ctx context.Context) {
	if err := giu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (giu *GoodIncomingUpdate) defaults() {
	if _, ok := giu.mutation.UpdateAt(); !ok {
		v := goodincoming.UpdateDefaultUpdateAt()
		giu.mutation.SetUpdateAt(v)
	}
}

func (giu *GoodIncomingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodincoming.Table,
			Columns: goodincoming.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodincoming.FieldID,
			},
		},
	}
	if ps := giu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := giu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodincoming.FieldGoodID,
		})
	}
	if value, ok := giu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodincoming.FieldCoinTypeID,
		})
	}
	if value, ok := giu.mutation.AccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodincoming.FieldAccountID,
		})
	}
	if value, ok := giu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodincoming.FieldCreateAt,
		})
	}
	if value, ok := giu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodincoming.FieldCreateAt,
		})
	}
	if value, ok := giu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodincoming.FieldUpdateAt,
		})
	}
	if value, ok := giu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodincoming.FieldUpdateAt,
		})
	}
	if value, ok := giu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodincoming.FieldDeleteAt,
		})
	}
	if value, ok := giu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodincoming.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, giu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodincoming.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// GoodIncomingUpdateOne is the builder for updating a single GoodIncoming entity.
type GoodIncomingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GoodIncomingMutation
}

// SetGoodID sets the "good_id" field.
func (giuo *GoodIncomingUpdateOne) SetGoodID(u uuid.UUID) *GoodIncomingUpdateOne {
	giuo.mutation.SetGoodID(u)
	return giuo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (giuo *GoodIncomingUpdateOne) SetCoinTypeID(u uuid.UUID) *GoodIncomingUpdateOne {
	giuo.mutation.SetCoinTypeID(u)
	return giuo
}

// SetAccountID sets the "account_id" field.
func (giuo *GoodIncomingUpdateOne) SetAccountID(u uuid.UUID) *GoodIncomingUpdateOne {
	giuo.mutation.SetAccountID(u)
	return giuo
}

// SetCreateAt sets the "create_at" field.
func (giuo *GoodIncomingUpdateOne) SetCreateAt(u uint32) *GoodIncomingUpdateOne {
	giuo.mutation.ResetCreateAt()
	giuo.mutation.SetCreateAt(u)
	return giuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (giuo *GoodIncomingUpdateOne) SetNillableCreateAt(u *uint32) *GoodIncomingUpdateOne {
	if u != nil {
		giuo.SetCreateAt(*u)
	}
	return giuo
}

// AddCreateAt adds u to the "create_at" field.
func (giuo *GoodIncomingUpdateOne) AddCreateAt(u int32) *GoodIncomingUpdateOne {
	giuo.mutation.AddCreateAt(u)
	return giuo
}

// SetUpdateAt sets the "update_at" field.
func (giuo *GoodIncomingUpdateOne) SetUpdateAt(u uint32) *GoodIncomingUpdateOne {
	giuo.mutation.ResetUpdateAt()
	giuo.mutation.SetUpdateAt(u)
	return giuo
}

// AddUpdateAt adds u to the "update_at" field.
func (giuo *GoodIncomingUpdateOne) AddUpdateAt(u int32) *GoodIncomingUpdateOne {
	giuo.mutation.AddUpdateAt(u)
	return giuo
}

// SetDeleteAt sets the "delete_at" field.
func (giuo *GoodIncomingUpdateOne) SetDeleteAt(u uint32) *GoodIncomingUpdateOne {
	giuo.mutation.ResetDeleteAt()
	giuo.mutation.SetDeleteAt(u)
	return giuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (giuo *GoodIncomingUpdateOne) SetNillableDeleteAt(u *uint32) *GoodIncomingUpdateOne {
	if u != nil {
		giuo.SetDeleteAt(*u)
	}
	return giuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (giuo *GoodIncomingUpdateOne) AddDeleteAt(u int32) *GoodIncomingUpdateOne {
	giuo.mutation.AddDeleteAt(u)
	return giuo
}

// Mutation returns the GoodIncomingMutation object of the builder.
func (giuo *GoodIncomingUpdateOne) Mutation() *GoodIncomingMutation {
	return giuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (giuo *GoodIncomingUpdateOne) Select(field string, fields ...string) *GoodIncomingUpdateOne {
	giuo.fields = append([]string{field}, fields...)
	return giuo
}

// Save executes the query and returns the updated GoodIncoming entity.
func (giuo *GoodIncomingUpdateOne) Save(ctx context.Context) (*GoodIncoming, error) {
	var (
		err  error
		node *GoodIncoming
	)
	giuo.defaults()
	if len(giuo.hooks) == 0 {
		node, err = giuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodIncomingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			giuo.mutation = mutation
			node, err = giuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(giuo.hooks) - 1; i >= 0; i-- {
			if giuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = giuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, giuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (giuo *GoodIncomingUpdateOne) SaveX(ctx context.Context) *GoodIncoming {
	node, err := giuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (giuo *GoodIncomingUpdateOne) Exec(ctx context.Context) error {
	_, err := giuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (giuo *GoodIncomingUpdateOne) ExecX(ctx context.Context) {
	if err := giuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (giuo *GoodIncomingUpdateOne) defaults() {
	if _, ok := giuo.mutation.UpdateAt(); !ok {
		v := goodincoming.UpdateDefaultUpdateAt()
		giuo.mutation.SetUpdateAt(v)
	}
}

func (giuo *GoodIncomingUpdateOne) sqlSave(ctx context.Context) (_node *GoodIncoming, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodincoming.Table,
			Columns: goodincoming.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodincoming.FieldID,
			},
		},
	}
	id, ok := giuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GoodIncoming.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := giuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goodincoming.FieldID)
		for _, f := range fields {
			if !goodincoming.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != goodincoming.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := giuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := giuo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodincoming.FieldGoodID,
		})
	}
	if value, ok := giuo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodincoming.FieldCoinTypeID,
		})
	}
	if value, ok := giuo.mutation.AccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodincoming.FieldAccountID,
		})
	}
	if value, ok := giuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodincoming.FieldCreateAt,
		})
	}
	if value, ok := giuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodincoming.FieldCreateAt,
		})
	}
	if value, ok := giuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodincoming.FieldUpdateAt,
		})
	}
	if value, ok := giuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodincoming.FieldUpdateAt,
		})
	}
	if value, ok := giuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodincoming.FieldDeleteAt,
		})
	}
	if value, ok := giuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodincoming.FieldDeleteAt,
		})
	}
	_node = &GoodIncoming{config: giuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, giuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodincoming.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
