// Code generated by entc, DO NOT EDIT.

package coinaccounttransaction

import (
	"fmt"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the coinaccounttransaction type in the database.
	Label = "coin_account_transaction"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldAppID holds the string denoting the app_id field in the database.
	FieldAppID = "app_id"
	// FieldFromAddressID holds the string denoting the from_address_id field in the database.
	FieldFromAddressID = "from_address_id"
	// FieldToAddressID holds the string denoting the to_address_id field in the database.
	FieldToAddressID = "to_address_id"
	// FieldCoinTypeID holds the string denoting the coin_type_id field in the database.
	FieldCoinTypeID = "coin_type_id"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldChainTransactionID holds the string denoting the chain_transaction_id field in the database.
	FieldChainTransactionID = "chain_transaction_id"
	// FieldPlatformTransactionID holds the string denoting the platform_transaction_id field in the database.
	FieldPlatformTransactionID = "platform_transaction_id"
	// FieldCreateAt holds the string denoting the create_at field in the database.
	FieldCreateAt = "create_at"
	// FieldUpdateAt holds the string denoting the update_at field in the database.
	FieldUpdateAt = "update_at"
	// FieldDeleteAt holds the string denoting the delete_at field in the database.
	FieldDeleteAt = "delete_at"
	// Table holds the table name of the coinaccounttransaction in the database.
	Table = "coin_account_transactions"
)

// Columns holds all SQL columns for coinaccounttransaction fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldAppID,
	FieldFromAddressID,
	FieldToAddressID,
	FieldCoinTypeID,
	FieldAmount,
	FieldMessage,
	FieldState,
	FieldChainTransactionID,
	FieldPlatformTransactionID,
	FieldCreateAt,
	FieldUpdateAt,
	FieldDeleteAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateAt holds the default value on creation for the "create_at" field.
	DefaultCreateAt func() uint32
	// DefaultUpdateAt holds the default value on creation for the "update_at" field.
	DefaultUpdateAt func() uint32
	// UpdateDefaultUpdateAt holds the default value on update for the "update_at" field.
	UpdateDefaultUpdateAt func() uint32
	// DefaultDeleteAt holds the default value on creation for the "delete_at" field.
	DefaultDeleteAt func() uint32
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// State defines the type for the "state" enum field.
type State string

// State values.
const (
	StateCreated    State = "created"
	StateWait       State = "wait"
	StatePaying     State = "paying"
	StateSuccessful State = "successful"
	StateRejected   State = "rejected"
	StateFail       State = "fail"
)

func (s State) String() string {
	return string(s)
}

// StateValidator is a validator for the "state" field enum values. It is called by the builders before save.
func StateValidator(s State) error {
	switch s {
	case StateCreated, StateWait, StatePaying, StateSuccessful, StateRejected, StateFail:
		return nil
	default:
		return fmt.Errorf("coinaccounttransaction: invalid enum value for state field: %q", s)
	}
}
