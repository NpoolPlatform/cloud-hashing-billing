// Code generated by entc, DO NOT EDIT.

package goodbenefit

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// GoodID applies equality check predicate on the "good_id" field. It's identical to GoodIDEQ.
func GoodID(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodID), v))
	})
}

// BenefitAccountID applies equality check predicate on the "benefit_account_id" field. It's identical to BenefitAccountIDEQ.
func BenefitAccountID(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBenefitAccountID), v))
	})
}

// PlatformOfflineAccountID applies equality check predicate on the "platform_offline_account_id" field. It's identical to PlatformOfflineAccountIDEQ.
func PlatformOfflineAccountID(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformOfflineAccountID), v))
	})
}

// UserOnlineAccountID applies equality check predicate on the "user_online_account_id" field. It's identical to UserOnlineAccountIDEQ.
func UserOnlineAccountID(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserOnlineAccountID), v))
	})
}

// UserOfflineAccountID applies equality check predicate on the "user_offline_account_id" field. It's identical to UserOfflineAccountIDEQ.
func UserOfflineAccountID(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserOfflineAccountID), v))
	})
}

// BenefitIntervalHours applies equality check predicate on the "benefit_interval_hours" field. It's identical to BenefitIntervalHoursEQ.
func BenefitIntervalHours(v uint32) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBenefitIntervalHours), v))
	})
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v uint32) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v uint32) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// DeleteAt applies equality check predicate on the "delete_at" field. It's identical to DeleteAtEQ.
func DeleteAt(v uint32) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteAt), v))
	})
}

// GoodIDEQ applies the EQ predicate on the "good_id" field.
func GoodIDEQ(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodID), v))
	})
}

// GoodIDNEQ applies the NEQ predicate on the "good_id" field.
func GoodIDNEQ(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGoodID), v))
	})
}

// GoodIDIn applies the In predicate on the "good_id" field.
func GoodIDIn(vs ...uuid.UUID) predicate.GoodBenefit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodBenefit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGoodID), v...))
	})
}

// GoodIDNotIn applies the NotIn predicate on the "good_id" field.
func GoodIDNotIn(vs ...uuid.UUID) predicate.GoodBenefit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodBenefit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGoodID), v...))
	})
}

// GoodIDGT applies the GT predicate on the "good_id" field.
func GoodIDGT(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGoodID), v))
	})
}

// GoodIDGTE applies the GTE predicate on the "good_id" field.
func GoodIDGTE(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGoodID), v))
	})
}

// GoodIDLT applies the LT predicate on the "good_id" field.
func GoodIDLT(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGoodID), v))
	})
}

// GoodIDLTE applies the LTE predicate on the "good_id" field.
func GoodIDLTE(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGoodID), v))
	})
}

// BenefitAccountIDEQ applies the EQ predicate on the "benefit_account_id" field.
func BenefitAccountIDEQ(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBenefitAccountID), v))
	})
}

// BenefitAccountIDNEQ applies the NEQ predicate on the "benefit_account_id" field.
func BenefitAccountIDNEQ(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBenefitAccountID), v))
	})
}

// BenefitAccountIDIn applies the In predicate on the "benefit_account_id" field.
func BenefitAccountIDIn(vs ...uuid.UUID) predicate.GoodBenefit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodBenefit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBenefitAccountID), v...))
	})
}

// BenefitAccountIDNotIn applies the NotIn predicate on the "benefit_account_id" field.
func BenefitAccountIDNotIn(vs ...uuid.UUID) predicate.GoodBenefit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodBenefit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBenefitAccountID), v...))
	})
}

// BenefitAccountIDGT applies the GT predicate on the "benefit_account_id" field.
func BenefitAccountIDGT(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBenefitAccountID), v))
	})
}

// BenefitAccountIDGTE applies the GTE predicate on the "benefit_account_id" field.
func BenefitAccountIDGTE(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBenefitAccountID), v))
	})
}

// BenefitAccountIDLT applies the LT predicate on the "benefit_account_id" field.
func BenefitAccountIDLT(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBenefitAccountID), v))
	})
}

// BenefitAccountIDLTE applies the LTE predicate on the "benefit_account_id" field.
func BenefitAccountIDLTE(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBenefitAccountID), v))
	})
}

// PlatformOfflineAccountIDEQ applies the EQ predicate on the "platform_offline_account_id" field.
func PlatformOfflineAccountIDEQ(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformOfflineAccountID), v))
	})
}

// PlatformOfflineAccountIDNEQ applies the NEQ predicate on the "platform_offline_account_id" field.
func PlatformOfflineAccountIDNEQ(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatformOfflineAccountID), v))
	})
}

// PlatformOfflineAccountIDIn applies the In predicate on the "platform_offline_account_id" field.
func PlatformOfflineAccountIDIn(vs ...uuid.UUID) predicate.GoodBenefit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodBenefit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPlatformOfflineAccountID), v...))
	})
}

// PlatformOfflineAccountIDNotIn applies the NotIn predicate on the "platform_offline_account_id" field.
func PlatformOfflineAccountIDNotIn(vs ...uuid.UUID) predicate.GoodBenefit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodBenefit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPlatformOfflineAccountID), v...))
	})
}

// PlatformOfflineAccountIDGT applies the GT predicate on the "platform_offline_account_id" field.
func PlatformOfflineAccountIDGT(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlatformOfflineAccountID), v))
	})
}

// PlatformOfflineAccountIDGTE applies the GTE predicate on the "platform_offline_account_id" field.
func PlatformOfflineAccountIDGTE(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlatformOfflineAccountID), v))
	})
}

// PlatformOfflineAccountIDLT applies the LT predicate on the "platform_offline_account_id" field.
func PlatformOfflineAccountIDLT(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlatformOfflineAccountID), v))
	})
}

// PlatformOfflineAccountIDLTE applies the LTE predicate on the "platform_offline_account_id" field.
func PlatformOfflineAccountIDLTE(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlatformOfflineAccountID), v))
	})
}

// UserOnlineAccountIDEQ applies the EQ predicate on the "user_online_account_id" field.
func UserOnlineAccountIDEQ(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserOnlineAccountID), v))
	})
}

// UserOnlineAccountIDNEQ applies the NEQ predicate on the "user_online_account_id" field.
func UserOnlineAccountIDNEQ(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserOnlineAccountID), v))
	})
}

// UserOnlineAccountIDIn applies the In predicate on the "user_online_account_id" field.
func UserOnlineAccountIDIn(vs ...uuid.UUID) predicate.GoodBenefit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodBenefit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserOnlineAccountID), v...))
	})
}

// UserOnlineAccountIDNotIn applies the NotIn predicate on the "user_online_account_id" field.
func UserOnlineAccountIDNotIn(vs ...uuid.UUID) predicate.GoodBenefit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodBenefit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserOnlineAccountID), v...))
	})
}

// UserOnlineAccountIDGT applies the GT predicate on the "user_online_account_id" field.
func UserOnlineAccountIDGT(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserOnlineAccountID), v))
	})
}

// UserOnlineAccountIDGTE applies the GTE predicate on the "user_online_account_id" field.
func UserOnlineAccountIDGTE(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserOnlineAccountID), v))
	})
}

// UserOnlineAccountIDLT applies the LT predicate on the "user_online_account_id" field.
func UserOnlineAccountIDLT(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserOnlineAccountID), v))
	})
}

// UserOnlineAccountIDLTE applies the LTE predicate on the "user_online_account_id" field.
func UserOnlineAccountIDLTE(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserOnlineAccountID), v))
	})
}

// UserOfflineAccountIDEQ applies the EQ predicate on the "user_offline_account_id" field.
func UserOfflineAccountIDEQ(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserOfflineAccountID), v))
	})
}

// UserOfflineAccountIDNEQ applies the NEQ predicate on the "user_offline_account_id" field.
func UserOfflineAccountIDNEQ(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserOfflineAccountID), v))
	})
}

// UserOfflineAccountIDIn applies the In predicate on the "user_offline_account_id" field.
func UserOfflineAccountIDIn(vs ...uuid.UUID) predicate.GoodBenefit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodBenefit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserOfflineAccountID), v...))
	})
}

// UserOfflineAccountIDNotIn applies the NotIn predicate on the "user_offline_account_id" field.
func UserOfflineAccountIDNotIn(vs ...uuid.UUID) predicate.GoodBenefit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodBenefit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserOfflineAccountID), v...))
	})
}

// UserOfflineAccountIDGT applies the GT predicate on the "user_offline_account_id" field.
func UserOfflineAccountIDGT(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserOfflineAccountID), v))
	})
}

// UserOfflineAccountIDGTE applies the GTE predicate on the "user_offline_account_id" field.
func UserOfflineAccountIDGTE(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserOfflineAccountID), v))
	})
}

// UserOfflineAccountIDLT applies the LT predicate on the "user_offline_account_id" field.
func UserOfflineAccountIDLT(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserOfflineAccountID), v))
	})
}

// UserOfflineAccountIDLTE applies the LTE predicate on the "user_offline_account_id" field.
func UserOfflineAccountIDLTE(v uuid.UUID) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserOfflineAccountID), v))
	})
}

// BenefitIntervalHoursEQ applies the EQ predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursEQ(v uint32) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBenefitIntervalHours), v))
	})
}

// BenefitIntervalHoursNEQ applies the NEQ predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursNEQ(v uint32) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBenefitIntervalHours), v))
	})
}

// BenefitIntervalHoursIn applies the In predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursIn(vs ...uint32) predicate.GoodBenefit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodBenefit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBenefitIntervalHours), v...))
	})
}

// BenefitIntervalHoursNotIn applies the NotIn predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursNotIn(vs ...uint32) predicate.GoodBenefit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodBenefit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBenefitIntervalHours), v...))
	})
}

// BenefitIntervalHoursGT applies the GT predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursGT(v uint32) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBenefitIntervalHours), v))
	})
}

// BenefitIntervalHoursGTE applies the GTE predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursGTE(v uint32) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBenefitIntervalHours), v))
	})
}

// BenefitIntervalHoursLT applies the LT predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursLT(v uint32) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBenefitIntervalHours), v))
	})
}

// BenefitIntervalHoursLTE applies the LTE predicate on the "benefit_interval_hours" field.
func BenefitIntervalHoursLTE(v uint32) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBenefitIntervalHours), v))
	})
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v uint32) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v uint32) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...uint32) predicate.GoodBenefit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodBenefit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateAt), v...))
	})
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...uint32) predicate.GoodBenefit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodBenefit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateAt), v...))
	})
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v uint32) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateAt), v))
	})
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v uint32) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateAt), v))
	})
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v uint32) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateAt), v))
	})
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v uint32) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateAt), v))
	})
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v uint32) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v uint32) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...uint32) predicate.GoodBenefit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodBenefit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...uint32) predicate.GoodBenefit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodBenefit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v uint32) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v uint32) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v uint32) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v uint32) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateAt), v))
	})
}

// DeleteAtEQ applies the EQ predicate on the "delete_at" field.
func DeleteAtEQ(v uint32) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtNEQ applies the NEQ predicate on the "delete_at" field.
func DeleteAtNEQ(v uint32) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtIn applies the In predicate on the "delete_at" field.
func DeleteAtIn(vs ...uint32) predicate.GoodBenefit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodBenefit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleteAt), v...))
	})
}

// DeleteAtNotIn applies the NotIn predicate on the "delete_at" field.
func DeleteAtNotIn(vs ...uint32) predicate.GoodBenefit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodBenefit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleteAt), v...))
	})
}

// DeleteAtGT applies the GT predicate on the "delete_at" field.
func DeleteAtGT(v uint32) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtGTE applies the GTE predicate on the "delete_at" field.
func DeleteAtGTE(v uint32) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtLT applies the LT predicate on the "delete_at" field.
func DeleteAtLT(v uint32) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtLTE applies the LTE predicate on the "delete_at" field.
func DeleteAtLTE(v uint32) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleteAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GoodBenefit) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GoodBenefit) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GoodBenefit) predicate.GoodBenefit {
	return predicate.GoodBenefit(func(s *sql.Selector) {
		p(s.Not())
	})
}
