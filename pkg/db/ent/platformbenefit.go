// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/platformbenefit"
	"github.com/google/uuid"
)

// PlatformBenefit is the model entity for the PlatformBenefit schema.
type PlatformBenefit struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// BenefitAccountID holds the value of the "benefit_account_id" field.
	BenefitAccountID uuid.UUID `json:"benefit_account_id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount uint64 `json:"amount,omitempty"`
	// LastBenefitTimestamp holds the value of the "last_benefit_timestamp" field.
	LastBenefitTimestamp uint32 `json:"last_benefit_timestamp,omitempty"`
	// ChainTransactionID holds the value of the "chain_transaction_id" field.
	ChainTransactionID string `json:"chain_transaction_id,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PlatformBenefit) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case platformbenefit.FieldAmount, platformbenefit.FieldLastBenefitTimestamp, platformbenefit.FieldCreateAt, platformbenefit.FieldUpdateAt, platformbenefit.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case platformbenefit.FieldChainTransactionID:
			values[i] = new(sql.NullString)
		case platformbenefit.FieldID, platformbenefit.FieldGoodID, platformbenefit.FieldBenefitAccountID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PlatformBenefit", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PlatformBenefit fields.
func (pb *PlatformBenefit) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case platformbenefit.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pb.ID = *value
			}
		case platformbenefit.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				pb.GoodID = *value
			}
		case platformbenefit.FieldBenefitAccountID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field benefit_account_id", values[i])
			} else if value != nil {
				pb.BenefitAccountID = *value
			}
		case platformbenefit.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				pb.Amount = uint64(value.Int64)
			}
		case platformbenefit.FieldLastBenefitTimestamp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_benefit_timestamp", values[i])
			} else if value.Valid {
				pb.LastBenefitTimestamp = uint32(value.Int64)
			}
		case platformbenefit.FieldChainTransactionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chain_transaction_id", values[i])
			} else if value.Valid {
				pb.ChainTransactionID = value.String
			}
		case platformbenefit.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				pb.CreateAt = uint32(value.Int64)
			}
		case platformbenefit.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				pb.UpdateAt = uint32(value.Int64)
			}
		case platformbenefit.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				pb.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this PlatformBenefit.
// Note that you need to call PlatformBenefit.Unwrap() before calling this method if this PlatformBenefit
// was returned from a transaction, and the transaction was committed or rolled back.
func (pb *PlatformBenefit) Update() *PlatformBenefitUpdateOne {
	return (&PlatformBenefitClient{config: pb.config}).UpdateOne(pb)
}

// Unwrap unwraps the PlatformBenefit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pb *PlatformBenefit) Unwrap() *PlatformBenefit {
	_tx, ok := pb.config.driver.(*txDriver)
	if !ok {
		panic("ent: PlatformBenefit is not a transactional entity")
	}
	pb.config.driver = _tx.drv
	return pb
}

// String implements the fmt.Stringer.
func (pb *PlatformBenefit) String() string {
	var builder strings.Builder
	builder.WriteString("PlatformBenefit(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pb.ID))
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", pb.GoodID))
	builder.WriteString(", ")
	builder.WriteString("benefit_account_id=")
	builder.WriteString(fmt.Sprintf("%v", pb.BenefitAccountID))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", pb.Amount))
	builder.WriteString(", ")
	builder.WriteString("last_benefit_timestamp=")
	builder.WriteString(fmt.Sprintf("%v", pb.LastBenefitTimestamp))
	builder.WriteString(", ")
	builder.WriteString("chain_transaction_id=")
	builder.WriteString(pb.ChainTransactionID)
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(fmt.Sprintf("%v", pb.CreateAt))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(fmt.Sprintf("%v", pb.UpdateAt))
	builder.WriteString(", ")
	builder.WriteString("delete_at=")
	builder.WriteString(fmt.Sprintf("%v", pb.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// PlatformBenefits is a parsable slice of PlatformBenefit.
type PlatformBenefits []*PlatformBenefit

func (pb PlatformBenefits) config(cfg config) {
	for _i := range pb {
		pb[_i].config = cfg
	}
}
