// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/userdirectbenefit"
	"github.com/google/uuid"
)

// UserDirectBenefit is the model entity for the UserDirectBenefit schema.
type UserDirectBenefit struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// CoinTypeID holds the value of the "coin_type_id" field.
	CoinTypeID uuid.UUID `json:"coin_type_id,omitempty"`
	// AccountID holds the value of the "account_id" field.
	AccountID uuid.UUID `json:"account_id,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserDirectBenefit) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case userdirectbenefit.FieldCreateAt, userdirectbenefit.FieldUpdateAt, userdirectbenefit.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case userdirectbenefit.FieldID, userdirectbenefit.FieldAppID, userdirectbenefit.FieldUserID, userdirectbenefit.FieldCoinTypeID, userdirectbenefit.FieldAccountID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserDirectBenefit", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserDirectBenefit fields.
func (udb *UserDirectBenefit) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userdirectbenefit.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				udb.ID = *value
			}
		case userdirectbenefit.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				udb.AppID = *value
			}
		case userdirectbenefit.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				udb.UserID = *value
			}
		case userdirectbenefit.FieldCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type_id", values[i])
			} else if value != nil {
				udb.CoinTypeID = *value
			}
		case userdirectbenefit.FieldAccountID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[i])
			} else if value != nil {
				udb.AccountID = *value
			}
		case userdirectbenefit.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				udb.CreateAt = uint32(value.Int64)
			}
		case userdirectbenefit.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				udb.UpdateAt = uint32(value.Int64)
			}
		case userdirectbenefit.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				udb.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UserDirectBenefit.
// Note that you need to call UserDirectBenefit.Unwrap() before calling this method if this UserDirectBenefit
// was returned from a transaction, and the transaction was committed or rolled back.
func (udb *UserDirectBenefit) Update() *UserDirectBenefitUpdateOne {
	return (&UserDirectBenefitClient{config: udb.config}).UpdateOne(udb)
}

// Unwrap unwraps the UserDirectBenefit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (udb *UserDirectBenefit) Unwrap() *UserDirectBenefit {
	tx, ok := udb.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserDirectBenefit is not a transactional entity")
	}
	udb.config.driver = tx.drv
	return udb
}

// String implements the fmt.Stringer.
func (udb *UserDirectBenefit) String() string {
	var builder strings.Builder
	builder.WriteString("UserDirectBenefit(")
	builder.WriteString(fmt.Sprintf("id=%v", udb.ID))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", udb.AppID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", udb.UserID))
	builder.WriteString(", coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", udb.CoinTypeID))
	builder.WriteString(", account_id=")
	builder.WriteString(fmt.Sprintf("%v", udb.AccountID))
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", udb.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", udb.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", udb.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// UserDirectBenefits is a parsable slice of UserDirectBenefit.
type UserDirectBenefits []*UserDirectBenefit

func (udb UserDirectBenefits) config(cfg config) {
	for _i := range udb {
		udb[_i].config = cfg
	}
}
