// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/userpaymentbalance"
	"github.com/google/uuid"
)

// UserPaymentBalanceUpdate is the builder for updating UserPaymentBalance entities.
type UserPaymentBalanceUpdate struct {
	config
	hooks    []Hook
	mutation *UserPaymentBalanceMutation
}

// Where appends a list predicates to the UserPaymentBalanceUpdate builder.
func (upbu *UserPaymentBalanceUpdate) Where(ps ...predicate.UserPaymentBalance) *UserPaymentBalanceUpdate {
	upbu.mutation.Where(ps...)
	return upbu
}

// SetAppID sets the "app_id" field.
func (upbu *UserPaymentBalanceUpdate) SetAppID(u uuid.UUID) *UserPaymentBalanceUpdate {
	upbu.mutation.SetAppID(u)
	return upbu
}

// SetUserID sets the "user_id" field.
func (upbu *UserPaymentBalanceUpdate) SetUserID(u uuid.UUID) *UserPaymentBalanceUpdate {
	upbu.mutation.SetUserID(u)
	return upbu
}

// SetPaymentID sets the "payment_id" field.
func (upbu *UserPaymentBalanceUpdate) SetPaymentID(u uuid.UUID) *UserPaymentBalanceUpdate {
	upbu.mutation.SetPaymentID(u)
	return upbu
}

// SetUsedByPaymentID sets the "used_by_payment_id" field.
func (upbu *UserPaymentBalanceUpdate) SetUsedByPaymentID(u uuid.UUID) *UserPaymentBalanceUpdate {
	upbu.mutation.SetUsedByPaymentID(u)
	return upbu
}

// SetAmount sets the "amount" field.
func (upbu *UserPaymentBalanceUpdate) SetAmount(u uint64) *UserPaymentBalanceUpdate {
	upbu.mutation.ResetAmount()
	upbu.mutation.SetAmount(u)
	return upbu
}

// AddAmount adds u to the "amount" field.
func (upbu *UserPaymentBalanceUpdate) AddAmount(u int64) *UserPaymentBalanceUpdate {
	upbu.mutation.AddAmount(u)
	return upbu
}

// SetCreateAt sets the "create_at" field.
func (upbu *UserPaymentBalanceUpdate) SetCreateAt(u uint32) *UserPaymentBalanceUpdate {
	upbu.mutation.ResetCreateAt()
	upbu.mutation.SetCreateAt(u)
	return upbu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (upbu *UserPaymentBalanceUpdate) SetNillableCreateAt(u *uint32) *UserPaymentBalanceUpdate {
	if u != nil {
		upbu.SetCreateAt(*u)
	}
	return upbu
}

// AddCreateAt adds u to the "create_at" field.
func (upbu *UserPaymentBalanceUpdate) AddCreateAt(u int32) *UserPaymentBalanceUpdate {
	upbu.mutation.AddCreateAt(u)
	return upbu
}

// SetUpdateAt sets the "update_at" field.
func (upbu *UserPaymentBalanceUpdate) SetUpdateAt(u uint32) *UserPaymentBalanceUpdate {
	upbu.mutation.ResetUpdateAt()
	upbu.mutation.SetUpdateAt(u)
	return upbu
}

// AddUpdateAt adds u to the "update_at" field.
func (upbu *UserPaymentBalanceUpdate) AddUpdateAt(u int32) *UserPaymentBalanceUpdate {
	upbu.mutation.AddUpdateAt(u)
	return upbu
}

// SetDeleteAt sets the "delete_at" field.
func (upbu *UserPaymentBalanceUpdate) SetDeleteAt(u uint32) *UserPaymentBalanceUpdate {
	upbu.mutation.ResetDeleteAt()
	upbu.mutation.SetDeleteAt(u)
	return upbu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (upbu *UserPaymentBalanceUpdate) SetNillableDeleteAt(u *uint32) *UserPaymentBalanceUpdate {
	if u != nil {
		upbu.SetDeleteAt(*u)
	}
	return upbu
}

// AddDeleteAt adds u to the "delete_at" field.
func (upbu *UserPaymentBalanceUpdate) AddDeleteAt(u int32) *UserPaymentBalanceUpdate {
	upbu.mutation.AddDeleteAt(u)
	return upbu
}

// Mutation returns the UserPaymentBalanceMutation object of the builder.
func (upbu *UserPaymentBalanceUpdate) Mutation() *UserPaymentBalanceMutation {
	return upbu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (upbu *UserPaymentBalanceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	upbu.defaults()
	if len(upbu.hooks) == 0 {
		affected, err = upbu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserPaymentBalanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			upbu.mutation = mutation
			affected, err = upbu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(upbu.hooks) - 1; i >= 0; i-- {
			if upbu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = upbu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, upbu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (upbu *UserPaymentBalanceUpdate) SaveX(ctx context.Context) int {
	affected, err := upbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (upbu *UserPaymentBalanceUpdate) Exec(ctx context.Context) error {
	_, err := upbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upbu *UserPaymentBalanceUpdate) ExecX(ctx context.Context) {
	if err := upbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upbu *UserPaymentBalanceUpdate) defaults() {
	if _, ok := upbu.mutation.UpdateAt(); !ok {
		v := userpaymentbalance.UpdateDefaultUpdateAt()
		upbu.mutation.SetUpdateAt(v)
	}
}

func (upbu *UserPaymentBalanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userpaymentbalance.Table,
			Columns: userpaymentbalance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userpaymentbalance.FieldID,
			},
		},
	}
	if ps := upbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upbu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userpaymentbalance.FieldAppID,
		})
	}
	if value, ok := upbu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userpaymentbalance.FieldUserID,
		})
	}
	if value, ok := upbu.mutation.PaymentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userpaymentbalance.FieldPaymentID,
		})
	}
	if value, ok := upbu.mutation.UsedByPaymentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userpaymentbalance.FieldUsedByPaymentID,
		})
	}
	if value, ok := upbu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: userpaymentbalance.FieldAmount,
		})
	}
	if value, ok := upbu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: userpaymentbalance.FieldAmount,
		})
	}
	if value, ok := upbu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userpaymentbalance.FieldCreateAt,
		})
	}
	if value, ok := upbu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userpaymentbalance.FieldCreateAt,
		})
	}
	if value, ok := upbu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userpaymentbalance.FieldUpdateAt,
		})
	}
	if value, ok := upbu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userpaymentbalance.FieldUpdateAt,
		})
	}
	if value, ok := upbu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userpaymentbalance.FieldDeleteAt,
		})
	}
	if value, ok := upbu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userpaymentbalance.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, upbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpaymentbalance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserPaymentBalanceUpdateOne is the builder for updating a single UserPaymentBalance entity.
type UserPaymentBalanceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserPaymentBalanceMutation
}

// SetAppID sets the "app_id" field.
func (upbuo *UserPaymentBalanceUpdateOne) SetAppID(u uuid.UUID) *UserPaymentBalanceUpdateOne {
	upbuo.mutation.SetAppID(u)
	return upbuo
}

// SetUserID sets the "user_id" field.
func (upbuo *UserPaymentBalanceUpdateOne) SetUserID(u uuid.UUID) *UserPaymentBalanceUpdateOne {
	upbuo.mutation.SetUserID(u)
	return upbuo
}

// SetPaymentID sets the "payment_id" field.
func (upbuo *UserPaymentBalanceUpdateOne) SetPaymentID(u uuid.UUID) *UserPaymentBalanceUpdateOne {
	upbuo.mutation.SetPaymentID(u)
	return upbuo
}

// SetUsedByPaymentID sets the "used_by_payment_id" field.
func (upbuo *UserPaymentBalanceUpdateOne) SetUsedByPaymentID(u uuid.UUID) *UserPaymentBalanceUpdateOne {
	upbuo.mutation.SetUsedByPaymentID(u)
	return upbuo
}

// SetAmount sets the "amount" field.
func (upbuo *UserPaymentBalanceUpdateOne) SetAmount(u uint64) *UserPaymentBalanceUpdateOne {
	upbuo.mutation.ResetAmount()
	upbuo.mutation.SetAmount(u)
	return upbuo
}

// AddAmount adds u to the "amount" field.
func (upbuo *UserPaymentBalanceUpdateOne) AddAmount(u int64) *UserPaymentBalanceUpdateOne {
	upbuo.mutation.AddAmount(u)
	return upbuo
}

// SetCreateAt sets the "create_at" field.
func (upbuo *UserPaymentBalanceUpdateOne) SetCreateAt(u uint32) *UserPaymentBalanceUpdateOne {
	upbuo.mutation.ResetCreateAt()
	upbuo.mutation.SetCreateAt(u)
	return upbuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (upbuo *UserPaymentBalanceUpdateOne) SetNillableCreateAt(u *uint32) *UserPaymentBalanceUpdateOne {
	if u != nil {
		upbuo.SetCreateAt(*u)
	}
	return upbuo
}

// AddCreateAt adds u to the "create_at" field.
func (upbuo *UserPaymentBalanceUpdateOne) AddCreateAt(u int32) *UserPaymentBalanceUpdateOne {
	upbuo.mutation.AddCreateAt(u)
	return upbuo
}

// SetUpdateAt sets the "update_at" field.
func (upbuo *UserPaymentBalanceUpdateOne) SetUpdateAt(u uint32) *UserPaymentBalanceUpdateOne {
	upbuo.mutation.ResetUpdateAt()
	upbuo.mutation.SetUpdateAt(u)
	return upbuo
}

// AddUpdateAt adds u to the "update_at" field.
func (upbuo *UserPaymentBalanceUpdateOne) AddUpdateAt(u int32) *UserPaymentBalanceUpdateOne {
	upbuo.mutation.AddUpdateAt(u)
	return upbuo
}

// SetDeleteAt sets the "delete_at" field.
func (upbuo *UserPaymentBalanceUpdateOne) SetDeleteAt(u uint32) *UserPaymentBalanceUpdateOne {
	upbuo.mutation.ResetDeleteAt()
	upbuo.mutation.SetDeleteAt(u)
	return upbuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (upbuo *UserPaymentBalanceUpdateOne) SetNillableDeleteAt(u *uint32) *UserPaymentBalanceUpdateOne {
	if u != nil {
		upbuo.SetDeleteAt(*u)
	}
	return upbuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (upbuo *UserPaymentBalanceUpdateOne) AddDeleteAt(u int32) *UserPaymentBalanceUpdateOne {
	upbuo.mutation.AddDeleteAt(u)
	return upbuo
}

// Mutation returns the UserPaymentBalanceMutation object of the builder.
func (upbuo *UserPaymentBalanceUpdateOne) Mutation() *UserPaymentBalanceMutation {
	return upbuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (upbuo *UserPaymentBalanceUpdateOne) Select(field string, fields ...string) *UserPaymentBalanceUpdateOne {
	upbuo.fields = append([]string{field}, fields...)
	return upbuo
}

// Save executes the query and returns the updated UserPaymentBalance entity.
func (upbuo *UserPaymentBalanceUpdateOne) Save(ctx context.Context) (*UserPaymentBalance, error) {
	var (
		err  error
		node *UserPaymentBalance
	)
	upbuo.defaults()
	if len(upbuo.hooks) == 0 {
		node, err = upbuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserPaymentBalanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			upbuo.mutation = mutation
			node, err = upbuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(upbuo.hooks) - 1; i >= 0; i-- {
			if upbuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = upbuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, upbuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (upbuo *UserPaymentBalanceUpdateOne) SaveX(ctx context.Context) *UserPaymentBalance {
	node, err := upbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (upbuo *UserPaymentBalanceUpdateOne) Exec(ctx context.Context) error {
	_, err := upbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upbuo *UserPaymentBalanceUpdateOne) ExecX(ctx context.Context) {
	if err := upbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upbuo *UserPaymentBalanceUpdateOne) defaults() {
	if _, ok := upbuo.mutation.UpdateAt(); !ok {
		v := userpaymentbalance.UpdateDefaultUpdateAt()
		upbuo.mutation.SetUpdateAt(v)
	}
}

func (upbuo *UserPaymentBalanceUpdateOne) sqlSave(ctx context.Context) (_node *UserPaymentBalance, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userpaymentbalance.Table,
			Columns: userpaymentbalance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userpaymentbalance.FieldID,
			},
		},
	}
	id, ok := upbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserPaymentBalance.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := upbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userpaymentbalance.FieldID)
		for _, f := range fields {
			if !userpaymentbalance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userpaymentbalance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := upbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upbuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userpaymentbalance.FieldAppID,
		})
	}
	if value, ok := upbuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userpaymentbalance.FieldUserID,
		})
	}
	if value, ok := upbuo.mutation.PaymentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userpaymentbalance.FieldPaymentID,
		})
	}
	if value, ok := upbuo.mutation.UsedByPaymentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userpaymentbalance.FieldUsedByPaymentID,
		})
	}
	if value, ok := upbuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: userpaymentbalance.FieldAmount,
		})
	}
	if value, ok := upbuo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: userpaymentbalance.FieldAmount,
		})
	}
	if value, ok := upbuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userpaymentbalance.FieldCreateAt,
		})
	}
	if value, ok := upbuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userpaymentbalance.FieldCreateAt,
		})
	}
	if value, ok := upbuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userpaymentbalance.FieldUpdateAt,
		})
	}
	if value, ok := upbuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userpaymentbalance.FieldUpdateAt,
		})
	}
	if value, ok := upbuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userpaymentbalance.FieldDeleteAt,
		})
	}
	if value, ok := upbuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userpaymentbalance.FieldDeleteAt,
		})
	}
	_node = &UserPaymentBalance{config: upbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, upbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpaymentbalance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
