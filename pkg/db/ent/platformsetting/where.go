// Code generated by ent, DO NOT EDIT.

package platformsetting

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// WarmAccountUsdAmount applies equality check predicate on the "warm_account_usd_amount" field. It's identical to WarmAccountUsdAmountEQ.
func WarmAccountUsdAmount(v uint64) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWarmAccountUsdAmount), v))
	})
}

// PaymentAccountUsdAmount applies equality check predicate on the "payment_account_usd_amount" field. It's identical to PaymentAccountUsdAmountEQ.
func PaymentAccountUsdAmount(v uint64) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentAccountUsdAmount), v))
	})
}

// WithdrawAutoReviewUsdAmount applies equality check predicate on the "withdraw_auto_review_usd_amount" field. It's identical to WithdrawAutoReviewUsdAmountEQ.
func WithdrawAutoReviewUsdAmount(v uint64) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWithdrawAutoReviewUsdAmount), v))
	})
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v uint32) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v uint32) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// DeleteAt applies equality check predicate on the "delete_at" field. It's identical to DeleteAtEQ.
func DeleteAt(v uint32) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteAt), v))
	})
}

// WarmAccountUsdAmountEQ applies the EQ predicate on the "warm_account_usd_amount" field.
func WarmAccountUsdAmountEQ(v uint64) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWarmAccountUsdAmount), v))
	})
}

// WarmAccountUsdAmountNEQ applies the NEQ predicate on the "warm_account_usd_amount" field.
func WarmAccountUsdAmountNEQ(v uint64) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWarmAccountUsdAmount), v))
	})
}

// WarmAccountUsdAmountIn applies the In predicate on the "warm_account_usd_amount" field.
func WarmAccountUsdAmountIn(vs ...uint64) predicate.PlatformSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWarmAccountUsdAmount), v...))
	})
}

// WarmAccountUsdAmountNotIn applies the NotIn predicate on the "warm_account_usd_amount" field.
func WarmAccountUsdAmountNotIn(vs ...uint64) predicate.PlatformSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWarmAccountUsdAmount), v...))
	})
}

// WarmAccountUsdAmountGT applies the GT predicate on the "warm_account_usd_amount" field.
func WarmAccountUsdAmountGT(v uint64) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWarmAccountUsdAmount), v))
	})
}

// WarmAccountUsdAmountGTE applies the GTE predicate on the "warm_account_usd_amount" field.
func WarmAccountUsdAmountGTE(v uint64) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWarmAccountUsdAmount), v))
	})
}

// WarmAccountUsdAmountLT applies the LT predicate on the "warm_account_usd_amount" field.
func WarmAccountUsdAmountLT(v uint64) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWarmAccountUsdAmount), v))
	})
}

// WarmAccountUsdAmountLTE applies the LTE predicate on the "warm_account_usd_amount" field.
func WarmAccountUsdAmountLTE(v uint64) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWarmAccountUsdAmount), v))
	})
}

// PaymentAccountUsdAmountEQ applies the EQ predicate on the "payment_account_usd_amount" field.
func PaymentAccountUsdAmountEQ(v uint64) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentAccountUsdAmount), v))
	})
}

// PaymentAccountUsdAmountNEQ applies the NEQ predicate on the "payment_account_usd_amount" field.
func PaymentAccountUsdAmountNEQ(v uint64) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaymentAccountUsdAmount), v))
	})
}

// PaymentAccountUsdAmountIn applies the In predicate on the "payment_account_usd_amount" field.
func PaymentAccountUsdAmountIn(vs ...uint64) predicate.PlatformSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPaymentAccountUsdAmount), v...))
	})
}

// PaymentAccountUsdAmountNotIn applies the NotIn predicate on the "payment_account_usd_amount" field.
func PaymentAccountUsdAmountNotIn(vs ...uint64) predicate.PlatformSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPaymentAccountUsdAmount), v...))
	})
}

// PaymentAccountUsdAmountGT applies the GT predicate on the "payment_account_usd_amount" field.
func PaymentAccountUsdAmountGT(v uint64) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaymentAccountUsdAmount), v))
	})
}

// PaymentAccountUsdAmountGTE applies the GTE predicate on the "payment_account_usd_amount" field.
func PaymentAccountUsdAmountGTE(v uint64) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaymentAccountUsdAmount), v))
	})
}

// PaymentAccountUsdAmountLT applies the LT predicate on the "payment_account_usd_amount" field.
func PaymentAccountUsdAmountLT(v uint64) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaymentAccountUsdAmount), v))
	})
}

// PaymentAccountUsdAmountLTE applies the LTE predicate on the "payment_account_usd_amount" field.
func PaymentAccountUsdAmountLTE(v uint64) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaymentAccountUsdAmount), v))
	})
}

// WithdrawAutoReviewUsdAmountEQ applies the EQ predicate on the "withdraw_auto_review_usd_amount" field.
func WithdrawAutoReviewUsdAmountEQ(v uint64) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWithdrawAutoReviewUsdAmount), v))
	})
}

// WithdrawAutoReviewUsdAmountNEQ applies the NEQ predicate on the "withdraw_auto_review_usd_amount" field.
func WithdrawAutoReviewUsdAmountNEQ(v uint64) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWithdrawAutoReviewUsdAmount), v))
	})
}

// WithdrawAutoReviewUsdAmountIn applies the In predicate on the "withdraw_auto_review_usd_amount" field.
func WithdrawAutoReviewUsdAmountIn(vs ...uint64) predicate.PlatformSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWithdrawAutoReviewUsdAmount), v...))
	})
}

// WithdrawAutoReviewUsdAmountNotIn applies the NotIn predicate on the "withdraw_auto_review_usd_amount" field.
func WithdrawAutoReviewUsdAmountNotIn(vs ...uint64) predicate.PlatformSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWithdrawAutoReviewUsdAmount), v...))
	})
}

// WithdrawAutoReviewUsdAmountGT applies the GT predicate on the "withdraw_auto_review_usd_amount" field.
func WithdrawAutoReviewUsdAmountGT(v uint64) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWithdrawAutoReviewUsdAmount), v))
	})
}

// WithdrawAutoReviewUsdAmountGTE applies the GTE predicate on the "withdraw_auto_review_usd_amount" field.
func WithdrawAutoReviewUsdAmountGTE(v uint64) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWithdrawAutoReviewUsdAmount), v))
	})
}

// WithdrawAutoReviewUsdAmountLT applies the LT predicate on the "withdraw_auto_review_usd_amount" field.
func WithdrawAutoReviewUsdAmountLT(v uint64) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWithdrawAutoReviewUsdAmount), v))
	})
}

// WithdrawAutoReviewUsdAmountLTE applies the LTE predicate on the "withdraw_auto_review_usd_amount" field.
func WithdrawAutoReviewUsdAmountLTE(v uint64) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWithdrawAutoReviewUsdAmount), v))
	})
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v uint32) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v uint32) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...uint32) predicate.PlatformSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateAt), v...))
	})
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...uint32) predicate.PlatformSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateAt), v...))
	})
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v uint32) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateAt), v))
	})
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v uint32) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateAt), v))
	})
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v uint32) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateAt), v))
	})
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v uint32) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateAt), v))
	})
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v uint32) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v uint32) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...uint32) predicate.PlatformSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...uint32) predicate.PlatformSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v uint32) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v uint32) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v uint32) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v uint32) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateAt), v))
	})
}

// DeleteAtEQ applies the EQ predicate on the "delete_at" field.
func DeleteAtEQ(v uint32) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtNEQ applies the NEQ predicate on the "delete_at" field.
func DeleteAtNEQ(v uint32) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtIn applies the In predicate on the "delete_at" field.
func DeleteAtIn(vs ...uint32) predicate.PlatformSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleteAt), v...))
	})
}

// DeleteAtNotIn applies the NotIn predicate on the "delete_at" field.
func DeleteAtNotIn(vs ...uint32) predicate.PlatformSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlatformSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleteAt), v...))
	})
}

// DeleteAtGT applies the GT predicate on the "delete_at" field.
func DeleteAtGT(v uint32) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtGTE applies the GTE predicate on the "delete_at" field.
func DeleteAtGTE(v uint32) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtLT applies the LT predicate on the "delete_at" field.
func DeleteAtLT(v uint32) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtLTE applies the LTE predicate on the "delete_at" field.
func DeleteAtLTE(v uint32) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleteAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PlatformSetting) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PlatformSetting) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PlatformSetting) predicate.PlatformSetting {
	return predicate.PlatformSetting(func(s *sql.Selector) {
		p(s.Not())
	})
}
