// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/userbenefit"
	"github.com/google/uuid"
)

// UserBenefitUpdate is the builder for updating UserBenefit entities.
type UserBenefitUpdate struct {
	config
	hooks    []Hook
	mutation *UserBenefitMutation
}

// Where appends a list predicates to the UserBenefitUpdate builder.
func (ubu *UserBenefitUpdate) Where(ps ...predicate.UserBenefit) *UserBenefitUpdate {
	ubu.mutation.Where(ps...)
	return ubu
}

// SetAppID sets the "app_id" field.
func (ubu *UserBenefitUpdate) SetAppID(u uuid.UUID) *UserBenefitUpdate {
	ubu.mutation.SetAppID(u)
	return ubu
}

// SetUserID sets the "user_id" field.
func (ubu *UserBenefitUpdate) SetUserID(u uuid.UUID) *UserBenefitUpdate {
	ubu.mutation.SetUserID(u)
	return ubu
}

// SetGoodID sets the "good_id" field.
func (ubu *UserBenefitUpdate) SetGoodID(u uuid.UUID) *UserBenefitUpdate {
	ubu.mutation.SetGoodID(u)
	return ubu
}

// SetOrderID sets the "order_id" field.
func (ubu *UserBenefitUpdate) SetOrderID(u uuid.UUID) *UserBenefitUpdate {
	ubu.mutation.SetOrderID(u)
	return ubu
}

// SetAmount sets the "amount" field.
func (ubu *UserBenefitUpdate) SetAmount(u uint64) *UserBenefitUpdate {
	ubu.mutation.ResetAmount()
	ubu.mutation.SetAmount(u)
	return ubu
}

// AddAmount adds u to the "amount" field.
func (ubu *UserBenefitUpdate) AddAmount(u int64) *UserBenefitUpdate {
	ubu.mutation.AddAmount(u)
	return ubu
}

// SetLastBenefitTimestamp sets the "last_benefit_timestamp" field.
func (ubu *UserBenefitUpdate) SetLastBenefitTimestamp(u uint32) *UserBenefitUpdate {
	ubu.mutation.ResetLastBenefitTimestamp()
	ubu.mutation.SetLastBenefitTimestamp(u)
	return ubu
}

// AddLastBenefitTimestamp adds u to the "last_benefit_timestamp" field.
func (ubu *UserBenefitUpdate) AddLastBenefitTimestamp(u int32) *UserBenefitUpdate {
	ubu.mutation.AddLastBenefitTimestamp(u)
	return ubu
}

// SetCreateAt sets the "create_at" field.
func (ubu *UserBenefitUpdate) SetCreateAt(u uint32) *UserBenefitUpdate {
	ubu.mutation.ResetCreateAt()
	ubu.mutation.SetCreateAt(u)
	return ubu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ubu *UserBenefitUpdate) SetNillableCreateAt(u *uint32) *UserBenefitUpdate {
	if u != nil {
		ubu.SetCreateAt(*u)
	}
	return ubu
}

// AddCreateAt adds u to the "create_at" field.
func (ubu *UserBenefitUpdate) AddCreateAt(u int32) *UserBenefitUpdate {
	ubu.mutation.AddCreateAt(u)
	return ubu
}

// SetUpdateAt sets the "update_at" field.
func (ubu *UserBenefitUpdate) SetUpdateAt(u uint32) *UserBenefitUpdate {
	ubu.mutation.ResetUpdateAt()
	ubu.mutation.SetUpdateAt(u)
	return ubu
}

// AddUpdateAt adds u to the "update_at" field.
func (ubu *UserBenefitUpdate) AddUpdateAt(u int32) *UserBenefitUpdate {
	ubu.mutation.AddUpdateAt(u)
	return ubu
}

// SetDeleteAt sets the "delete_at" field.
func (ubu *UserBenefitUpdate) SetDeleteAt(u uint32) *UserBenefitUpdate {
	ubu.mutation.ResetDeleteAt()
	ubu.mutation.SetDeleteAt(u)
	return ubu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (ubu *UserBenefitUpdate) SetNillableDeleteAt(u *uint32) *UserBenefitUpdate {
	if u != nil {
		ubu.SetDeleteAt(*u)
	}
	return ubu
}

// AddDeleteAt adds u to the "delete_at" field.
func (ubu *UserBenefitUpdate) AddDeleteAt(u int32) *UserBenefitUpdate {
	ubu.mutation.AddDeleteAt(u)
	return ubu
}

// Mutation returns the UserBenefitMutation object of the builder.
func (ubu *UserBenefitUpdate) Mutation() *UserBenefitMutation {
	return ubu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ubu *UserBenefitUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ubu.defaults()
	if len(ubu.hooks) == 0 {
		affected, err = ubu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserBenefitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ubu.mutation = mutation
			affected, err = ubu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ubu.hooks) - 1; i >= 0; i-- {
			if ubu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ubu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ubu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ubu *UserBenefitUpdate) SaveX(ctx context.Context) int {
	affected, err := ubu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ubu *UserBenefitUpdate) Exec(ctx context.Context) error {
	_, err := ubu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ubu *UserBenefitUpdate) ExecX(ctx context.Context) {
	if err := ubu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ubu *UserBenefitUpdate) defaults() {
	if _, ok := ubu.mutation.UpdateAt(); !ok {
		v := userbenefit.UpdateDefaultUpdateAt()
		ubu.mutation.SetUpdateAt(v)
	}
}

func (ubu *UserBenefitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userbenefit.Table,
			Columns: userbenefit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userbenefit.FieldID,
			},
		},
	}
	if ps := ubu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ubu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userbenefit.FieldAppID,
		})
	}
	if value, ok := ubu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userbenefit.FieldUserID,
		})
	}
	if value, ok := ubu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userbenefit.FieldGoodID,
		})
	}
	if value, ok := ubu.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userbenefit.FieldOrderID,
		})
	}
	if value, ok := ubu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: userbenefit.FieldAmount,
		})
	}
	if value, ok := ubu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: userbenefit.FieldAmount,
		})
	}
	if value, ok := ubu.mutation.LastBenefitTimestamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userbenefit.FieldLastBenefitTimestamp,
		})
	}
	if value, ok := ubu.mutation.AddedLastBenefitTimestamp(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userbenefit.FieldLastBenefitTimestamp,
		})
	}
	if value, ok := ubu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userbenefit.FieldCreateAt,
		})
	}
	if value, ok := ubu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userbenefit.FieldCreateAt,
		})
	}
	if value, ok := ubu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userbenefit.FieldUpdateAt,
		})
	}
	if value, ok := ubu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userbenefit.FieldUpdateAt,
		})
	}
	if value, ok := ubu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userbenefit.FieldDeleteAt,
		})
	}
	if value, ok := ubu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userbenefit.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ubu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userbenefit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserBenefitUpdateOne is the builder for updating a single UserBenefit entity.
type UserBenefitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserBenefitMutation
}

// SetAppID sets the "app_id" field.
func (ubuo *UserBenefitUpdateOne) SetAppID(u uuid.UUID) *UserBenefitUpdateOne {
	ubuo.mutation.SetAppID(u)
	return ubuo
}

// SetUserID sets the "user_id" field.
func (ubuo *UserBenefitUpdateOne) SetUserID(u uuid.UUID) *UserBenefitUpdateOne {
	ubuo.mutation.SetUserID(u)
	return ubuo
}

// SetGoodID sets the "good_id" field.
func (ubuo *UserBenefitUpdateOne) SetGoodID(u uuid.UUID) *UserBenefitUpdateOne {
	ubuo.mutation.SetGoodID(u)
	return ubuo
}

// SetOrderID sets the "order_id" field.
func (ubuo *UserBenefitUpdateOne) SetOrderID(u uuid.UUID) *UserBenefitUpdateOne {
	ubuo.mutation.SetOrderID(u)
	return ubuo
}

// SetAmount sets the "amount" field.
func (ubuo *UserBenefitUpdateOne) SetAmount(u uint64) *UserBenefitUpdateOne {
	ubuo.mutation.ResetAmount()
	ubuo.mutation.SetAmount(u)
	return ubuo
}

// AddAmount adds u to the "amount" field.
func (ubuo *UserBenefitUpdateOne) AddAmount(u int64) *UserBenefitUpdateOne {
	ubuo.mutation.AddAmount(u)
	return ubuo
}

// SetLastBenefitTimestamp sets the "last_benefit_timestamp" field.
func (ubuo *UserBenefitUpdateOne) SetLastBenefitTimestamp(u uint32) *UserBenefitUpdateOne {
	ubuo.mutation.ResetLastBenefitTimestamp()
	ubuo.mutation.SetLastBenefitTimestamp(u)
	return ubuo
}

// AddLastBenefitTimestamp adds u to the "last_benefit_timestamp" field.
func (ubuo *UserBenefitUpdateOne) AddLastBenefitTimestamp(u int32) *UserBenefitUpdateOne {
	ubuo.mutation.AddLastBenefitTimestamp(u)
	return ubuo
}

// SetCreateAt sets the "create_at" field.
func (ubuo *UserBenefitUpdateOne) SetCreateAt(u uint32) *UserBenefitUpdateOne {
	ubuo.mutation.ResetCreateAt()
	ubuo.mutation.SetCreateAt(u)
	return ubuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ubuo *UserBenefitUpdateOne) SetNillableCreateAt(u *uint32) *UserBenefitUpdateOne {
	if u != nil {
		ubuo.SetCreateAt(*u)
	}
	return ubuo
}

// AddCreateAt adds u to the "create_at" field.
func (ubuo *UserBenefitUpdateOne) AddCreateAt(u int32) *UserBenefitUpdateOne {
	ubuo.mutation.AddCreateAt(u)
	return ubuo
}

// SetUpdateAt sets the "update_at" field.
func (ubuo *UserBenefitUpdateOne) SetUpdateAt(u uint32) *UserBenefitUpdateOne {
	ubuo.mutation.ResetUpdateAt()
	ubuo.mutation.SetUpdateAt(u)
	return ubuo
}

// AddUpdateAt adds u to the "update_at" field.
func (ubuo *UserBenefitUpdateOne) AddUpdateAt(u int32) *UserBenefitUpdateOne {
	ubuo.mutation.AddUpdateAt(u)
	return ubuo
}

// SetDeleteAt sets the "delete_at" field.
func (ubuo *UserBenefitUpdateOne) SetDeleteAt(u uint32) *UserBenefitUpdateOne {
	ubuo.mutation.ResetDeleteAt()
	ubuo.mutation.SetDeleteAt(u)
	return ubuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (ubuo *UserBenefitUpdateOne) SetNillableDeleteAt(u *uint32) *UserBenefitUpdateOne {
	if u != nil {
		ubuo.SetDeleteAt(*u)
	}
	return ubuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (ubuo *UserBenefitUpdateOne) AddDeleteAt(u int32) *UserBenefitUpdateOne {
	ubuo.mutation.AddDeleteAt(u)
	return ubuo
}

// Mutation returns the UserBenefitMutation object of the builder.
func (ubuo *UserBenefitUpdateOne) Mutation() *UserBenefitMutation {
	return ubuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ubuo *UserBenefitUpdateOne) Select(field string, fields ...string) *UserBenefitUpdateOne {
	ubuo.fields = append([]string{field}, fields...)
	return ubuo
}

// Save executes the query and returns the updated UserBenefit entity.
func (ubuo *UserBenefitUpdateOne) Save(ctx context.Context) (*UserBenefit, error) {
	var (
		err  error
		node *UserBenefit
	)
	ubuo.defaults()
	if len(ubuo.hooks) == 0 {
		node, err = ubuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserBenefitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ubuo.mutation = mutation
			node, err = ubuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ubuo.hooks) - 1; i >= 0; i-- {
			if ubuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ubuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ubuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ubuo *UserBenefitUpdateOne) SaveX(ctx context.Context) *UserBenefit {
	node, err := ubuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ubuo *UserBenefitUpdateOne) Exec(ctx context.Context) error {
	_, err := ubuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ubuo *UserBenefitUpdateOne) ExecX(ctx context.Context) {
	if err := ubuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ubuo *UserBenefitUpdateOne) defaults() {
	if _, ok := ubuo.mutation.UpdateAt(); !ok {
		v := userbenefit.UpdateDefaultUpdateAt()
		ubuo.mutation.SetUpdateAt(v)
	}
}

func (ubuo *UserBenefitUpdateOne) sqlSave(ctx context.Context) (_node *UserBenefit, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userbenefit.Table,
			Columns: userbenefit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userbenefit.FieldID,
			},
		},
	}
	id, ok := ubuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserBenefit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ubuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userbenefit.FieldID)
		for _, f := range fields {
			if !userbenefit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userbenefit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ubuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ubuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userbenefit.FieldAppID,
		})
	}
	if value, ok := ubuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userbenefit.FieldUserID,
		})
	}
	if value, ok := ubuo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userbenefit.FieldGoodID,
		})
	}
	if value, ok := ubuo.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userbenefit.FieldOrderID,
		})
	}
	if value, ok := ubuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: userbenefit.FieldAmount,
		})
	}
	if value, ok := ubuo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: userbenefit.FieldAmount,
		})
	}
	if value, ok := ubuo.mutation.LastBenefitTimestamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userbenefit.FieldLastBenefitTimestamp,
		})
	}
	if value, ok := ubuo.mutation.AddedLastBenefitTimestamp(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userbenefit.FieldLastBenefitTimestamp,
		})
	}
	if value, ok := ubuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userbenefit.FieldCreateAt,
		})
	}
	if value, ok := ubuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userbenefit.FieldCreateAt,
		})
	}
	if value, ok := ubuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userbenefit.FieldUpdateAt,
		})
	}
	if value, ok := ubuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userbenefit.FieldUpdateAt,
		})
	}
	if value, ok := ubuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userbenefit.FieldDeleteAt,
		})
	}
	if value, ok := ubuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userbenefit.FieldDeleteAt,
		})
	}
	_node = &UserBenefit{config: ubuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ubuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userbenefit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
