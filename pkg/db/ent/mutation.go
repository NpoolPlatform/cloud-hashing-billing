// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/coinaccountinfo"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/coinaccounttransaction"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/platformbenefit"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/platformsetting"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/userbenefit"
	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCoinAccountInfo        = "CoinAccountInfo"
	TypeCoinAccountTransaction = "CoinAccountTransaction"
	TypePlatformBenefit        = "PlatformBenefit"
	TypePlatformSetting        = "PlatformSetting"
	TypeUserBenefit            = "UserBenefit"
)

// CoinAccountInfoMutation represents an operation that mutates the CoinAccountInfo nodes in the graph.
type CoinAccountInfoMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	coin_type_id  *uuid.UUID
	address       *string
	generated_by  *coinaccountinfo.GeneratedBy
	used_for      *coinaccountinfo.UsedFor
	idle          *bool
	app_id        *uuid.UUID
	user_id       *uuid.UUID
	create_at     *uint32
	addcreate_at  *uint32
	update_at     *uint32
	addupdate_at  *uint32
	delete_at     *uint32
	adddelete_at  *uint32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*CoinAccountInfo, error)
	predicates    []predicate.CoinAccountInfo
}

var _ ent.Mutation = (*CoinAccountInfoMutation)(nil)

// coinaccountinfoOption allows management of the mutation configuration using functional options.
type coinaccountinfoOption func(*CoinAccountInfoMutation)

// newCoinAccountInfoMutation creates new mutation for the CoinAccountInfo entity.
func newCoinAccountInfoMutation(c config, op Op, opts ...coinaccountinfoOption) *CoinAccountInfoMutation {
	m := &CoinAccountInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeCoinAccountInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCoinAccountInfoID sets the ID field of the mutation.
func withCoinAccountInfoID(id uuid.UUID) coinaccountinfoOption {
	return func(m *CoinAccountInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *CoinAccountInfo
		)
		m.oldValue = func(ctx context.Context) (*CoinAccountInfo, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CoinAccountInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCoinAccountInfo sets the old CoinAccountInfo of the mutation.
func withCoinAccountInfo(node *CoinAccountInfo) coinaccountinfoOption {
	return func(m *CoinAccountInfoMutation) {
		m.oldValue = func(context.Context) (*CoinAccountInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CoinAccountInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CoinAccountInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CoinAccountInfo entities.
func (m *CoinAccountInfoMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CoinAccountInfoMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *CoinAccountInfoMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *CoinAccountInfoMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the CoinAccountInfo entity.
// If the CoinAccountInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountInfoMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *CoinAccountInfoMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
}

// SetAddress sets the "address" field.
func (m *CoinAccountInfoMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *CoinAccountInfoMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the CoinAccountInfo entity.
// If the CoinAccountInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountInfoMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *CoinAccountInfoMutation) ResetAddress() {
	m.address = nil
}

// SetGeneratedBy sets the "generated_by" field.
func (m *CoinAccountInfoMutation) SetGeneratedBy(cb coinaccountinfo.GeneratedBy) {
	m.generated_by = &cb
}

// GeneratedBy returns the value of the "generated_by" field in the mutation.
func (m *CoinAccountInfoMutation) GeneratedBy() (r coinaccountinfo.GeneratedBy, exists bool) {
	v := m.generated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldGeneratedBy returns the old "generated_by" field's value of the CoinAccountInfo entity.
// If the CoinAccountInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountInfoMutation) OldGeneratedBy(ctx context.Context) (v coinaccountinfo.GeneratedBy, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGeneratedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGeneratedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGeneratedBy: %w", err)
	}
	return oldValue.GeneratedBy, nil
}

// ResetGeneratedBy resets all changes to the "generated_by" field.
func (m *CoinAccountInfoMutation) ResetGeneratedBy() {
	m.generated_by = nil
}

// SetUsedFor sets the "used_for" field.
func (m *CoinAccountInfoMutation) SetUsedFor(cf coinaccountinfo.UsedFor) {
	m.used_for = &cf
}

// UsedFor returns the value of the "used_for" field in the mutation.
func (m *CoinAccountInfoMutation) UsedFor() (r coinaccountinfo.UsedFor, exists bool) {
	v := m.used_for
	if v == nil {
		return
	}
	return *v, true
}

// OldUsedFor returns the old "used_for" field's value of the CoinAccountInfo entity.
// If the CoinAccountInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountInfoMutation) OldUsedFor(ctx context.Context) (v coinaccountinfo.UsedFor, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUsedFor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUsedFor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsedFor: %w", err)
	}
	return oldValue.UsedFor, nil
}

// ResetUsedFor resets all changes to the "used_for" field.
func (m *CoinAccountInfoMutation) ResetUsedFor() {
	m.used_for = nil
}

// SetIdle sets the "idle" field.
func (m *CoinAccountInfoMutation) SetIdle(b bool) {
	m.idle = &b
}

// Idle returns the value of the "idle" field in the mutation.
func (m *CoinAccountInfoMutation) Idle() (r bool, exists bool) {
	v := m.idle
	if v == nil {
		return
	}
	return *v, true
}

// OldIdle returns the old "idle" field's value of the CoinAccountInfo entity.
// If the CoinAccountInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountInfoMutation) OldIdle(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIdle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIdle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdle: %w", err)
	}
	return oldValue.Idle, nil
}

// ResetIdle resets all changes to the "idle" field.
func (m *CoinAccountInfoMutation) ResetIdle() {
	m.idle = nil
}

// SetAppID sets the "app_id" field.
func (m *CoinAccountInfoMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *CoinAccountInfoMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the CoinAccountInfo entity.
// If the CoinAccountInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountInfoMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *CoinAccountInfoMutation) ResetAppID() {
	m.app_id = nil
}

// SetUserID sets the "user_id" field.
func (m *CoinAccountInfoMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *CoinAccountInfoMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the CoinAccountInfo entity.
// If the CoinAccountInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountInfoMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *CoinAccountInfoMutation) ResetUserID() {
	m.user_id = nil
}

// SetCreateAt sets the "create_at" field.
func (m *CoinAccountInfoMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *CoinAccountInfoMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the CoinAccountInfo entity.
// If the CoinAccountInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountInfoMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *CoinAccountInfoMutation) AddCreateAt(u uint32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *CoinAccountInfoMutation) AddedCreateAt() (r uint32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *CoinAccountInfoMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *CoinAccountInfoMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *CoinAccountInfoMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the CoinAccountInfo entity.
// If the CoinAccountInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountInfoMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *CoinAccountInfoMutation) AddUpdateAt(u uint32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *CoinAccountInfoMutation) AddedUpdateAt() (r uint32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *CoinAccountInfoMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *CoinAccountInfoMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *CoinAccountInfoMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the CoinAccountInfo entity.
// If the CoinAccountInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountInfoMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *CoinAccountInfoMutation) AddDeleteAt(u uint32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *CoinAccountInfoMutation) AddedDeleteAt() (r uint32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *CoinAccountInfoMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the CoinAccountInfoMutation builder.
func (m *CoinAccountInfoMutation) Where(ps ...predicate.CoinAccountInfo) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CoinAccountInfoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CoinAccountInfo).
func (m *CoinAccountInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CoinAccountInfoMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.coin_type_id != nil {
		fields = append(fields, coinaccountinfo.FieldCoinTypeID)
	}
	if m.address != nil {
		fields = append(fields, coinaccountinfo.FieldAddress)
	}
	if m.generated_by != nil {
		fields = append(fields, coinaccountinfo.FieldGeneratedBy)
	}
	if m.used_for != nil {
		fields = append(fields, coinaccountinfo.FieldUsedFor)
	}
	if m.idle != nil {
		fields = append(fields, coinaccountinfo.FieldIdle)
	}
	if m.app_id != nil {
		fields = append(fields, coinaccountinfo.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, coinaccountinfo.FieldUserID)
	}
	if m.create_at != nil {
		fields = append(fields, coinaccountinfo.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, coinaccountinfo.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, coinaccountinfo.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CoinAccountInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case coinaccountinfo.FieldCoinTypeID:
		return m.CoinTypeID()
	case coinaccountinfo.FieldAddress:
		return m.Address()
	case coinaccountinfo.FieldGeneratedBy:
		return m.GeneratedBy()
	case coinaccountinfo.FieldUsedFor:
		return m.UsedFor()
	case coinaccountinfo.FieldIdle:
		return m.Idle()
	case coinaccountinfo.FieldAppID:
		return m.AppID()
	case coinaccountinfo.FieldUserID:
		return m.UserID()
	case coinaccountinfo.FieldCreateAt:
		return m.CreateAt()
	case coinaccountinfo.FieldUpdateAt:
		return m.UpdateAt()
	case coinaccountinfo.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CoinAccountInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case coinaccountinfo.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case coinaccountinfo.FieldAddress:
		return m.OldAddress(ctx)
	case coinaccountinfo.FieldGeneratedBy:
		return m.OldGeneratedBy(ctx)
	case coinaccountinfo.FieldUsedFor:
		return m.OldUsedFor(ctx)
	case coinaccountinfo.FieldIdle:
		return m.OldIdle(ctx)
	case coinaccountinfo.FieldAppID:
		return m.OldAppID(ctx)
	case coinaccountinfo.FieldUserID:
		return m.OldUserID(ctx)
	case coinaccountinfo.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case coinaccountinfo.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case coinaccountinfo.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown CoinAccountInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinAccountInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case coinaccountinfo.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case coinaccountinfo.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case coinaccountinfo.FieldGeneratedBy:
		v, ok := value.(coinaccountinfo.GeneratedBy)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGeneratedBy(v)
		return nil
	case coinaccountinfo.FieldUsedFor:
		v, ok := value.(coinaccountinfo.UsedFor)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsedFor(v)
		return nil
	case coinaccountinfo.FieldIdle:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdle(v)
		return nil
	case coinaccountinfo.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case coinaccountinfo.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case coinaccountinfo.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case coinaccountinfo.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case coinaccountinfo.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown CoinAccountInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CoinAccountInfoMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_at != nil {
		fields = append(fields, coinaccountinfo.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, coinaccountinfo.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, coinaccountinfo.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CoinAccountInfoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case coinaccountinfo.FieldCreateAt:
		return m.AddedCreateAt()
	case coinaccountinfo.FieldUpdateAt:
		return m.AddedUpdateAt()
	case coinaccountinfo.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinAccountInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case coinaccountinfo.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case coinaccountinfo.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case coinaccountinfo.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown CoinAccountInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CoinAccountInfoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CoinAccountInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CoinAccountInfoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CoinAccountInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CoinAccountInfoMutation) ResetField(name string) error {
	switch name {
	case coinaccountinfo.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case coinaccountinfo.FieldAddress:
		m.ResetAddress()
		return nil
	case coinaccountinfo.FieldGeneratedBy:
		m.ResetGeneratedBy()
		return nil
	case coinaccountinfo.FieldUsedFor:
		m.ResetUsedFor()
		return nil
	case coinaccountinfo.FieldIdle:
		m.ResetIdle()
		return nil
	case coinaccountinfo.FieldAppID:
		m.ResetAppID()
		return nil
	case coinaccountinfo.FieldUserID:
		m.ResetUserID()
		return nil
	case coinaccountinfo.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case coinaccountinfo.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case coinaccountinfo.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown CoinAccountInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CoinAccountInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CoinAccountInfoMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CoinAccountInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CoinAccountInfoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CoinAccountInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CoinAccountInfoMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CoinAccountInfoMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CoinAccountInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CoinAccountInfoMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CoinAccountInfo edge %s", name)
}

// CoinAccountTransactionMutation represents an operation that mutates the CoinAccountTransaction nodes in the graph.
type CoinAccountTransactionMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uuid.UUID
	user_id                 *uuid.UUID
	app_id                  *uuid.UUID
	from_address_id         *uuid.UUID
	to_address_id           *uuid.UUID
	coin_type_id            *uuid.UUID
	amount                  *uint64
	addamount               *uint64
	message                 *string
	state                   *coinaccounttransaction.State
	chain_transaction_id    *string
	platform_transaction_id *uuid.UUID
	create_at               *uint32
	addcreate_at            *uint32
	update_at               *uint32
	addupdate_at            *uint32
	delete_at               *uint32
	adddelete_at            *uint32
	clearedFields           map[string]struct{}
	done                    bool
	oldValue                func(context.Context) (*CoinAccountTransaction, error)
	predicates              []predicate.CoinAccountTransaction
}

var _ ent.Mutation = (*CoinAccountTransactionMutation)(nil)

// coinaccounttransactionOption allows management of the mutation configuration using functional options.
type coinaccounttransactionOption func(*CoinAccountTransactionMutation)

// newCoinAccountTransactionMutation creates new mutation for the CoinAccountTransaction entity.
func newCoinAccountTransactionMutation(c config, op Op, opts ...coinaccounttransactionOption) *CoinAccountTransactionMutation {
	m := &CoinAccountTransactionMutation{
		config:        c,
		op:            op,
		typ:           TypeCoinAccountTransaction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCoinAccountTransactionID sets the ID field of the mutation.
func withCoinAccountTransactionID(id uuid.UUID) coinaccounttransactionOption {
	return func(m *CoinAccountTransactionMutation) {
		var (
			err   error
			once  sync.Once
			value *CoinAccountTransaction
		)
		m.oldValue = func(ctx context.Context) (*CoinAccountTransaction, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CoinAccountTransaction.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCoinAccountTransaction sets the old CoinAccountTransaction of the mutation.
func withCoinAccountTransaction(node *CoinAccountTransaction) coinaccounttransactionOption {
	return func(m *CoinAccountTransactionMutation) {
		m.oldValue = func(context.Context) (*CoinAccountTransaction, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CoinAccountTransactionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CoinAccountTransactionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CoinAccountTransaction entities.
func (m *CoinAccountTransactionMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CoinAccountTransactionMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUserID sets the "user_id" field.
func (m *CoinAccountTransactionMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *CoinAccountTransactionMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the CoinAccountTransaction entity.
// If the CoinAccountTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountTransactionMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *CoinAccountTransactionMutation) ResetUserID() {
	m.user_id = nil
}

// SetAppID sets the "app_id" field.
func (m *CoinAccountTransactionMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *CoinAccountTransactionMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the CoinAccountTransaction entity.
// If the CoinAccountTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountTransactionMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *CoinAccountTransactionMutation) ResetAppID() {
	m.app_id = nil
}

// SetFromAddressID sets the "from_address_id" field.
func (m *CoinAccountTransactionMutation) SetFromAddressID(u uuid.UUID) {
	m.from_address_id = &u
}

// FromAddressID returns the value of the "from_address_id" field in the mutation.
func (m *CoinAccountTransactionMutation) FromAddressID() (r uuid.UUID, exists bool) {
	v := m.from_address_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFromAddressID returns the old "from_address_id" field's value of the CoinAccountTransaction entity.
// If the CoinAccountTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountTransactionMutation) OldFromAddressID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFromAddressID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFromAddressID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFromAddressID: %w", err)
	}
	return oldValue.FromAddressID, nil
}

// ResetFromAddressID resets all changes to the "from_address_id" field.
func (m *CoinAccountTransactionMutation) ResetFromAddressID() {
	m.from_address_id = nil
}

// SetToAddressID sets the "to_address_id" field.
func (m *CoinAccountTransactionMutation) SetToAddressID(u uuid.UUID) {
	m.to_address_id = &u
}

// ToAddressID returns the value of the "to_address_id" field in the mutation.
func (m *CoinAccountTransactionMutation) ToAddressID() (r uuid.UUID, exists bool) {
	v := m.to_address_id
	if v == nil {
		return
	}
	return *v, true
}

// OldToAddressID returns the old "to_address_id" field's value of the CoinAccountTransaction entity.
// If the CoinAccountTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountTransactionMutation) OldToAddressID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldToAddressID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldToAddressID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToAddressID: %w", err)
	}
	return oldValue.ToAddressID, nil
}

// ResetToAddressID resets all changes to the "to_address_id" field.
func (m *CoinAccountTransactionMutation) ResetToAddressID() {
	m.to_address_id = nil
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *CoinAccountTransactionMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *CoinAccountTransactionMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the CoinAccountTransaction entity.
// If the CoinAccountTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountTransactionMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *CoinAccountTransactionMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
}

// SetAmount sets the "amount" field.
func (m *CoinAccountTransactionMutation) SetAmount(u uint64) {
	m.amount = &u
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *CoinAccountTransactionMutation) Amount() (r uint64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the CoinAccountTransaction entity.
// If the CoinAccountTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountTransactionMutation) OldAmount(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds u to the "amount" field.
func (m *CoinAccountTransactionMutation) AddAmount(u uint64) {
	if m.addamount != nil {
		*m.addamount += u
	} else {
		m.addamount = &u
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *CoinAccountTransactionMutation) AddedAmount() (r uint64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *CoinAccountTransactionMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetMessage sets the "message" field.
func (m *CoinAccountTransactionMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *CoinAccountTransactionMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the CoinAccountTransaction entity.
// If the CoinAccountTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountTransactionMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ResetMessage resets all changes to the "message" field.
func (m *CoinAccountTransactionMutation) ResetMessage() {
	m.message = nil
}

// SetState sets the "state" field.
func (m *CoinAccountTransactionMutation) SetState(c coinaccounttransaction.State) {
	m.state = &c
}

// State returns the value of the "state" field in the mutation.
func (m *CoinAccountTransactionMutation) State() (r coinaccounttransaction.State, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the CoinAccountTransaction entity.
// If the CoinAccountTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountTransactionMutation) OldState(ctx context.Context) (v coinaccounttransaction.State, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *CoinAccountTransactionMutation) ResetState() {
	m.state = nil
}

// SetChainTransactionID sets the "chain_transaction_id" field.
func (m *CoinAccountTransactionMutation) SetChainTransactionID(s string) {
	m.chain_transaction_id = &s
}

// ChainTransactionID returns the value of the "chain_transaction_id" field in the mutation.
func (m *CoinAccountTransactionMutation) ChainTransactionID() (r string, exists bool) {
	v := m.chain_transaction_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChainTransactionID returns the old "chain_transaction_id" field's value of the CoinAccountTransaction entity.
// If the CoinAccountTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountTransactionMutation) OldChainTransactionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldChainTransactionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldChainTransactionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChainTransactionID: %w", err)
	}
	return oldValue.ChainTransactionID, nil
}

// ResetChainTransactionID resets all changes to the "chain_transaction_id" field.
func (m *CoinAccountTransactionMutation) ResetChainTransactionID() {
	m.chain_transaction_id = nil
}

// SetPlatformTransactionID sets the "platform_transaction_id" field.
func (m *CoinAccountTransactionMutation) SetPlatformTransactionID(u uuid.UUID) {
	m.platform_transaction_id = &u
}

// PlatformTransactionID returns the value of the "platform_transaction_id" field in the mutation.
func (m *CoinAccountTransactionMutation) PlatformTransactionID() (r uuid.UUID, exists bool) {
	v := m.platform_transaction_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatformTransactionID returns the old "platform_transaction_id" field's value of the CoinAccountTransaction entity.
// If the CoinAccountTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountTransactionMutation) OldPlatformTransactionID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPlatformTransactionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPlatformTransactionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatformTransactionID: %w", err)
	}
	return oldValue.PlatformTransactionID, nil
}

// ResetPlatformTransactionID resets all changes to the "platform_transaction_id" field.
func (m *CoinAccountTransactionMutation) ResetPlatformTransactionID() {
	m.platform_transaction_id = nil
}

// SetCreateAt sets the "create_at" field.
func (m *CoinAccountTransactionMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *CoinAccountTransactionMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the CoinAccountTransaction entity.
// If the CoinAccountTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountTransactionMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *CoinAccountTransactionMutation) AddCreateAt(u uint32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *CoinAccountTransactionMutation) AddedCreateAt() (r uint32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *CoinAccountTransactionMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *CoinAccountTransactionMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *CoinAccountTransactionMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the CoinAccountTransaction entity.
// If the CoinAccountTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountTransactionMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *CoinAccountTransactionMutation) AddUpdateAt(u uint32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *CoinAccountTransactionMutation) AddedUpdateAt() (r uint32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *CoinAccountTransactionMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *CoinAccountTransactionMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *CoinAccountTransactionMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the CoinAccountTransaction entity.
// If the CoinAccountTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountTransactionMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *CoinAccountTransactionMutation) AddDeleteAt(u uint32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *CoinAccountTransactionMutation) AddedDeleteAt() (r uint32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *CoinAccountTransactionMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the CoinAccountTransactionMutation builder.
func (m *CoinAccountTransactionMutation) Where(ps ...predicate.CoinAccountTransaction) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CoinAccountTransactionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CoinAccountTransaction).
func (m *CoinAccountTransactionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CoinAccountTransactionMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.user_id != nil {
		fields = append(fields, coinaccounttransaction.FieldUserID)
	}
	if m.app_id != nil {
		fields = append(fields, coinaccounttransaction.FieldAppID)
	}
	if m.from_address_id != nil {
		fields = append(fields, coinaccounttransaction.FieldFromAddressID)
	}
	if m.to_address_id != nil {
		fields = append(fields, coinaccounttransaction.FieldToAddressID)
	}
	if m.coin_type_id != nil {
		fields = append(fields, coinaccounttransaction.FieldCoinTypeID)
	}
	if m.amount != nil {
		fields = append(fields, coinaccounttransaction.FieldAmount)
	}
	if m.message != nil {
		fields = append(fields, coinaccounttransaction.FieldMessage)
	}
	if m.state != nil {
		fields = append(fields, coinaccounttransaction.FieldState)
	}
	if m.chain_transaction_id != nil {
		fields = append(fields, coinaccounttransaction.FieldChainTransactionID)
	}
	if m.platform_transaction_id != nil {
		fields = append(fields, coinaccounttransaction.FieldPlatformTransactionID)
	}
	if m.create_at != nil {
		fields = append(fields, coinaccounttransaction.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, coinaccounttransaction.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, coinaccounttransaction.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CoinAccountTransactionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case coinaccounttransaction.FieldUserID:
		return m.UserID()
	case coinaccounttransaction.FieldAppID:
		return m.AppID()
	case coinaccounttransaction.FieldFromAddressID:
		return m.FromAddressID()
	case coinaccounttransaction.FieldToAddressID:
		return m.ToAddressID()
	case coinaccounttransaction.FieldCoinTypeID:
		return m.CoinTypeID()
	case coinaccounttransaction.FieldAmount:
		return m.Amount()
	case coinaccounttransaction.FieldMessage:
		return m.Message()
	case coinaccounttransaction.FieldState:
		return m.State()
	case coinaccounttransaction.FieldChainTransactionID:
		return m.ChainTransactionID()
	case coinaccounttransaction.FieldPlatformTransactionID:
		return m.PlatformTransactionID()
	case coinaccounttransaction.FieldCreateAt:
		return m.CreateAt()
	case coinaccounttransaction.FieldUpdateAt:
		return m.UpdateAt()
	case coinaccounttransaction.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CoinAccountTransactionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case coinaccounttransaction.FieldUserID:
		return m.OldUserID(ctx)
	case coinaccounttransaction.FieldAppID:
		return m.OldAppID(ctx)
	case coinaccounttransaction.FieldFromAddressID:
		return m.OldFromAddressID(ctx)
	case coinaccounttransaction.FieldToAddressID:
		return m.OldToAddressID(ctx)
	case coinaccounttransaction.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case coinaccounttransaction.FieldAmount:
		return m.OldAmount(ctx)
	case coinaccounttransaction.FieldMessage:
		return m.OldMessage(ctx)
	case coinaccounttransaction.FieldState:
		return m.OldState(ctx)
	case coinaccounttransaction.FieldChainTransactionID:
		return m.OldChainTransactionID(ctx)
	case coinaccounttransaction.FieldPlatformTransactionID:
		return m.OldPlatformTransactionID(ctx)
	case coinaccounttransaction.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case coinaccounttransaction.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case coinaccounttransaction.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown CoinAccountTransaction field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinAccountTransactionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case coinaccounttransaction.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case coinaccounttransaction.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case coinaccounttransaction.FieldFromAddressID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFromAddressID(v)
		return nil
	case coinaccounttransaction.FieldToAddressID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToAddressID(v)
		return nil
	case coinaccounttransaction.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case coinaccounttransaction.FieldAmount:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case coinaccounttransaction.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case coinaccounttransaction.FieldState:
		v, ok := value.(coinaccounttransaction.State)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case coinaccounttransaction.FieldChainTransactionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChainTransactionID(v)
		return nil
	case coinaccounttransaction.FieldPlatformTransactionID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatformTransactionID(v)
		return nil
	case coinaccounttransaction.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case coinaccounttransaction.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case coinaccounttransaction.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown CoinAccountTransaction field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CoinAccountTransactionMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, coinaccounttransaction.FieldAmount)
	}
	if m.addcreate_at != nil {
		fields = append(fields, coinaccounttransaction.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, coinaccounttransaction.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, coinaccounttransaction.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CoinAccountTransactionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case coinaccounttransaction.FieldAmount:
		return m.AddedAmount()
	case coinaccounttransaction.FieldCreateAt:
		return m.AddedCreateAt()
	case coinaccounttransaction.FieldUpdateAt:
		return m.AddedUpdateAt()
	case coinaccounttransaction.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinAccountTransactionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case coinaccounttransaction.FieldAmount:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case coinaccounttransaction.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case coinaccounttransaction.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case coinaccounttransaction.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown CoinAccountTransaction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CoinAccountTransactionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CoinAccountTransactionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CoinAccountTransactionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CoinAccountTransaction nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CoinAccountTransactionMutation) ResetField(name string) error {
	switch name {
	case coinaccounttransaction.FieldUserID:
		m.ResetUserID()
		return nil
	case coinaccounttransaction.FieldAppID:
		m.ResetAppID()
		return nil
	case coinaccounttransaction.FieldFromAddressID:
		m.ResetFromAddressID()
		return nil
	case coinaccounttransaction.FieldToAddressID:
		m.ResetToAddressID()
		return nil
	case coinaccounttransaction.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case coinaccounttransaction.FieldAmount:
		m.ResetAmount()
		return nil
	case coinaccounttransaction.FieldMessage:
		m.ResetMessage()
		return nil
	case coinaccounttransaction.FieldState:
		m.ResetState()
		return nil
	case coinaccounttransaction.FieldChainTransactionID:
		m.ResetChainTransactionID()
		return nil
	case coinaccounttransaction.FieldPlatformTransactionID:
		m.ResetPlatformTransactionID()
		return nil
	case coinaccounttransaction.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case coinaccounttransaction.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case coinaccounttransaction.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown CoinAccountTransaction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CoinAccountTransactionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CoinAccountTransactionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CoinAccountTransactionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CoinAccountTransactionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CoinAccountTransactionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CoinAccountTransactionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CoinAccountTransactionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CoinAccountTransaction unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CoinAccountTransactionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CoinAccountTransaction edge %s", name)
}

// PlatformBenefitMutation represents an operation that mutates the PlatformBenefit nodes in the graph.
type PlatformBenefitMutation struct {
	config
	op                        Op
	typ                       string
	id                        *uuid.UUID
	good_id                   *uuid.UUID
	benefit_account_id        *uuid.UUID
	amount                    *uint64
	addamount                 *uint64
	last_benefit_timestamp    *uint32
	addlast_benefit_timestamp *uint32
	chain_transaction_id      *string
	create_at                 *uint32
	addcreate_at              *uint32
	update_at                 *uint32
	addupdate_at              *uint32
	delete_at                 *uint32
	adddelete_at              *uint32
	clearedFields             map[string]struct{}
	done                      bool
	oldValue                  func(context.Context) (*PlatformBenefit, error)
	predicates                []predicate.PlatformBenefit
}

var _ ent.Mutation = (*PlatformBenefitMutation)(nil)

// platformbenefitOption allows management of the mutation configuration using functional options.
type platformbenefitOption func(*PlatformBenefitMutation)

// newPlatformBenefitMutation creates new mutation for the PlatformBenefit entity.
func newPlatformBenefitMutation(c config, op Op, opts ...platformbenefitOption) *PlatformBenefitMutation {
	m := &PlatformBenefitMutation{
		config:        c,
		op:            op,
		typ:           TypePlatformBenefit,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPlatformBenefitID sets the ID field of the mutation.
func withPlatformBenefitID(id uuid.UUID) platformbenefitOption {
	return func(m *PlatformBenefitMutation) {
		var (
			err   error
			once  sync.Once
			value *PlatformBenefit
		)
		m.oldValue = func(ctx context.Context) (*PlatformBenefit, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PlatformBenefit.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPlatformBenefit sets the old PlatformBenefit of the mutation.
func withPlatformBenefit(node *PlatformBenefit) platformbenefitOption {
	return func(m *PlatformBenefitMutation) {
		m.oldValue = func(context.Context) (*PlatformBenefit, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PlatformBenefitMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PlatformBenefitMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PlatformBenefit entities.
func (m *PlatformBenefitMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PlatformBenefitMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetGoodID sets the "good_id" field.
func (m *PlatformBenefitMutation) SetGoodID(u uuid.UUID) {
	m.good_id = &u
}

// GoodID returns the value of the "good_id" field in the mutation.
func (m *PlatformBenefitMutation) GoodID() (r uuid.UUID, exists bool) {
	v := m.good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodID returns the old "good_id" field's value of the PlatformBenefit entity.
// If the PlatformBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformBenefitMutation) OldGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodID: %w", err)
	}
	return oldValue.GoodID, nil
}

// ResetGoodID resets all changes to the "good_id" field.
func (m *PlatformBenefitMutation) ResetGoodID() {
	m.good_id = nil
}

// SetBenefitAccountID sets the "benefit_account_id" field.
func (m *PlatformBenefitMutation) SetBenefitAccountID(u uuid.UUID) {
	m.benefit_account_id = &u
}

// BenefitAccountID returns the value of the "benefit_account_id" field in the mutation.
func (m *PlatformBenefitMutation) BenefitAccountID() (r uuid.UUID, exists bool) {
	v := m.benefit_account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldBenefitAccountID returns the old "benefit_account_id" field's value of the PlatformBenefit entity.
// If the PlatformBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformBenefitMutation) OldBenefitAccountID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBenefitAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBenefitAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBenefitAccountID: %w", err)
	}
	return oldValue.BenefitAccountID, nil
}

// ResetBenefitAccountID resets all changes to the "benefit_account_id" field.
func (m *PlatformBenefitMutation) ResetBenefitAccountID() {
	m.benefit_account_id = nil
}

// SetAmount sets the "amount" field.
func (m *PlatformBenefitMutation) SetAmount(u uint64) {
	m.amount = &u
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *PlatformBenefitMutation) Amount() (r uint64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the PlatformBenefit entity.
// If the PlatformBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformBenefitMutation) OldAmount(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds u to the "amount" field.
func (m *PlatformBenefitMutation) AddAmount(u uint64) {
	if m.addamount != nil {
		*m.addamount += u
	} else {
		m.addamount = &u
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *PlatformBenefitMutation) AddedAmount() (r uint64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *PlatformBenefitMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetLastBenefitTimestamp sets the "last_benefit_timestamp" field.
func (m *PlatformBenefitMutation) SetLastBenefitTimestamp(u uint32) {
	m.last_benefit_timestamp = &u
	m.addlast_benefit_timestamp = nil
}

// LastBenefitTimestamp returns the value of the "last_benefit_timestamp" field in the mutation.
func (m *PlatformBenefitMutation) LastBenefitTimestamp() (r uint32, exists bool) {
	v := m.last_benefit_timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldLastBenefitTimestamp returns the old "last_benefit_timestamp" field's value of the PlatformBenefit entity.
// If the PlatformBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformBenefitMutation) OldLastBenefitTimestamp(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLastBenefitTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLastBenefitTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastBenefitTimestamp: %w", err)
	}
	return oldValue.LastBenefitTimestamp, nil
}

// AddLastBenefitTimestamp adds u to the "last_benefit_timestamp" field.
func (m *PlatformBenefitMutation) AddLastBenefitTimestamp(u uint32) {
	if m.addlast_benefit_timestamp != nil {
		*m.addlast_benefit_timestamp += u
	} else {
		m.addlast_benefit_timestamp = &u
	}
}

// AddedLastBenefitTimestamp returns the value that was added to the "last_benefit_timestamp" field in this mutation.
func (m *PlatformBenefitMutation) AddedLastBenefitTimestamp() (r uint32, exists bool) {
	v := m.addlast_benefit_timestamp
	if v == nil {
		return
	}
	return *v, true
}

// ResetLastBenefitTimestamp resets all changes to the "last_benefit_timestamp" field.
func (m *PlatformBenefitMutation) ResetLastBenefitTimestamp() {
	m.last_benefit_timestamp = nil
	m.addlast_benefit_timestamp = nil
}

// SetChainTransactionID sets the "chain_transaction_id" field.
func (m *PlatformBenefitMutation) SetChainTransactionID(s string) {
	m.chain_transaction_id = &s
}

// ChainTransactionID returns the value of the "chain_transaction_id" field in the mutation.
func (m *PlatformBenefitMutation) ChainTransactionID() (r string, exists bool) {
	v := m.chain_transaction_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChainTransactionID returns the old "chain_transaction_id" field's value of the PlatformBenefit entity.
// If the PlatformBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformBenefitMutation) OldChainTransactionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldChainTransactionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldChainTransactionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChainTransactionID: %w", err)
	}
	return oldValue.ChainTransactionID, nil
}

// ResetChainTransactionID resets all changes to the "chain_transaction_id" field.
func (m *PlatformBenefitMutation) ResetChainTransactionID() {
	m.chain_transaction_id = nil
}

// SetCreateAt sets the "create_at" field.
func (m *PlatformBenefitMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *PlatformBenefitMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the PlatformBenefit entity.
// If the PlatformBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformBenefitMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *PlatformBenefitMutation) AddCreateAt(u uint32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *PlatformBenefitMutation) AddedCreateAt() (r uint32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *PlatformBenefitMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *PlatformBenefitMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *PlatformBenefitMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the PlatformBenefit entity.
// If the PlatformBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformBenefitMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *PlatformBenefitMutation) AddUpdateAt(u uint32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *PlatformBenefitMutation) AddedUpdateAt() (r uint32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *PlatformBenefitMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *PlatformBenefitMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *PlatformBenefitMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the PlatformBenefit entity.
// If the PlatformBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformBenefitMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *PlatformBenefitMutation) AddDeleteAt(u uint32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *PlatformBenefitMutation) AddedDeleteAt() (r uint32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *PlatformBenefitMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the PlatformBenefitMutation builder.
func (m *PlatformBenefitMutation) Where(ps ...predicate.PlatformBenefit) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PlatformBenefitMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (PlatformBenefit).
func (m *PlatformBenefitMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PlatformBenefitMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.good_id != nil {
		fields = append(fields, platformbenefit.FieldGoodID)
	}
	if m.benefit_account_id != nil {
		fields = append(fields, platformbenefit.FieldBenefitAccountID)
	}
	if m.amount != nil {
		fields = append(fields, platformbenefit.FieldAmount)
	}
	if m.last_benefit_timestamp != nil {
		fields = append(fields, platformbenefit.FieldLastBenefitTimestamp)
	}
	if m.chain_transaction_id != nil {
		fields = append(fields, platformbenefit.FieldChainTransactionID)
	}
	if m.create_at != nil {
		fields = append(fields, platformbenefit.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, platformbenefit.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, platformbenefit.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PlatformBenefitMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case platformbenefit.FieldGoodID:
		return m.GoodID()
	case platformbenefit.FieldBenefitAccountID:
		return m.BenefitAccountID()
	case platformbenefit.FieldAmount:
		return m.Amount()
	case platformbenefit.FieldLastBenefitTimestamp:
		return m.LastBenefitTimestamp()
	case platformbenefit.FieldChainTransactionID:
		return m.ChainTransactionID()
	case platformbenefit.FieldCreateAt:
		return m.CreateAt()
	case platformbenefit.FieldUpdateAt:
		return m.UpdateAt()
	case platformbenefit.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PlatformBenefitMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case platformbenefit.FieldGoodID:
		return m.OldGoodID(ctx)
	case platformbenefit.FieldBenefitAccountID:
		return m.OldBenefitAccountID(ctx)
	case platformbenefit.FieldAmount:
		return m.OldAmount(ctx)
	case platformbenefit.FieldLastBenefitTimestamp:
		return m.OldLastBenefitTimestamp(ctx)
	case platformbenefit.FieldChainTransactionID:
		return m.OldChainTransactionID(ctx)
	case platformbenefit.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case platformbenefit.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case platformbenefit.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown PlatformBenefit field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlatformBenefitMutation) SetField(name string, value ent.Value) error {
	switch name {
	case platformbenefit.FieldGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodID(v)
		return nil
	case platformbenefit.FieldBenefitAccountID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBenefitAccountID(v)
		return nil
	case platformbenefit.FieldAmount:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case platformbenefit.FieldLastBenefitTimestamp:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastBenefitTimestamp(v)
		return nil
	case platformbenefit.FieldChainTransactionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChainTransactionID(v)
		return nil
	case platformbenefit.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case platformbenefit.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case platformbenefit.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown PlatformBenefit field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PlatformBenefitMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, platformbenefit.FieldAmount)
	}
	if m.addlast_benefit_timestamp != nil {
		fields = append(fields, platformbenefit.FieldLastBenefitTimestamp)
	}
	if m.addcreate_at != nil {
		fields = append(fields, platformbenefit.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, platformbenefit.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, platformbenefit.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PlatformBenefitMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case platformbenefit.FieldAmount:
		return m.AddedAmount()
	case platformbenefit.FieldLastBenefitTimestamp:
		return m.AddedLastBenefitTimestamp()
	case platformbenefit.FieldCreateAt:
		return m.AddedCreateAt()
	case platformbenefit.FieldUpdateAt:
		return m.AddedUpdateAt()
	case platformbenefit.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlatformBenefitMutation) AddField(name string, value ent.Value) error {
	switch name {
	case platformbenefit.FieldAmount:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case platformbenefit.FieldLastBenefitTimestamp:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLastBenefitTimestamp(v)
		return nil
	case platformbenefit.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case platformbenefit.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case platformbenefit.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown PlatformBenefit numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PlatformBenefitMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PlatformBenefitMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PlatformBenefitMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PlatformBenefit nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PlatformBenefitMutation) ResetField(name string) error {
	switch name {
	case platformbenefit.FieldGoodID:
		m.ResetGoodID()
		return nil
	case platformbenefit.FieldBenefitAccountID:
		m.ResetBenefitAccountID()
		return nil
	case platformbenefit.FieldAmount:
		m.ResetAmount()
		return nil
	case platformbenefit.FieldLastBenefitTimestamp:
		m.ResetLastBenefitTimestamp()
		return nil
	case platformbenefit.FieldChainTransactionID:
		m.ResetChainTransactionID()
		return nil
	case platformbenefit.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case platformbenefit.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case platformbenefit.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown PlatformBenefit field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PlatformBenefitMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PlatformBenefitMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PlatformBenefitMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PlatformBenefitMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PlatformBenefitMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PlatformBenefitMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PlatformBenefitMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown PlatformBenefit unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PlatformBenefitMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown PlatformBenefit edge %s", name)
}

// PlatformSettingMutation represents an operation that mutates the PlatformSetting nodes in the graph.
type PlatformSettingMutation struct {
	config
	op                          Op
	typ                         string
	id                          *uuid.UUID
	good_id                     *uuid.UUID
	benefit_account_id          *uuid.UUID
	platform_offline_account_id *uuid.UUID
	user_online_account_id      *uuid.UUID
	user_offline_account_id     *uuid.UUID
	benefit_interval_hours      *int32
	addbenefit_interval_hours   *int32
	create_at                   *uint32
	addcreate_at                *uint32
	update_at                   *uint32
	addupdate_at                *uint32
	delete_at                   *uint32
	adddelete_at                *uint32
	clearedFields               map[string]struct{}
	done                        bool
	oldValue                    func(context.Context) (*PlatformSetting, error)
	predicates                  []predicate.PlatformSetting
}

var _ ent.Mutation = (*PlatformSettingMutation)(nil)

// platformsettingOption allows management of the mutation configuration using functional options.
type platformsettingOption func(*PlatformSettingMutation)

// newPlatformSettingMutation creates new mutation for the PlatformSetting entity.
func newPlatformSettingMutation(c config, op Op, opts ...platformsettingOption) *PlatformSettingMutation {
	m := &PlatformSettingMutation{
		config:        c,
		op:            op,
		typ:           TypePlatformSetting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPlatformSettingID sets the ID field of the mutation.
func withPlatformSettingID(id uuid.UUID) platformsettingOption {
	return func(m *PlatformSettingMutation) {
		var (
			err   error
			once  sync.Once
			value *PlatformSetting
		)
		m.oldValue = func(ctx context.Context) (*PlatformSetting, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PlatformSetting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPlatformSetting sets the old PlatformSetting of the mutation.
func withPlatformSetting(node *PlatformSetting) platformsettingOption {
	return func(m *PlatformSettingMutation) {
		m.oldValue = func(context.Context) (*PlatformSetting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PlatformSettingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PlatformSettingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PlatformSetting entities.
func (m *PlatformSettingMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PlatformSettingMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetGoodID sets the "good_id" field.
func (m *PlatformSettingMutation) SetGoodID(u uuid.UUID) {
	m.good_id = &u
}

// GoodID returns the value of the "good_id" field in the mutation.
func (m *PlatformSettingMutation) GoodID() (r uuid.UUID, exists bool) {
	v := m.good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodID returns the old "good_id" field's value of the PlatformSetting entity.
// If the PlatformSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformSettingMutation) OldGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodID: %w", err)
	}
	return oldValue.GoodID, nil
}

// ResetGoodID resets all changes to the "good_id" field.
func (m *PlatformSettingMutation) ResetGoodID() {
	m.good_id = nil
}

// SetBenefitAccountID sets the "benefit_account_id" field.
func (m *PlatformSettingMutation) SetBenefitAccountID(u uuid.UUID) {
	m.benefit_account_id = &u
}

// BenefitAccountID returns the value of the "benefit_account_id" field in the mutation.
func (m *PlatformSettingMutation) BenefitAccountID() (r uuid.UUID, exists bool) {
	v := m.benefit_account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldBenefitAccountID returns the old "benefit_account_id" field's value of the PlatformSetting entity.
// If the PlatformSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformSettingMutation) OldBenefitAccountID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBenefitAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBenefitAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBenefitAccountID: %w", err)
	}
	return oldValue.BenefitAccountID, nil
}

// ResetBenefitAccountID resets all changes to the "benefit_account_id" field.
func (m *PlatformSettingMutation) ResetBenefitAccountID() {
	m.benefit_account_id = nil
}

// SetPlatformOfflineAccountID sets the "platform_offline_account_id" field.
func (m *PlatformSettingMutation) SetPlatformOfflineAccountID(u uuid.UUID) {
	m.platform_offline_account_id = &u
}

// PlatformOfflineAccountID returns the value of the "platform_offline_account_id" field in the mutation.
func (m *PlatformSettingMutation) PlatformOfflineAccountID() (r uuid.UUID, exists bool) {
	v := m.platform_offline_account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatformOfflineAccountID returns the old "platform_offline_account_id" field's value of the PlatformSetting entity.
// If the PlatformSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformSettingMutation) OldPlatformOfflineAccountID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPlatformOfflineAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPlatformOfflineAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatformOfflineAccountID: %w", err)
	}
	return oldValue.PlatformOfflineAccountID, nil
}

// ResetPlatformOfflineAccountID resets all changes to the "platform_offline_account_id" field.
func (m *PlatformSettingMutation) ResetPlatformOfflineAccountID() {
	m.platform_offline_account_id = nil
}

// SetUserOnlineAccountID sets the "user_online_account_id" field.
func (m *PlatformSettingMutation) SetUserOnlineAccountID(u uuid.UUID) {
	m.user_online_account_id = &u
}

// UserOnlineAccountID returns the value of the "user_online_account_id" field in the mutation.
func (m *PlatformSettingMutation) UserOnlineAccountID() (r uuid.UUID, exists bool) {
	v := m.user_online_account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserOnlineAccountID returns the old "user_online_account_id" field's value of the PlatformSetting entity.
// If the PlatformSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformSettingMutation) OldUserOnlineAccountID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserOnlineAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserOnlineAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserOnlineAccountID: %w", err)
	}
	return oldValue.UserOnlineAccountID, nil
}

// ResetUserOnlineAccountID resets all changes to the "user_online_account_id" field.
func (m *PlatformSettingMutation) ResetUserOnlineAccountID() {
	m.user_online_account_id = nil
}

// SetUserOfflineAccountID sets the "user_offline_account_id" field.
func (m *PlatformSettingMutation) SetUserOfflineAccountID(u uuid.UUID) {
	m.user_offline_account_id = &u
}

// UserOfflineAccountID returns the value of the "user_offline_account_id" field in the mutation.
func (m *PlatformSettingMutation) UserOfflineAccountID() (r uuid.UUID, exists bool) {
	v := m.user_offline_account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserOfflineAccountID returns the old "user_offline_account_id" field's value of the PlatformSetting entity.
// If the PlatformSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformSettingMutation) OldUserOfflineAccountID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserOfflineAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserOfflineAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserOfflineAccountID: %w", err)
	}
	return oldValue.UserOfflineAccountID, nil
}

// ResetUserOfflineAccountID resets all changes to the "user_offline_account_id" field.
func (m *PlatformSettingMutation) ResetUserOfflineAccountID() {
	m.user_offline_account_id = nil
}

// SetBenefitIntervalHours sets the "benefit_interval_hours" field.
func (m *PlatformSettingMutation) SetBenefitIntervalHours(i int32) {
	m.benefit_interval_hours = &i
	m.addbenefit_interval_hours = nil
}

// BenefitIntervalHours returns the value of the "benefit_interval_hours" field in the mutation.
func (m *PlatformSettingMutation) BenefitIntervalHours() (r int32, exists bool) {
	v := m.benefit_interval_hours
	if v == nil {
		return
	}
	return *v, true
}

// OldBenefitIntervalHours returns the old "benefit_interval_hours" field's value of the PlatformSetting entity.
// If the PlatformSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformSettingMutation) OldBenefitIntervalHours(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBenefitIntervalHours is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBenefitIntervalHours requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBenefitIntervalHours: %w", err)
	}
	return oldValue.BenefitIntervalHours, nil
}

// AddBenefitIntervalHours adds i to the "benefit_interval_hours" field.
func (m *PlatformSettingMutation) AddBenefitIntervalHours(i int32) {
	if m.addbenefit_interval_hours != nil {
		*m.addbenefit_interval_hours += i
	} else {
		m.addbenefit_interval_hours = &i
	}
}

// AddedBenefitIntervalHours returns the value that was added to the "benefit_interval_hours" field in this mutation.
func (m *PlatformSettingMutation) AddedBenefitIntervalHours() (r int32, exists bool) {
	v := m.addbenefit_interval_hours
	if v == nil {
		return
	}
	return *v, true
}

// ResetBenefitIntervalHours resets all changes to the "benefit_interval_hours" field.
func (m *PlatformSettingMutation) ResetBenefitIntervalHours() {
	m.benefit_interval_hours = nil
	m.addbenefit_interval_hours = nil
}

// SetCreateAt sets the "create_at" field.
func (m *PlatformSettingMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *PlatformSettingMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the PlatformSetting entity.
// If the PlatformSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformSettingMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *PlatformSettingMutation) AddCreateAt(u uint32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *PlatformSettingMutation) AddedCreateAt() (r uint32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *PlatformSettingMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *PlatformSettingMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *PlatformSettingMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the PlatformSetting entity.
// If the PlatformSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformSettingMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *PlatformSettingMutation) AddUpdateAt(u uint32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *PlatformSettingMutation) AddedUpdateAt() (r uint32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *PlatformSettingMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *PlatformSettingMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *PlatformSettingMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the PlatformSetting entity.
// If the PlatformSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformSettingMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *PlatformSettingMutation) AddDeleteAt(u uint32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *PlatformSettingMutation) AddedDeleteAt() (r uint32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *PlatformSettingMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the PlatformSettingMutation builder.
func (m *PlatformSettingMutation) Where(ps ...predicate.PlatformSetting) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PlatformSettingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (PlatformSetting).
func (m *PlatformSettingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PlatformSettingMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.good_id != nil {
		fields = append(fields, platformsetting.FieldGoodID)
	}
	if m.benefit_account_id != nil {
		fields = append(fields, platformsetting.FieldBenefitAccountID)
	}
	if m.platform_offline_account_id != nil {
		fields = append(fields, platformsetting.FieldPlatformOfflineAccountID)
	}
	if m.user_online_account_id != nil {
		fields = append(fields, platformsetting.FieldUserOnlineAccountID)
	}
	if m.user_offline_account_id != nil {
		fields = append(fields, platformsetting.FieldUserOfflineAccountID)
	}
	if m.benefit_interval_hours != nil {
		fields = append(fields, platformsetting.FieldBenefitIntervalHours)
	}
	if m.create_at != nil {
		fields = append(fields, platformsetting.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, platformsetting.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, platformsetting.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PlatformSettingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case platformsetting.FieldGoodID:
		return m.GoodID()
	case platformsetting.FieldBenefitAccountID:
		return m.BenefitAccountID()
	case platformsetting.FieldPlatformOfflineAccountID:
		return m.PlatformOfflineAccountID()
	case platformsetting.FieldUserOnlineAccountID:
		return m.UserOnlineAccountID()
	case platformsetting.FieldUserOfflineAccountID:
		return m.UserOfflineAccountID()
	case platformsetting.FieldBenefitIntervalHours:
		return m.BenefitIntervalHours()
	case platformsetting.FieldCreateAt:
		return m.CreateAt()
	case platformsetting.FieldUpdateAt:
		return m.UpdateAt()
	case platformsetting.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PlatformSettingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case platformsetting.FieldGoodID:
		return m.OldGoodID(ctx)
	case platformsetting.FieldBenefitAccountID:
		return m.OldBenefitAccountID(ctx)
	case platformsetting.FieldPlatformOfflineAccountID:
		return m.OldPlatformOfflineAccountID(ctx)
	case platformsetting.FieldUserOnlineAccountID:
		return m.OldUserOnlineAccountID(ctx)
	case platformsetting.FieldUserOfflineAccountID:
		return m.OldUserOfflineAccountID(ctx)
	case platformsetting.FieldBenefitIntervalHours:
		return m.OldBenefitIntervalHours(ctx)
	case platformsetting.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case platformsetting.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case platformsetting.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown PlatformSetting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlatformSettingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case platformsetting.FieldGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodID(v)
		return nil
	case platformsetting.FieldBenefitAccountID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBenefitAccountID(v)
		return nil
	case platformsetting.FieldPlatformOfflineAccountID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatformOfflineAccountID(v)
		return nil
	case platformsetting.FieldUserOnlineAccountID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserOnlineAccountID(v)
		return nil
	case platformsetting.FieldUserOfflineAccountID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserOfflineAccountID(v)
		return nil
	case platformsetting.FieldBenefitIntervalHours:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBenefitIntervalHours(v)
		return nil
	case platformsetting.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case platformsetting.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case platformsetting.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown PlatformSetting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PlatformSettingMutation) AddedFields() []string {
	var fields []string
	if m.addbenefit_interval_hours != nil {
		fields = append(fields, platformsetting.FieldBenefitIntervalHours)
	}
	if m.addcreate_at != nil {
		fields = append(fields, platformsetting.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, platformsetting.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, platformsetting.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PlatformSettingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case platformsetting.FieldBenefitIntervalHours:
		return m.AddedBenefitIntervalHours()
	case platformsetting.FieldCreateAt:
		return m.AddedCreateAt()
	case platformsetting.FieldUpdateAt:
		return m.AddedUpdateAt()
	case platformsetting.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlatformSettingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case platformsetting.FieldBenefitIntervalHours:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBenefitIntervalHours(v)
		return nil
	case platformsetting.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case platformsetting.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case platformsetting.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown PlatformSetting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PlatformSettingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PlatformSettingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PlatformSettingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PlatformSetting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PlatformSettingMutation) ResetField(name string) error {
	switch name {
	case platformsetting.FieldGoodID:
		m.ResetGoodID()
		return nil
	case platformsetting.FieldBenefitAccountID:
		m.ResetBenefitAccountID()
		return nil
	case platformsetting.FieldPlatformOfflineAccountID:
		m.ResetPlatformOfflineAccountID()
		return nil
	case platformsetting.FieldUserOnlineAccountID:
		m.ResetUserOnlineAccountID()
		return nil
	case platformsetting.FieldUserOfflineAccountID:
		m.ResetUserOfflineAccountID()
		return nil
	case platformsetting.FieldBenefitIntervalHours:
		m.ResetBenefitIntervalHours()
		return nil
	case platformsetting.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case platformsetting.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case platformsetting.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown PlatformSetting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PlatformSettingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PlatformSettingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PlatformSettingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PlatformSettingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PlatformSettingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PlatformSettingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PlatformSettingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown PlatformSetting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PlatformSettingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown PlatformSetting edge %s", name)
}

// UserBenefitMutation represents an operation that mutates the UserBenefit nodes in the graph.
type UserBenefitMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	good_id       *uuid.UUID
	app_id        *uuid.UUID
	user_id       *uuid.UUID
	order_id      *uuid.UUID
	amount        *uint64
	addamount     *uint64
	create_at     *uint32
	addcreate_at  *uint32
	update_at     *uint32
	addupdate_at  *uint32
	delete_at     *uint32
	adddelete_at  *uint32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*UserBenefit, error)
	predicates    []predicate.UserBenefit
}

var _ ent.Mutation = (*UserBenefitMutation)(nil)

// userbenefitOption allows management of the mutation configuration using functional options.
type userbenefitOption func(*UserBenefitMutation)

// newUserBenefitMutation creates new mutation for the UserBenefit entity.
func newUserBenefitMutation(c config, op Op, opts ...userbenefitOption) *UserBenefitMutation {
	m := &UserBenefitMutation{
		config:        c,
		op:            op,
		typ:           TypeUserBenefit,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserBenefitID sets the ID field of the mutation.
func withUserBenefitID(id uuid.UUID) userbenefitOption {
	return func(m *UserBenefitMutation) {
		var (
			err   error
			once  sync.Once
			value *UserBenefit
		)
		m.oldValue = func(ctx context.Context) (*UserBenefit, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserBenefit.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserBenefit sets the old UserBenefit of the mutation.
func withUserBenefit(node *UserBenefit) userbenefitOption {
	return func(m *UserBenefitMutation) {
		m.oldValue = func(context.Context) (*UserBenefit, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserBenefitMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserBenefitMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserBenefit entities.
func (m *UserBenefitMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserBenefitMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetGoodID sets the "good_id" field.
func (m *UserBenefitMutation) SetGoodID(u uuid.UUID) {
	m.good_id = &u
}

// GoodID returns the value of the "good_id" field in the mutation.
func (m *UserBenefitMutation) GoodID() (r uuid.UUID, exists bool) {
	v := m.good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodID returns the old "good_id" field's value of the UserBenefit entity.
// If the UserBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserBenefitMutation) OldGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodID: %w", err)
	}
	return oldValue.GoodID, nil
}

// ResetGoodID resets all changes to the "good_id" field.
func (m *UserBenefitMutation) ResetGoodID() {
	m.good_id = nil
}

// SetAppID sets the "app_id" field.
func (m *UserBenefitMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *UserBenefitMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the UserBenefit entity.
// If the UserBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserBenefitMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *UserBenefitMutation) ResetAppID() {
	m.app_id = nil
}

// SetUserID sets the "user_id" field.
func (m *UserBenefitMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserBenefitMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserBenefit entity.
// If the UserBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserBenefitMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserBenefitMutation) ResetUserID() {
	m.user_id = nil
}

// SetOrderID sets the "order_id" field.
func (m *UserBenefitMutation) SetOrderID(u uuid.UUID) {
	m.order_id = &u
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *UserBenefitMutation) OrderID() (r uuid.UUID, exists bool) {
	v := m.order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the UserBenefit entity.
// If the UserBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserBenefitMutation) OldOrderID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *UserBenefitMutation) ResetOrderID() {
	m.order_id = nil
}

// SetAmount sets the "amount" field.
func (m *UserBenefitMutation) SetAmount(u uint64) {
	m.amount = &u
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *UserBenefitMutation) Amount() (r uint64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the UserBenefit entity.
// If the UserBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserBenefitMutation) OldAmount(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds u to the "amount" field.
func (m *UserBenefitMutation) AddAmount(u uint64) {
	if m.addamount != nil {
		*m.addamount += u
	} else {
		m.addamount = &u
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *UserBenefitMutation) AddedAmount() (r uint64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *UserBenefitMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetCreateAt sets the "create_at" field.
func (m *UserBenefitMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *UserBenefitMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the UserBenefit entity.
// If the UserBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserBenefitMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *UserBenefitMutation) AddCreateAt(u uint32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *UserBenefitMutation) AddedCreateAt() (r uint32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *UserBenefitMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *UserBenefitMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *UserBenefitMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the UserBenefit entity.
// If the UserBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserBenefitMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *UserBenefitMutation) AddUpdateAt(u uint32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *UserBenefitMutation) AddedUpdateAt() (r uint32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *UserBenefitMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *UserBenefitMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *UserBenefitMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the UserBenefit entity.
// If the UserBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserBenefitMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *UserBenefitMutation) AddDeleteAt(u uint32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *UserBenefitMutation) AddedDeleteAt() (r uint32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *UserBenefitMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the UserBenefitMutation builder.
func (m *UserBenefitMutation) Where(ps ...predicate.UserBenefit) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserBenefitMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserBenefit).
func (m *UserBenefitMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserBenefitMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.good_id != nil {
		fields = append(fields, userbenefit.FieldGoodID)
	}
	if m.app_id != nil {
		fields = append(fields, userbenefit.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, userbenefit.FieldUserID)
	}
	if m.order_id != nil {
		fields = append(fields, userbenefit.FieldOrderID)
	}
	if m.amount != nil {
		fields = append(fields, userbenefit.FieldAmount)
	}
	if m.create_at != nil {
		fields = append(fields, userbenefit.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, userbenefit.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, userbenefit.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserBenefitMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userbenefit.FieldGoodID:
		return m.GoodID()
	case userbenefit.FieldAppID:
		return m.AppID()
	case userbenefit.FieldUserID:
		return m.UserID()
	case userbenefit.FieldOrderID:
		return m.OrderID()
	case userbenefit.FieldAmount:
		return m.Amount()
	case userbenefit.FieldCreateAt:
		return m.CreateAt()
	case userbenefit.FieldUpdateAt:
		return m.UpdateAt()
	case userbenefit.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserBenefitMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userbenefit.FieldGoodID:
		return m.OldGoodID(ctx)
	case userbenefit.FieldAppID:
		return m.OldAppID(ctx)
	case userbenefit.FieldUserID:
		return m.OldUserID(ctx)
	case userbenefit.FieldOrderID:
		return m.OldOrderID(ctx)
	case userbenefit.FieldAmount:
		return m.OldAmount(ctx)
	case userbenefit.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case userbenefit.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case userbenefit.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown UserBenefit field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserBenefitMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userbenefit.FieldGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodID(v)
		return nil
	case userbenefit.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case userbenefit.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case userbenefit.FieldOrderID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	case userbenefit.FieldAmount:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case userbenefit.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case userbenefit.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case userbenefit.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserBenefit field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserBenefitMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, userbenefit.FieldAmount)
	}
	if m.addcreate_at != nil {
		fields = append(fields, userbenefit.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, userbenefit.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, userbenefit.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserBenefitMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userbenefit.FieldAmount:
		return m.AddedAmount()
	case userbenefit.FieldCreateAt:
		return m.AddedCreateAt()
	case userbenefit.FieldUpdateAt:
		return m.AddedUpdateAt()
	case userbenefit.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserBenefitMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userbenefit.FieldAmount:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case userbenefit.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case userbenefit.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case userbenefit.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserBenefit numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserBenefitMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserBenefitMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserBenefitMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserBenefit nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserBenefitMutation) ResetField(name string) error {
	switch name {
	case userbenefit.FieldGoodID:
		m.ResetGoodID()
		return nil
	case userbenefit.FieldAppID:
		m.ResetAppID()
		return nil
	case userbenefit.FieldUserID:
		m.ResetUserID()
		return nil
	case userbenefit.FieldOrderID:
		m.ResetOrderID()
		return nil
	case userbenefit.FieldAmount:
		m.ResetAmount()
		return nil
	case userbenefit.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case userbenefit.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case userbenefit.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown UserBenefit field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserBenefitMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserBenefitMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserBenefitMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserBenefitMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserBenefitMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserBenefitMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserBenefitMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserBenefit unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserBenefitMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserBenefit edge %s", name)
}
