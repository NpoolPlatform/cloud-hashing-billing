// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/appwithdrawsetting"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// AppWithdrawSettingUpdate is the builder for updating AppWithdrawSetting entities.
type AppWithdrawSettingUpdate struct {
	config
	hooks    []Hook
	mutation *AppWithdrawSettingMutation
}

// Where appends a list predicates to the AppWithdrawSettingUpdate builder.
func (awsu *AppWithdrawSettingUpdate) Where(ps ...predicate.AppWithdrawSetting) *AppWithdrawSettingUpdate {
	awsu.mutation.Where(ps...)
	return awsu
}

// SetAppID sets the "app_id" field.
func (awsu *AppWithdrawSettingUpdate) SetAppID(u uuid.UUID) *AppWithdrawSettingUpdate {
	awsu.mutation.SetAppID(u)
	return awsu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (awsu *AppWithdrawSettingUpdate) SetCoinTypeID(u uuid.UUID) *AppWithdrawSettingUpdate {
	awsu.mutation.SetCoinTypeID(u)
	return awsu
}

// SetWithdrawAutoReviewCoinAmount sets the "withdraw_auto_review_coin_amount" field.
func (awsu *AppWithdrawSettingUpdate) SetWithdrawAutoReviewCoinAmount(u uint64) *AppWithdrawSettingUpdate {
	awsu.mutation.ResetWithdrawAutoReviewCoinAmount()
	awsu.mutation.SetWithdrawAutoReviewCoinAmount(u)
	return awsu
}

// AddWithdrawAutoReviewCoinAmount adds u to the "withdraw_auto_review_coin_amount" field.
func (awsu *AppWithdrawSettingUpdate) AddWithdrawAutoReviewCoinAmount(u int64) *AppWithdrawSettingUpdate {
	awsu.mutation.AddWithdrawAutoReviewCoinAmount(u)
	return awsu
}

// SetCreateAt sets the "create_at" field.
func (awsu *AppWithdrawSettingUpdate) SetCreateAt(u uint32) *AppWithdrawSettingUpdate {
	awsu.mutation.ResetCreateAt()
	awsu.mutation.SetCreateAt(u)
	return awsu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (awsu *AppWithdrawSettingUpdate) SetNillableCreateAt(u *uint32) *AppWithdrawSettingUpdate {
	if u != nil {
		awsu.SetCreateAt(*u)
	}
	return awsu
}

// AddCreateAt adds u to the "create_at" field.
func (awsu *AppWithdrawSettingUpdate) AddCreateAt(u int32) *AppWithdrawSettingUpdate {
	awsu.mutation.AddCreateAt(u)
	return awsu
}

// SetUpdateAt sets the "update_at" field.
func (awsu *AppWithdrawSettingUpdate) SetUpdateAt(u uint32) *AppWithdrawSettingUpdate {
	awsu.mutation.ResetUpdateAt()
	awsu.mutation.SetUpdateAt(u)
	return awsu
}

// AddUpdateAt adds u to the "update_at" field.
func (awsu *AppWithdrawSettingUpdate) AddUpdateAt(u int32) *AppWithdrawSettingUpdate {
	awsu.mutation.AddUpdateAt(u)
	return awsu
}

// SetDeleteAt sets the "delete_at" field.
func (awsu *AppWithdrawSettingUpdate) SetDeleteAt(u uint32) *AppWithdrawSettingUpdate {
	awsu.mutation.ResetDeleteAt()
	awsu.mutation.SetDeleteAt(u)
	return awsu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (awsu *AppWithdrawSettingUpdate) SetNillableDeleteAt(u *uint32) *AppWithdrawSettingUpdate {
	if u != nil {
		awsu.SetDeleteAt(*u)
	}
	return awsu
}

// AddDeleteAt adds u to the "delete_at" field.
func (awsu *AppWithdrawSettingUpdate) AddDeleteAt(u int32) *AppWithdrawSettingUpdate {
	awsu.mutation.AddDeleteAt(u)
	return awsu
}

// Mutation returns the AppWithdrawSettingMutation object of the builder.
func (awsu *AppWithdrawSettingUpdate) Mutation() *AppWithdrawSettingMutation {
	return awsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (awsu *AppWithdrawSettingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	awsu.defaults()
	if len(awsu.hooks) == 0 {
		affected, err = awsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppWithdrawSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			awsu.mutation = mutation
			affected, err = awsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(awsu.hooks) - 1; i >= 0; i-- {
			if awsu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = awsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, awsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (awsu *AppWithdrawSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := awsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (awsu *AppWithdrawSettingUpdate) Exec(ctx context.Context) error {
	_, err := awsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (awsu *AppWithdrawSettingUpdate) ExecX(ctx context.Context) {
	if err := awsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (awsu *AppWithdrawSettingUpdate) defaults() {
	if _, ok := awsu.mutation.UpdateAt(); !ok {
		v := appwithdrawsetting.UpdateDefaultUpdateAt()
		awsu.mutation.SetUpdateAt(v)
	}
}

func (awsu *AppWithdrawSettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appwithdrawsetting.Table,
			Columns: appwithdrawsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appwithdrawsetting.FieldID,
			},
		},
	}
	if ps := awsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := awsu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appwithdrawsetting.FieldAppID,
		})
	}
	if value, ok := awsu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appwithdrawsetting.FieldCoinTypeID,
		})
	}
	if value, ok := awsu.mutation.WithdrawAutoReviewCoinAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appwithdrawsetting.FieldWithdrawAutoReviewCoinAmount,
		})
	}
	if value, ok := awsu.mutation.AddedWithdrawAutoReviewCoinAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appwithdrawsetting.FieldWithdrawAutoReviewCoinAmount,
		})
	}
	if value, ok := awsu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appwithdrawsetting.FieldCreateAt,
		})
	}
	if value, ok := awsu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appwithdrawsetting.FieldCreateAt,
		})
	}
	if value, ok := awsu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appwithdrawsetting.FieldUpdateAt,
		})
	}
	if value, ok := awsu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appwithdrawsetting.FieldUpdateAt,
		})
	}
	if value, ok := awsu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appwithdrawsetting.FieldDeleteAt,
		})
	}
	if value, ok := awsu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appwithdrawsetting.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, awsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appwithdrawsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AppWithdrawSettingUpdateOne is the builder for updating a single AppWithdrawSetting entity.
type AppWithdrawSettingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppWithdrawSettingMutation
}

// SetAppID sets the "app_id" field.
func (awsuo *AppWithdrawSettingUpdateOne) SetAppID(u uuid.UUID) *AppWithdrawSettingUpdateOne {
	awsuo.mutation.SetAppID(u)
	return awsuo
}

// SetCoinTypeID sets the "coin_type_id" field.
func (awsuo *AppWithdrawSettingUpdateOne) SetCoinTypeID(u uuid.UUID) *AppWithdrawSettingUpdateOne {
	awsuo.mutation.SetCoinTypeID(u)
	return awsuo
}

// SetWithdrawAutoReviewCoinAmount sets the "withdraw_auto_review_coin_amount" field.
func (awsuo *AppWithdrawSettingUpdateOne) SetWithdrawAutoReviewCoinAmount(u uint64) *AppWithdrawSettingUpdateOne {
	awsuo.mutation.ResetWithdrawAutoReviewCoinAmount()
	awsuo.mutation.SetWithdrawAutoReviewCoinAmount(u)
	return awsuo
}

// AddWithdrawAutoReviewCoinAmount adds u to the "withdraw_auto_review_coin_amount" field.
func (awsuo *AppWithdrawSettingUpdateOne) AddWithdrawAutoReviewCoinAmount(u int64) *AppWithdrawSettingUpdateOne {
	awsuo.mutation.AddWithdrawAutoReviewCoinAmount(u)
	return awsuo
}

// SetCreateAt sets the "create_at" field.
func (awsuo *AppWithdrawSettingUpdateOne) SetCreateAt(u uint32) *AppWithdrawSettingUpdateOne {
	awsuo.mutation.ResetCreateAt()
	awsuo.mutation.SetCreateAt(u)
	return awsuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (awsuo *AppWithdrawSettingUpdateOne) SetNillableCreateAt(u *uint32) *AppWithdrawSettingUpdateOne {
	if u != nil {
		awsuo.SetCreateAt(*u)
	}
	return awsuo
}

// AddCreateAt adds u to the "create_at" field.
func (awsuo *AppWithdrawSettingUpdateOne) AddCreateAt(u int32) *AppWithdrawSettingUpdateOne {
	awsuo.mutation.AddCreateAt(u)
	return awsuo
}

// SetUpdateAt sets the "update_at" field.
func (awsuo *AppWithdrawSettingUpdateOne) SetUpdateAt(u uint32) *AppWithdrawSettingUpdateOne {
	awsuo.mutation.ResetUpdateAt()
	awsuo.mutation.SetUpdateAt(u)
	return awsuo
}

// AddUpdateAt adds u to the "update_at" field.
func (awsuo *AppWithdrawSettingUpdateOne) AddUpdateAt(u int32) *AppWithdrawSettingUpdateOne {
	awsuo.mutation.AddUpdateAt(u)
	return awsuo
}

// SetDeleteAt sets the "delete_at" field.
func (awsuo *AppWithdrawSettingUpdateOne) SetDeleteAt(u uint32) *AppWithdrawSettingUpdateOne {
	awsuo.mutation.ResetDeleteAt()
	awsuo.mutation.SetDeleteAt(u)
	return awsuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (awsuo *AppWithdrawSettingUpdateOne) SetNillableDeleteAt(u *uint32) *AppWithdrawSettingUpdateOne {
	if u != nil {
		awsuo.SetDeleteAt(*u)
	}
	return awsuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (awsuo *AppWithdrawSettingUpdateOne) AddDeleteAt(u int32) *AppWithdrawSettingUpdateOne {
	awsuo.mutation.AddDeleteAt(u)
	return awsuo
}

// Mutation returns the AppWithdrawSettingMutation object of the builder.
func (awsuo *AppWithdrawSettingUpdateOne) Mutation() *AppWithdrawSettingMutation {
	return awsuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (awsuo *AppWithdrawSettingUpdateOne) Select(field string, fields ...string) *AppWithdrawSettingUpdateOne {
	awsuo.fields = append([]string{field}, fields...)
	return awsuo
}

// Save executes the query and returns the updated AppWithdrawSetting entity.
func (awsuo *AppWithdrawSettingUpdateOne) Save(ctx context.Context) (*AppWithdrawSetting, error) {
	var (
		err  error
		node *AppWithdrawSetting
	)
	awsuo.defaults()
	if len(awsuo.hooks) == 0 {
		node, err = awsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppWithdrawSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			awsuo.mutation = mutation
			node, err = awsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(awsuo.hooks) - 1; i >= 0; i-- {
			if awsuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = awsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, awsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (awsuo *AppWithdrawSettingUpdateOne) SaveX(ctx context.Context) *AppWithdrawSetting {
	node, err := awsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (awsuo *AppWithdrawSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := awsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (awsuo *AppWithdrawSettingUpdateOne) ExecX(ctx context.Context) {
	if err := awsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (awsuo *AppWithdrawSettingUpdateOne) defaults() {
	if _, ok := awsuo.mutation.UpdateAt(); !ok {
		v := appwithdrawsetting.UpdateDefaultUpdateAt()
		awsuo.mutation.SetUpdateAt(v)
	}
}

func (awsuo *AppWithdrawSettingUpdateOne) sqlSave(ctx context.Context) (_node *AppWithdrawSetting, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appwithdrawsetting.Table,
			Columns: appwithdrawsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appwithdrawsetting.FieldID,
			},
		},
	}
	id, ok := awsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppWithdrawSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := awsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appwithdrawsetting.FieldID)
		for _, f := range fields {
			if !appwithdrawsetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appwithdrawsetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := awsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := awsuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appwithdrawsetting.FieldAppID,
		})
	}
	if value, ok := awsuo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appwithdrawsetting.FieldCoinTypeID,
		})
	}
	if value, ok := awsuo.mutation.WithdrawAutoReviewCoinAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appwithdrawsetting.FieldWithdrawAutoReviewCoinAmount,
		})
	}
	if value, ok := awsuo.mutation.AddedWithdrawAutoReviewCoinAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appwithdrawsetting.FieldWithdrawAutoReviewCoinAmount,
		})
	}
	if value, ok := awsuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appwithdrawsetting.FieldCreateAt,
		})
	}
	if value, ok := awsuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appwithdrawsetting.FieldCreateAt,
		})
	}
	if value, ok := awsuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appwithdrawsetting.FieldUpdateAt,
		})
	}
	if value, ok := awsuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appwithdrawsetting.FieldUpdateAt,
		})
	}
	if value, ok := awsuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appwithdrawsetting.FieldDeleteAt,
		})
	}
	if value, ok := awsuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appwithdrawsetting.FieldDeleteAt,
		})
	}
	_node = &AppWithdrawSetting{config: awsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, awsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appwithdrawsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
