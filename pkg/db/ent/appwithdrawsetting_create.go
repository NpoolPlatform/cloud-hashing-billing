// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/appwithdrawsetting"
	"github.com/google/uuid"
)

// AppWithdrawSettingCreate is the builder for creating a AppWithdrawSetting entity.
type AppWithdrawSettingCreate struct {
	config
	mutation *AppWithdrawSettingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAppID sets the "app_id" field.
func (awsc *AppWithdrawSettingCreate) SetAppID(u uuid.UUID) *AppWithdrawSettingCreate {
	awsc.mutation.SetAppID(u)
	return awsc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (awsc *AppWithdrawSettingCreate) SetCoinTypeID(u uuid.UUID) *AppWithdrawSettingCreate {
	awsc.mutation.SetCoinTypeID(u)
	return awsc
}

// SetWithdrawAutoReviewCoinAmount sets the "withdraw_auto_review_coin_amount" field.
func (awsc *AppWithdrawSettingCreate) SetWithdrawAutoReviewCoinAmount(u uint64) *AppWithdrawSettingCreate {
	awsc.mutation.SetWithdrawAutoReviewCoinAmount(u)
	return awsc
}

// SetCreateAt sets the "create_at" field.
func (awsc *AppWithdrawSettingCreate) SetCreateAt(u uint32) *AppWithdrawSettingCreate {
	awsc.mutation.SetCreateAt(u)
	return awsc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (awsc *AppWithdrawSettingCreate) SetNillableCreateAt(u *uint32) *AppWithdrawSettingCreate {
	if u != nil {
		awsc.SetCreateAt(*u)
	}
	return awsc
}

// SetUpdateAt sets the "update_at" field.
func (awsc *AppWithdrawSettingCreate) SetUpdateAt(u uint32) *AppWithdrawSettingCreate {
	awsc.mutation.SetUpdateAt(u)
	return awsc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (awsc *AppWithdrawSettingCreate) SetNillableUpdateAt(u *uint32) *AppWithdrawSettingCreate {
	if u != nil {
		awsc.SetUpdateAt(*u)
	}
	return awsc
}

// SetDeleteAt sets the "delete_at" field.
func (awsc *AppWithdrawSettingCreate) SetDeleteAt(u uint32) *AppWithdrawSettingCreate {
	awsc.mutation.SetDeleteAt(u)
	return awsc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (awsc *AppWithdrawSettingCreate) SetNillableDeleteAt(u *uint32) *AppWithdrawSettingCreate {
	if u != nil {
		awsc.SetDeleteAt(*u)
	}
	return awsc
}

// SetID sets the "id" field.
func (awsc *AppWithdrawSettingCreate) SetID(u uuid.UUID) *AppWithdrawSettingCreate {
	awsc.mutation.SetID(u)
	return awsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (awsc *AppWithdrawSettingCreate) SetNillableID(u *uuid.UUID) *AppWithdrawSettingCreate {
	if u != nil {
		awsc.SetID(*u)
	}
	return awsc
}

// Mutation returns the AppWithdrawSettingMutation object of the builder.
func (awsc *AppWithdrawSettingCreate) Mutation() *AppWithdrawSettingMutation {
	return awsc.mutation
}

// Save creates the AppWithdrawSetting in the database.
func (awsc *AppWithdrawSettingCreate) Save(ctx context.Context) (*AppWithdrawSetting, error) {
	var (
		err  error
		node *AppWithdrawSetting
	)
	awsc.defaults()
	if len(awsc.hooks) == 0 {
		if err = awsc.check(); err != nil {
			return nil, err
		}
		node, err = awsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppWithdrawSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = awsc.check(); err != nil {
				return nil, err
			}
			awsc.mutation = mutation
			if node, err = awsc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(awsc.hooks) - 1; i >= 0; i-- {
			if awsc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = awsc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, awsc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AppWithdrawSetting)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AppWithdrawSettingMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (awsc *AppWithdrawSettingCreate) SaveX(ctx context.Context) *AppWithdrawSetting {
	v, err := awsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (awsc *AppWithdrawSettingCreate) Exec(ctx context.Context) error {
	_, err := awsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (awsc *AppWithdrawSettingCreate) ExecX(ctx context.Context) {
	if err := awsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (awsc *AppWithdrawSettingCreate) defaults() {
	if _, ok := awsc.mutation.CreateAt(); !ok {
		v := appwithdrawsetting.DefaultCreateAt()
		awsc.mutation.SetCreateAt(v)
	}
	if _, ok := awsc.mutation.UpdateAt(); !ok {
		v := appwithdrawsetting.DefaultUpdateAt()
		awsc.mutation.SetUpdateAt(v)
	}
	if _, ok := awsc.mutation.DeleteAt(); !ok {
		v := appwithdrawsetting.DefaultDeleteAt()
		awsc.mutation.SetDeleteAt(v)
	}
	if _, ok := awsc.mutation.ID(); !ok {
		v := appwithdrawsetting.DefaultID()
		awsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (awsc *AppWithdrawSettingCreate) check() error {
	if _, ok := awsc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "AppWithdrawSetting.app_id"`)}
	}
	if _, ok := awsc.mutation.CoinTypeID(); !ok {
		return &ValidationError{Name: "coin_type_id", err: errors.New(`ent: missing required field "AppWithdrawSetting.coin_type_id"`)}
	}
	if _, ok := awsc.mutation.WithdrawAutoReviewCoinAmount(); !ok {
		return &ValidationError{Name: "withdraw_auto_review_coin_amount", err: errors.New(`ent: missing required field "AppWithdrawSetting.withdraw_auto_review_coin_amount"`)}
	}
	if _, ok := awsc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "AppWithdrawSetting.create_at"`)}
	}
	if _, ok := awsc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "AppWithdrawSetting.update_at"`)}
	}
	if _, ok := awsc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "AppWithdrawSetting.delete_at"`)}
	}
	return nil
}

func (awsc *AppWithdrawSettingCreate) sqlSave(ctx context.Context) (*AppWithdrawSetting, error) {
	_node, _spec := awsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, awsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (awsc *AppWithdrawSettingCreate) createSpec() (*AppWithdrawSetting, *sqlgraph.CreateSpec) {
	var (
		_node = &AppWithdrawSetting{config: awsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: appwithdrawsetting.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appwithdrawsetting.FieldID,
			},
		}
	)
	_spec.OnConflict = awsc.conflict
	if id, ok := awsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := awsc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appwithdrawsetting.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := awsc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appwithdrawsetting.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := awsc.mutation.WithdrawAutoReviewCoinAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appwithdrawsetting.FieldWithdrawAutoReviewCoinAmount,
		})
		_node.WithdrawAutoReviewCoinAmount = value
	}
	if value, ok := awsc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appwithdrawsetting.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := awsc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appwithdrawsetting.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := awsc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appwithdrawsetting.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppWithdrawSetting.Create().
//		SetAppID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppWithdrawSettingUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (awsc *AppWithdrawSettingCreate) OnConflict(opts ...sql.ConflictOption) *AppWithdrawSettingUpsertOne {
	awsc.conflict = opts
	return &AppWithdrawSettingUpsertOne{
		create: awsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppWithdrawSetting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (awsc *AppWithdrawSettingCreate) OnConflictColumns(columns ...string) *AppWithdrawSettingUpsertOne {
	awsc.conflict = append(awsc.conflict, sql.ConflictColumns(columns...))
	return &AppWithdrawSettingUpsertOne{
		create: awsc,
	}
}

type (
	// AppWithdrawSettingUpsertOne is the builder for "upsert"-ing
	//  one AppWithdrawSetting node.
	AppWithdrawSettingUpsertOne struct {
		create *AppWithdrawSettingCreate
	}

	// AppWithdrawSettingUpsert is the "OnConflict" setter.
	AppWithdrawSettingUpsert struct {
		*sql.UpdateSet
	}
)

// SetAppID sets the "app_id" field.
func (u *AppWithdrawSettingUpsert) SetAppID(v uuid.UUID) *AppWithdrawSettingUpsert {
	u.Set(appwithdrawsetting.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppWithdrawSettingUpsert) UpdateAppID() *AppWithdrawSettingUpsert {
	u.SetExcluded(appwithdrawsetting.FieldAppID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *AppWithdrawSettingUpsert) SetCoinTypeID(v uuid.UUID) *AppWithdrawSettingUpsert {
	u.Set(appwithdrawsetting.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *AppWithdrawSettingUpsert) UpdateCoinTypeID() *AppWithdrawSettingUpsert {
	u.SetExcluded(appwithdrawsetting.FieldCoinTypeID)
	return u
}

// SetWithdrawAutoReviewCoinAmount sets the "withdraw_auto_review_coin_amount" field.
func (u *AppWithdrawSettingUpsert) SetWithdrawAutoReviewCoinAmount(v uint64) *AppWithdrawSettingUpsert {
	u.Set(appwithdrawsetting.FieldWithdrawAutoReviewCoinAmount, v)
	return u
}

// UpdateWithdrawAutoReviewCoinAmount sets the "withdraw_auto_review_coin_amount" field to the value that was provided on create.
func (u *AppWithdrawSettingUpsert) UpdateWithdrawAutoReviewCoinAmount() *AppWithdrawSettingUpsert {
	u.SetExcluded(appwithdrawsetting.FieldWithdrawAutoReviewCoinAmount)
	return u
}

// AddWithdrawAutoReviewCoinAmount adds v to the "withdraw_auto_review_coin_amount" field.
func (u *AppWithdrawSettingUpsert) AddWithdrawAutoReviewCoinAmount(v uint64) *AppWithdrawSettingUpsert {
	u.Add(appwithdrawsetting.FieldWithdrawAutoReviewCoinAmount, v)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *AppWithdrawSettingUpsert) SetCreateAt(v uint32) *AppWithdrawSettingUpsert {
	u.Set(appwithdrawsetting.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppWithdrawSettingUpsert) UpdateCreateAt() *AppWithdrawSettingUpsert {
	u.SetExcluded(appwithdrawsetting.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppWithdrawSettingUpsert) AddCreateAt(v uint32) *AppWithdrawSettingUpsert {
	u.Add(appwithdrawsetting.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *AppWithdrawSettingUpsert) SetUpdateAt(v uint32) *AppWithdrawSettingUpsert {
	u.Set(appwithdrawsetting.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppWithdrawSettingUpsert) UpdateUpdateAt() *AppWithdrawSettingUpsert {
	u.SetExcluded(appwithdrawsetting.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppWithdrawSettingUpsert) AddUpdateAt(v uint32) *AppWithdrawSettingUpsert {
	u.Add(appwithdrawsetting.FieldUpdateAt, v)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppWithdrawSettingUpsert) SetDeleteAt(v uint32) *AppWithdrawSettingUpsert {
	u.Set(appwithdrawsetting.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppWithdrawSettingUpsert) UpdateDeleteAt() *AppWithdrawSettingUpsert {
	u.SetExcluded(appwithdrawsetting.FieldDeleteAt)
	return u
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppWithdrawSettingUpsert) AddDeleteAt(v uint32) *AppWithdrawSettingUpsert {
	u.Add(appwithdrawsetting.FieldDeleteAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppWithdrawSetting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appwithdrawsetting.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppWithdrawSettingUpsertOne) UpdateNewValues() *AppWithdrawSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appwithdrawsetting.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.AppWithdrawSetting.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AppWithdrawSettingUpsertOne) Ignore() *AppWithdrawSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppWithdrawSettingUpsertOne) DoNothing() *AppWithdrawSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppWithdrawSettingCreate.OnConflict
// documentation for more info.
func (u *AppWithdrawSettingUpsertOne) Update(set func(*AppWithdrawSettingUpsert)) *AppWithdrawSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppWithdrawSettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppWithdrawSettingUpsertOne) SetAppID(v uuid.UUID) *AppWithdrawSettingUpsertOne {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppWithdrawSettingUpsertOne) UpdateAppID() *AppWithdrawSettingUpsertOne {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.UpdateAppID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *AppWithdrawSettingUpsertOne) SetCoinTypeID(v uuid.UUID) *AppWithdrawSettingUpsertOne {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *AppWithdrawSettingUpsertOne) UpdateCoinTypeID() *AppWithdrawSettingUpsertOne {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.UpdateCoinTypeID()
	})
}

// SetWithdrawAutoReviewCoinAmount sets the "withdraw_auto_review_coin_amount" field.
func (u *AppWithdrawSettingUpsertOne) SetWithdrawAutoReviewCoinAmount(v uint64) *AppWithdrawSettingUpsertOne {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.SetWithdrawAutoReviewCoinAmount(v)
	})
}

// AddWithdrawAutoReviewCoinAmount adds v to the "withdraw_auto_review_coin_amount" field.
func (u *AppWithdrawSettingUpsertOne) AddWithdrawAutoReviewCoinAmount(v uint64) *AppWithdrawSettingUpsertOne {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.AddWithdrawAutoReviewCoinAmount(v)
	})
}

// UpdateWithdrawAutoReviewCoinAmount sets the "withdraw_auto_review_coin_amount" field to the value that was provided on create.
func (u *AppWithdrawSettingUpsertOne) UpdateWithdrawAutoReviewCoinAmount() *AppWithdrawSettingUpsertOne {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.UpdateWithdrawAutoReviewCoinAmount()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AppWithdrawSettingUpsertOne) SetCreateAt(v uint32) *AppWithdrawSettingUpsertOne {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppWithdrawSettingUpsertOne) AddCreateAt(v uint32) *AppWithdrawSettingUpsertOne {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppWithdrawSettingUpsertOne) UpdateCreateAt() *AppWithdrawSettingUpsertOne {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AppWithdrawSettingUpsertOne) SetUpdateAt(v uint32) *AppWithdrawSettingUpsertOne {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppWithdrawSettingUpsertOne) AddUpdateAt(v uint32) *AppWithdrawSettingUpsertOne {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppWithdrawSettingUpsertOne) UpdateUpdateAt() *AppWithdrawSettingUpsertOne {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppWithdrawSettingUpsertOne) SetDeleteAt(v uint32) *AppWithdrawSettingUpsertOne {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppWithdrawSettingUpsertOne) AddDeleteAt(v uint32) *AppWithdrawSettingUpsertOne {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppWithdrawSettingUpsertOne) UpdateDeleteAt() *AppWithdrawSettingUpsertOne {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *AppWithdrawSettingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppWithdrawSettingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppWithdrawSettingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppWithdrawSettingUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AppWithdrawSettingUpsertOne.ID is not supported by MySQL driver. Use AppWithdrawSettingUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppWithdrawSettingUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppWithdrawSettingCreateBulk is the builder for creating many AppWithdrawSetting entities in bulk.
type AppWithdrawSettingCreateBulk struct {
	config
	builders []*AppWithdrawSettingCreate
	conflict []sql.ConflictOption
}

// Save creates the AppWithdrawSetting entities in the database.
func (awscb *AppWithdrawSettingCreateBulk) Save(ctx context.Context) ([]*AppWithdrawSetting, error) {
	specs := make([]*sqlgraph.CreateSpec, len(awscb.builders))
	nodes := make([]*AppWithdrawSetting, len(awscb.builders))
	mutators := make([]Mutator, len(awscb.builders))
	for i := range awscb.builders {
		func(i int, root context.Context) {
			builder := awscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppWithdrawSettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, awscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = awscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, awscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, awscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (awscb *AppWithdrawSettingCreateBulk) SaveX(ctx context.Context) []*AppWithdrawSetting {
	v, err := awscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (awscb *AppWithdrawSettingCreateBulk) Exec(ctx context.Context) error {
	_, err := awscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (awscb *AppWithdrawSettingCreateBulk) ExecX(ctx context.Context) {
	if err := awscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppWithdrawSetting.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppWithdrawSettingUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (awscb *AppWithdrawSettingCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppWithdrawSettingUpsertBulk {
	awscb.conflict = opts
	return &AppWithdrawSettingUpsertBulk{
		create: awscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppWithdrawSetting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (awscb *AppWithdrawSettingCreateBulk) OnConflictColumns(columns ...string) *AppWithdrawSettingUpsertBulk {
	awscb.conflict = append(awscb.conflict, sql.ConflictColumns(columns...))
	return &AppWithdrawSettingUpsertBulk{
		create: awscb,
	}
}

// AppWithdrawSettingUpsertBulk is the builder for "upsert"-ing
// a bulk of AppWithdrawSetting nodes.
type AppWithdrawSettingUpsertBulk struct {
	create *AppWithdrawSettingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppWithdrawSetting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appwithdrawsetting.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppWithdrawSettingUpsertBulk) UpdateNewValues() *AppWithdrawSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appwithdrawsetting.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppWithdrawSetting.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AppWithdrawSettingUpsertBulk) Ignore() *AppWithdrawSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppWithdrawSettingUpsertBulk) DoNothing() *AppWithdrawSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppWithdrawSettingCreateBulk.OnConflict
// documentation for more info.
func (u *AppWithdrawSettingUpsertBulk) Update(set func(*AppWithdrawSettingUpsert)) *AppWithdrawSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppWithdrawSettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppWithdrawSettingUpsertBulk) SetAppID(v uuid.UUID) *AppWithdrawSettingUpsertBulk {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppWithdrawSettingUpsertBulk) UpdateAppID() *AppWithdrawSettingUpsertBulk {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.UpdateAppID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *AppWithdrawSettingUpsertBulk) SetCoinTypeID(v uuid.UUID) *AppWithdrawSettingUpsertBulk {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *AppWithdrawSettingUpsertBulk) UpdateCoinTypeID() *AppWithdrawSettingUpsertBulk {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.UpdateCoinTypeID()
	})
}

// SetWithdrawAutoReviewCoinAmount sets the "withdraw_auto_review_coin_amount" field.
func (u *AppWithdrawSettingUpsertBulk) SetWithdrawAutoReviewCoinAmount(v uint64) *AppWithdrawSettingUpsertBulk {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.SetWithdrawAutoReviewCoinAmount(v)
	})
}

// AddWithdrawAutoReviewCoinAmount adds v to the "withdraw_auto_review_coin_amount" field.
func (u *AppWithdrawSettingUpsertBulk) AddWithdrawAutoReviewCoinAmount(v uint64) *AppWithdrawSettingUpsertBulk {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.AddWithdrawAutoReviewCoinAmount(v)
	})
}

// UpdateWithdrawAutoReviewCoinAmount sets the "withdraw_auto_review_coin_amount" field to the value that was provided on create.
func (u *AppWithdrawSettingUpsertBulk) UpdateWithdrawAutoReviewCoinAmount() *AppWithdrawSettingUpsertBulk {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.UpdateWithdrawAutoReviewCoinAmount()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AppWithdrawSettingUpsertBulk) SetCreateAt(v uint32) *AppWithdrawSettingUpsertBulk {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppWithdrawSettingUpsertBulk) AddCreateAt(v uint32) *AppWithdrawSettingUpsertBulk {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppWithdrawSettingUpsertBulk) UpdateCreateAt() *AppWithdrawSettingUpsertBulk {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AppWithdrawSettingUpsertBulk) SetUpdateAt(v uint32) *AppWithdrawSettingUpsertBulk {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppWithdrawSettingUpsertBulk) AddUpdateAt(v uint32) *AppWithdrawSettingUpsertBulk {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppWithdrawSettingUpsertBulk) UpdateUpdateAt() *AppWithdrawSettingUpsertBulk {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppWithdrawSettingUpsertBulk) SetDeleteAt(v uint32) *AppWithdrawSettingUpsertBulk {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppWithdrawSettingUpsertBulk) AddDeleteAt(v uint32) *AppWithdrawSettingUpsertBulk {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppWithdrawSettingUpsertBulk) UpdateDeleteAt() *AppWithdrawSettingUpsertBulk {
	return u.Update(func(s *AppWithdrawSettingUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *AppWithdrawSettingUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppWithdrawSettingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppWithdrawSettingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppWithdrawSettingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
