// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/coinaccounttransaction"
	"github.com/google/uuid"
)

// CoinAccountTransactionCreate is the builder for creating a CoinAccountTransaction entity.
type CoinAccountTransactionCreate struct {
	config
	mutation *CoinAccountTransactionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAppID sets the "app_id" field.
func (catc *CoinAccountTransactionCreate) SetAppID(u uuid.UUID) *CoinAccountTransactionCreate {
	catc.mutation.SetAppID(u)
	return catc
}

// SetUserID sets the "user_id" field.
func (catc *CoinAccountTransactionCreate) SetUserID(u uuid.UUID) *CoinAccountTransactionCreate {
	catc.mutation.SetUserID(u)
	return catc
}

// SetFromAddressID sets the "from_address_id" field.
func (catc *CoinAccountTransactionCreate) SetFromAddressID(u uuid.UUID) *CoinAccountTransactionCreate {
	catc.mutation.SetFromAddressID(u)
	return catc
}

// SetToAddressID sets the "to_address_id" field.
func (catc *CoinAccountTransactionCreate) SetToAddressID(u uuid.UUID) *CoinAccountTransactionCreate {
	catc.mutation.SetToAddressID(u)
	return catc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (catc *CoinAccountTransactionCreate) SetCoinTypeID(u uuid.UUID) *CoinAccountTransactionCreate {
	catc.mutation.SetCoinTypeID(u)
	return catc
}

// SetAmount sets the "amount" field.
func (catc *CoinAccountTransactionCreate) SetAmount(u uint64) *CoinAccountTransactionCreate {
	catc.mutation.SetAmount(u)
	return catc
}

// SetMessage sets the "message" field.
func (catc *CoinAccountTransactionCreate) SetMessage(s string) *CoinAccountTransactionCreate {
	catc.mutation.SetMessage(s)
	return catc
}

// SetState sets the "state" field.
func (catc *CoinAccountTransactionCreate) SetState(c coinaccounttransaction.State) *CoinAccountTransactionCreate {
	catc.mutation.SetState(c)
	return catc
}

// SetChainTransactionID sets the "chain_transaction_id" field.
func (catc *CoinAccountTransactionCreate) SetChainTransactionID(s string) *CoinAccountTransactionCreate {
	catc.mutation.SetChainTransactionID(s)
	return catc
}

// SetPlatformTransactionID sets the "platform_transaction_id" field.
func (catc *CoinAccountTransactionCreate) SetPlatformTransactionID(u uuid.UUID) *CoinAccountTransactionCreate {
	catc.mutation.SetPlatformTransactionID(u)
	return catc
}

// SetCreateAt sets the "create_at" field.
func (catc *CoinAccountTransactionCreate) SetCreateAt(u uint32) *CoinAccountTransactionCreate {
	catc.mutation.SetCreateAt(u)
	return catc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (catc *CoinAccountTransactionCreate) SetNillableCreateAt(u *uint32) *CoinAccountTransactionCreate {
	if u != nil {
		catc.SetCreateAt(*u)
	}
	return catc
}

// SetUpdateAt sets the "update_at" field.
func (catc *CoinAccountTransactionCreate) SetUpdateAt(u uint32) *CoinAccountTransactionCreate {
	catc.mutation.SetUpdateAt(u)
	return catc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (catc *CoinAccountTransactionCreate) SetNillableUpdateAt(u *uint32) *CoinAccountTransactionCreate {
	if u != nil {
		catc.SetUpdateAt(*u)
	}
	return catc
}

// SetDeleteAt sets the "delete_at" field.
func (catc *CoinAccountTransactionCreate) SetDeleteAt(u uint32) *CoinAccountTransactionCreate {
	catc.mutation.SetDeleteAt(u)
	return catc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (catc *CoinAccountTransactionCreate) SetNillableDeleteAt(u *uint32) *CoinAccountTransactionCreate {
	if u != nil {
		catc.SetDeleteAt(*u)
	}
	return catc
}

// SetID sets the "id" field.
func (catc *CoinAccountTransactionCreate) SetID(u uuid.UUID) *CoinAccountTransactionCreate {
	catc.mutation.SetID(u)
	return catc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (catc *CoinAccountTransactionCreate) SetNillableID(u *uuid.UUID) *CoinAccountTransactionCreate {
	if u != nil {
		catc.SetID(*u)
	}
	return catc
}

// Mutation returns the CoinAccountTransactionMutation object of the builder.
func (catc *CoinAccountTransactionCreate) Mutation() *CoinAccountTransactionMutation {
	return catc.mutation
}

// Save creates the CoinAccountTransaction in the database.
func (catc *CoinAccountTransactionCreate) Save(ctx context.Context) (*CoinAccountTransaction, error) {
	var (
		err  error
		node *CoinAccountTransaction
	)
	catc.defaults()
	if len(catc.hooks) == 0 {
		if err = catc.check(); err != nil {
			return nil, err
		}
		node, err = catc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CoinAccountTransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = catc.check(); err != nil {
				return nil, err
			}
			catc.mutation = mutation
			if node, err = catc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(catc.hooks) - 1; i >= 0; i-- {
			if catc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = catc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, catc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (catc *CoinAccountTransactionCreate) SaveX(ctx context.Context) *CoinAccountTransaction {
	v, err := catc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (catc *CoinAccountTransactionCreate) Exec(ctx context.Context) error {
	_, err := catc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (catc *CoinAccountTransactionCreate) ExecX(ctx context.Context) {
	if err := catc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (catc *CoinAccountTransactionCreate) defaults() {
	if _, ok := catc.mutation.CreateAt(); !ok {
		v := coinaccounttransaction.DefaultCreateAt()
		catc.mutation.SetCreateAt(v)
	}
	if _, ok := catc.mutation.UpdateAt(); !ok {
		v := coinaccounttransaction.DefaultUpdateAt()
		catc.mutation.SetUpdateAt(v)
	}
	if _, ok := catc.mutation.DeleteAt(); !ok {
		v := coinaccounttransaction.DefaultDeleteAt()
		catc.mutation.SetDeleteAt(v)
	}
	if _, ok := catc.mutation.ID(); !ok {
		v := coinaccounttransaction.DefaultID()
		catc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (catc *CoinAccountTransactionCreate) check() error {
	if _, ok := catc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "CoinAccountTransaction.app_id"`)}
	}
	if _, ok := catc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "CoinAccountTransaction.user_id"`)}
	}
	if _, ok := catc.mutation.FromAddressID(); !ok {
		return &ValidationError{Name: "from_address_id", err: errors.New(`ent: missing required field "CoinAccountTransaction.from_address_id"`)}
	}
	if _, ok := catc.mutation.ToAddressID(); !ok {
		return &ValidationError{Name: "to_address_id", err: errors.New(`ent: missing required field "CoinAccountTransaction.to_address_id"`)}
	}
	if _, ok := catc.mutation.CoinTypeID(); !ok {
		return &ValidationError{Name: "coin_type_id", err: errors.New(`ent: missing required field "CoinAccountTransaction.coin_type_id"`)}
	}
	if _, ok := catc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "CoinAccountTransaction.amount"`)}
	}
	if _, ok := catc.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required field "CoinAccountTransaction.message"`)}
	}
	if _, ok := catc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "CoinAccountTransaction.state"`)}
	}
	if v, ok := catc.mutation.State(); ok {
		if err := coinaccounttransaction.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "CoinAccountTransaction.state": %w`, err)}
		}
	}
	if _, ok := catc.mutation.ChainTransactionID(); !ok {
		return &ValidationError{Name: "chain_transaction_id", err: errors.New(`ent: missing required field "CoinAccountTransaction.chain_transaction_id"`)}
	}
	if _, ok := catc.mutation.PlatformTransactionID(); !ok {
		return &ValidationError{Name: "platform_transaction_id", err: errors.New(`ent: missing required field "CoinAccountTransaction.platform_transaction_id"`)}
	}
	if _, ok := catc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "CoinAccountTransaction.create_at"`)}
	}
	if _, ok := catc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "CoinAccountTransaction.update_at"`)}
	}
	if _, ok := catc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "CoinAccountTransaction.delete_at"`)}
	}
	return nil
}

func (catc *CoinAccountTransactionCreate) sqlSave(ctx context.Context) (*CoinAccountTransaction, error) {
	_node, _spec := catc.createSpec()
	if err := sqlgraph.CreateNode(ctx, catc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (catc *CoinAccountTransactionCreate) createSpec() (*CoinAccountTransaction, *sqlgraph.CreateSpec) {
	var (
		_node = &CoinAccountTransaction{config: catc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: coinaccounttransaction.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: coinaccounttransaction.FieldID,
			},
		}
	)
	_spec.OnConflict = catc.conflict
	if id, ok := catc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := catc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinaccounttransaction.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := catc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinaccounttransaction.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := catc.mutation.FromAddressID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinaccounttransaction.FieldFromAddressID,
		})
		_node.FromAddressID = value
	}
	if value, ok := catc.mutation.ToAddressID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinaccounttransaction.FieldToAddressID,
		})
		_node.ToAddressID = value
	}
	if value, ok := catc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinaccounttransaction.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := catc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: coinaccounttransaction.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := catc.mutation.Message(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coinaccounttransaction.FieldMessage,
		})
		_node.Message = value
	}
	if value, ok := catc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: coinaccounttransaction.FieldState,
		})
		_node.State = value
	}
	if value, ok := catc.mutation.ChainTransactionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coinaccounttransaction.FieldChainTransactionID,
		})
		_node.ChainTransactionID = value
	}
	if value, ok := catc.mutation.PlatformTransactionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinaccounttransaction.FieldPlatformTransactionID,
		})
		_node.PlatformTransactionID = value
	}
	if value, ok := catc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinaccounttransaction.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := catc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinaccounttransaction.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := catc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinaccounttransaction.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CoinAccountTransaction.Create().
//		SetAppID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CoinAccountTransactionUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (catc *CoinAccountTransactionCreate) OnConflict(opts ...sql.ConflictOption) *CoinAccountTransactionUpsertOne {
	catc.conflict = opts
	return &CoinAccountTransactionUpsertOne{
		create: catc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CoinAccountTransaction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (catc *CoinAccountTransactionCreate) OnConflictColumns(columns ...string) *CoinAccountTransactionUpsertOne {
	catc.conflict = append(catc.conflict, sql.ConflictColumns(columns...))
	return &CoinAccountTransactionUpsertOne{
		create: catc,
	}
}

type (
	// CoinAccountTransactionUpsertOne is the builder for "upsert"-ing
	//  one CoinAccountTransaction node.
	CoinAccountTransactionUpsertOne struct {
		create *CoinAccountTransactionCreate
	}

	// CoinAccountTransactionUpsert is the "OnConflict" setter.
	CoinAccountTransactionUpsert struct {
		*sql.UpdateSet
	}
)

// SetAppID sets the "app_id" field.
func (u *CoinAccountTransactionUpsert) SetAppID(v uuid.UUID) *CoinAccountTransactionUpsert {
	u.Set(coinaccounttransaction.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsert) UpdateAppID() *CoinAccountTransactionUpsert {
	u.SetExcluded(coinaccounttransaction.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *CoinAccountTransactionUpsert) SetUserID(v uuid.UUID) *CoinAccountTransactionUpsert {
	u.Set(coinaccounttransaction.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsert) UpdateUserID() *CoinAccountTransactionUpsert {
	u.SetExcluded(coinaccounttransaction.FieldUserID)
	return u
}

// SetFromAddressID sets the "from_address_id" field.
func (u *CoinAccountTransactionUpsert) SetFromAddressID(v uuid.UUID) *CoinAccountTransactionUpsert {
	u.Set(coinaccounttransaction.FieldFromAddressID, v)
	return u
}

// UpdateFromAddressID sets the "from_address_id" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsert) UpdateFromAddressID() *CoinAccountTransactionUpsert {
	u.SetExcluded(coinaccounttransaction.FieldFromAddressID)
	return u
}

// SetToAddressID sets the "to_address_id" field.
func (u *CoinAccountTransactionUpsert) SetToAddressID(v uuid.UUID) *CoinAccountTransactionUpsert {
	u.Set(coinaccounttransaction.FieldToAddressID, v)
	return u
}

// UpdateToAddressID sets the "to_address_id" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsert) UpdateToAddressID() *CoinAccountTransactionUpsert {
	u.SetExcluded(coinaccounttransaction.FieldToAddressID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *CoinAccountTransactionUpsert) SetCoinTypeID(v uuid.UUID) *CoinAccountTransactionUpsert {
	u.Set(coinaccounttransaction.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsert) UpdateCoinTypeID() *CoinAccountTransactionUpsert {
	u.SetExcluded(coinaccounttransaction.FieldCoinTypeID)
	return u
}

// SetAmount sets the "amount" field.
func (u *CoinAccountTransactionUpsert) SetAmount(v uint64) *CoinAccountTransactionUpsert {
	u.Set(coinaccounttransaction.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsert) UpdateAmount() *CoinAccountTransactionUpsert {
	u.SetExcluded(coinaccounttransaction.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *CoinAccountTransactionUpsert) AddAmount(v uint64) *CoinAccountTransactionUpsert {
	u.Add(coinaccounttransaction.FieldAmount, v)
	return u
}

// SetMessage sets the "message" field.
func (u *CoinAccountTransactionUpsert) SetMessage(v string) *CoinAccountTransactionUpsert {
	u.Set(coinaccounttransaction.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsert) UpdateMessage() *CoinAccountTransactionUpsert {
	u.SetExcluded(coinaccounttransaction.FieldMessage)
	return u
}

// SetState sets the "state" field.
func (u *CoinAccountTransactionUpsert) SetState(v coinaccounttransaction.State) *CoinAccountTransactionUpsert {
	u.Set(coinaccounttransaction.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsert) UpdateState() *CoinAccountTransactionUpsert {
	u.SetExcluded(coinaccounttransaction.FieldState)
	return u
}

// SetChainTransactionID sets the "chain_transaction_id" field.
func (u *CoinAccountTransactionUpsert) SetChainTransactionID(v string) *CoinAccountTransactionUpsert {
	u.Set(coinaccounttransaction.FieldChainTransactionID, v)
	return u
}

// UpdateChainTransactionID sets the "chain_transaction_id" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsert) UpdateChainTransactionID() *CoinAccountTransactionUpsert {
	u.SetExcluded(coinaccounttransaction.FieldChainTransactionID)
	return u
}

// SetPlatformTransactionID sets the "platform_transaction_id" field.
func (u *CoinAccountTransactionUpsert) SetPlatformTransactionID(v uuid.UUID) *CoinAccountTransactionUpsert {
	u.Set(coinaccounttransaction.FieldPlatformTransactionID, v)
	return u
}

// UpdatePlatformTransactionID sets the "platform_transaction_id" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsert) UpdatePlatformTransactionID() *CoinAccountTransactionUpsert {
	u.SetExcluded(coinaccounttransaction.FieldPlatformTransactionID)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *CoinAccountTransactionUpsert) SetCreateAt(v uint32) *CoinAccountTransactionUpsert {
	u.Set(coinaccounttransaction.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsert) UpdateCreateAt() *CoinAccountTransactionUpsert {
	u.SetExcluded(coinaccounttransaction.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *CoinAccountTransactionUpsert) AddCreateAt(v uint32) *CoinAccountTransactionUpsert {
	u.Add(coinaccounttransaction.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *CoinAccountTransactionUpsert) SetUpdateAt(v uint32) *CoinAccountTransactionUpsert {
	u.Set(coinaccounttransaction.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsert) UpdateUpdateAt() *CoinAccountTransactionUpsert {
	u.SetExcluded(coinaccounttransaction.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *CoinAccountTransactionUpsert) AddUpdateAt(v uint32) *CoinAccountTransactionUpsert {
	u.Add(coinaccounttransaction.FieldUpdateAt, v)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *CoinAccountTransactionUpsert) SetDeleteAt(v uint32) *CoinAccountTransactionUpsert {
	u.Set(coinaccounttransaction.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsert) UpdateDeleteAt() *CoinAccountTransactionUpsert {
	u.SetExcluded(coinaccounttransaction.FieldDeleteAt)
	return u
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *CoinAccountTransactionUpsert) AddDeleteAt(v uint32) *CoinAccountTransactionUpsert {
	u.Add(coinaccounttransaction.FieldDeleteAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CoinAccountTransaction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(coinaccounttransaction.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CoinAccountTransactionUpsertOne) UpdateNewValues() *CoinAccountTransactionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(coinaccounttransaction.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.CoinAccountTransaction.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CoinAccountTransactionUpsertOne) Ignore() *CoinAccountTransactionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CoinAccountTransactionUpsertOne) DoNothing() *CoinAccountTransactionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CoinAccountTransactionCreate.OnConflict
// documentation for more info.
func (u *CoinAccountTransactionUpsertOne) Update(set func(*CoinAccountTransactionUpsert)) *CoinAccountTransactionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CoinAccountTransactionUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *CoinAccountTransactionUpsertOne) SetAppID(v uuid.UUID) *CoinAccountTransactionUpsertOne {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsertOne) UpdateAppID() *CoinAccountTransactionUpsertOne {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.UpdateAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *CoinAccountTransactionUpsertOne) SetUserID(v uuid.UUID) *CoinAccountTransactionUpsertOne {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsertOne) UpdateUserID() *CoinAccountTransactionUpsertOne {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.UpdateUserID()
	})
}

// SetFromAddressID sets the "from_address_id" field.
func (u *CoinAccountTransactionUpsertOne) SetFromAddressID(v uuid.UUID) *CoinAccountTransactionUpsertOne {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.SetFromAddressID(v)
	})
}

// UpdateFromAddressID sets the "from_address_id" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsertOne) UpdateFromAddressID() *CoinAccountTransactionUpsertOne {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.UpdateFromAddressID()
	})
}

// SetToAddressID sets the "to_address_id" field.
func (u *CoinAccountTransactionUpsertOne) SetToAddressID(v uuid.UUID) *CoinAccountTransactionUpsertOne {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.SetToAddressID(v)
	})
}

// UpdateToAddressID sets the "to_address_id" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsertOne) UpdateToAddressID() *CoinAccountTransactionUpsertOne {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.UpdateToAddressID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *CoinAccountTransactionUpsertOne) SetCoinTypeID(v uuid.UUID) *CoinAccountTransactionUpsertOne {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsertOne) UpdateCoinTypeID() *CoinAccountTransactionUpsertOne {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.UpdateCoinTypeID()
	})
}

// SetAmount sets the "amount" field.
func (u *CoinAccountTransactionUpsertOne) SetAmount(v uint64) *CoinAccountTransactionUpsertOne {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *CoinAccountTransactionUpsertOne) AddAmount(v uint64) *CoinAccountTransactionUpsertOne {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsertOne) UpdateAmount() *CoinAccountTransactionUpsertOne {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.UpdateAmount()
	})
}

// SetMessage sets the "message" field.
func (u *CoinAccountTransactionUpsertOne) SetMessage(v string) *CoinAccountTransactionUpsertOne {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsertOne) UpdateMessage() *CoinAccountTransactionUpsertOne {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.UpdateMessage()
	})
}

// SetState sets the "state" field.
func (u *CoinAccountTransactionUpsertOne) SetState(v coinaccounttransaction.State) *CoinAccountTransactionUpsertOne {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsertOne) UpdateState() *CoinAccountTransactionUpsertOne {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.UpdateState()
	})
}

// SetChainTransactionID sets the "chain_transaction_id" field.
func (u *CoinAccountTransactionUpsertOne) SetChainTransactionID(v string) *CoinAccountTransactionUpsertOne {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.SetChainTransactionID(v)
	})
}

// UpdateChainTransactionID sets the "chain_transaction_id" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsertOne) UpdateChainTransactionID() *CoinAccountTransactionUpsertOne {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.UpdateChainTransactionID()
	})
}

// SetPlatformTransactionID sets the "platform_transaction_id" field.
func (u *CoinAccountTransactionUpsertOne) SetPlatformTransactionID(v uuid.UUID) *CoinAccountTransactionUpsertOne {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.SetPlatformTransactionID(v)
	})
}

// UpdatePlatformTransactionID sets the "platform_transaction_id" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsertOne) UpdatePlatformTransactionID() *CoinAccountTransactionUpsertOne {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.UpdatePlatformTransactionID()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *CoinAccountTransactionUpsertOne) SetCreateAt(v uint32) *CoinAccountTransactionUpsertOne {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *CoinAccountTransactionUpsertOne) AddCreateAt(v uint32) *CoinAccountTransactionUpsertOne {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsertOne) UpdateCreateAt() *CoinAccountTransactionUpsertOne {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *CoinAccountTransactionUpsertOne) SetUpdateAt(v uint32) *CoinAccountTransactionUpsertOne {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *CoinAccountTransactionUpsertOne) AddUpdateAt(v uint32) *CoinAccountTransactionUpsertOne {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsertOne) UpdateUpdateAt() *CoinAccountTransactionUpsertOne {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *CoinAccountTransactionUpsertOne) SetDeleteAt(v uint32) *CoinAccountTransactionUpsertOne {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *CoinAccountTransactionUpsertOne) AddDeleteAt(v uint32) *CoinAccountTransactionUpsertOne {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsertOne) UpdateDeleteAt() *CoinAccountTransactionUpsertOne {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *CoinAccountTransactionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CoinAccountTransactionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CoinAccountTransactionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CoinAccountTransactionUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CoinAccountTransactionUpsertOne.ID is not supported by MySQL driver. Use CoinAccountTransactionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CoinAccountTransactionUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CoinAccountTransactionCreateBulk is the builder for creating many CoinAccountTransaction entities in bulk.
type CoinAccountTransactionCreateBulk struct {
	config
	builders []*CoinAccountTransactionCreate
	conflict []sql.ConflictOption
}

// Save creates the CoinAccountTransaction entities in the database.
func (catcb *CoinAccountTransactionCreateBulk) Save(ctx context.Context) ([]*CoinAccountTransaction, error) {
	specs := make([]*sqlgraph.CreateSpec, len(catcb.builders))
	nodes := make([]*CoinAccountTransaction, len(catcb.builders))
	mutators := make([]Mutator, len(catcb.builders))
	for i := range catcb.builders {
		func(i int, root context.Context) {
			builder := catcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CoinAccountTransactionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, catcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = catcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, catcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, catcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (catcb *CoinAccountTransactionCreateBulk) SaveX(ctx context.Context) []*CoinAccountTransaction {
	v, err := catcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (catcb *CoinAccountTransactionCreateBulk) Exec(ctx context.Context) error {
	_, err := catcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (catcb *CoinAccountTransactionCreateBulk) ExecX(ctx context.Context) {
	if err := catcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CoinAccountTransaction.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CoinAccountTransactionUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (catcb *CoinAccountTransactionCreateBulk) OnConflict(opts ...sql.ConflictOption) *CoinAccountTransactionUpsertBulk {
	catcb.conflict = opts
	return &CoinAccountTransactionUpsertBulk{
		create: catcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CoinAccountTransaction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (catcb *CoinAccountTransactionCreateBulk) OnConflictColumns(columns ...string) *CoinAccountTransactionUpsertBulk {
	catcb.conflict = append(catcb.conflict, sql.ConflictColumns(columns...))
	return &CoinAccountTransactionUpsertBulk{
		create: catcb,
	}
}

// CoinAccountTransactionUpsertBulk is the builder for "upsert"-ing
// a bulk of CoinAccountTransaction nodes.
type CoinAccountTransactionUpsertBulk struct {
	create *CoinAccountTransactionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CoinAccountTransaction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(coinaccounttransaction.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CoinAccountTransactionUpsertBulk) UpdateNewValues() *CoinAccountTransactionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(coinaccounttransaction.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CoinAccountTransaction.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *CoinAccountTransactionUpsertBulk) Ignore() *CoinAccountTransactionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CoinAccountTransactionUpsertBulk) DoNothing() *CoinAccountTransactionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CoinAccountTransactionCreateBulk.OnConflict
// documentation for more info.
func (u *CoinAccountTransactionUpsertBulk) Update(set func(*CoinAccountTransactionUpsert)) *CoinAccountTransactionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CoinAccountTransactionUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *CoinAccountTransactionUpsertBulk) SetAppID(v uuid.UUID) *CoinAccountTransactionUpsertBulk {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsertBulk) UpdateAppID() *CoinAccountTransactionUpsertBulk {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.UpdateAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *CoinAccountTransactionUpsertBulk) SetUserID(v uuid.UUID) *CoinAccountTransactionUpsertBulk {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsertBulk) UpdateUserID() *CoinAccountTransactionUpsertBulk {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.UpdateUserID()
	})
}

// SetFromAddressID sets the "from_address_id" field.
func (u *CoinAccountTransactionUpsertBulk) SetFromAddressID(v uuid.UUID) *CoinAccountTransactionUpsertBulk {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.SetFromAddressID(v)
	})
}

// UpdateFromAddressID sets the "from_address_id" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsertBulk) UpdateFromAddressID() *CoinAccountTransactionUpsertBulk {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.UpdateFromAddressID()
	})
}

// SetToAddressID sets the "to_address_id" field.
func (u *CoinAccountTransactionUpsertBulk) SetToAddressID(v uuid.UUID) *CoinAccountTransactionUpsertBulk {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.SetToAddressID(v)
	})
}

// UpdateToAddressID sets the "to_address_id" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsertBulk) UpdateToAddressID() *CoinAccountTransactionUpsertBulk {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.UpdateToAddressID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *CoinAccountTransactionUpsertBulk) SetCoinTypeID(v uuid.UUID) *CoinAccountTransactionUpsertBulk {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsertBulk) UpdateCoinTypeID() *CoinAccountTransactionUpsertBulk {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.UpdateCoinTypeID()
	})
}

// SetAmount sets the "amount" field.
func (u *CoinAccountTransactionUpsertBulk) SetAmount(v uint64) *CoinAccountTransactionUpsertBulk {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *CoinAccountTransactionUpsertBulk) AddAmount(v uint64) *CoinAccountTransactionUpsertBulk {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsertBulk) UpdateAmount() *CoinAccountTransactionUpsertBulk {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.UpdateAmount()
	})
}

// SetMessage sets the "message" field.
func (u *CoinAccountTransactionUpsertBulk) SetMessage(v string) *CoinAccountTransactionUpsertBulk {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsertBulk) UpdateMessage() *CoinAccountTransactionUpsertBulk {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.UpdateMessage()
	})
}

// SetState sets the "state" field.
func (u *CoinAccountTransactionUpsertBulk) SetState(v coinaccounttransaction.State) *CoinAccountTransactionUpsertBulk {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsertBulk) UpdateState() *CoinAccountTransactionUpsertBulk {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.UpdateState()
	})
}

// SetChainTransactionID sets the "chain_transaction_id" field.
func (u *CoinAccountTransactionUpsertBulk) SetChainTransactionID(v string) *CoinAccountTransactionUpsertBulk {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.SetChainTransactionID(v)
	})
}

// UpdateChainTransactionID sets the "chain_transaction_id" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsertBulk) UpdateChainTransactionID() *CoinAccountTransactionUpsertBulk {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.UpdateChainTransactionID()
	})
}

// SetPlatformTransactionID sets the "platform_transaction_id" field.
func (u *CoinAccountTransactionUpsertBulk) SetPlatformTransactionID(v uuid.UUID) *CoinAccountTransactionUpsertBulk {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.SetPlatformTransactionID(v)
	})
}

// UpdatePlatformTransactionID sets the "platform_transaction_id" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsertBulk) UpdatePlatformTransactionID() *CoinAccountTransactionUpsertBulk {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.UpdatePlatformTransactionID()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *CoinAccountTransactionUpsertBulk) SetCreateAt(v uint32) *CoinAccountTransactionUpsertBulk {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *CoinAccountTransactionUpsertBulk) AddCreateAt(v uint32) *CoinAccountTransactionUpsertBulk {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsertBulk) UpdateCreateAt() *CoinAccountTransactionUpsertBulk {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *CoinAccountTransactionUpsertBulk) SetUpdateAt(v uint32) *CoinAccountTransactionUpsertBulk {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *CoinAccountTransactionUpsertBulk) AddUpdateAt(v uint32) *CoinAccountTransactionUpsertBulk {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsertBulk) UpdateUpdateAt() *CoinAccountTransactionUpsertBulk {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *CoinAccountTransactionUpsertBulk) SetDeleteAt(v uint32) *CoinAccountTransactionUpsertBulk {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *CoinAccountTransactionUpsertBulk) AddDeleteAt(v uint32) *CoinAccountTransactionUpsertBulk {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *CoinAccountTransactionUpsertBulk) UpdateDeleteAt() *CoinAccountTransactionUpsertBulk {
	return u.Update(func(s *CoinAccountTransactionUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *CoinAccountTransactionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CoinAccountTransactionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CoinAccountTransactionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CoinAccountTransactionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
