// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/userwithdrawitem"
	"github.com/google/uuid"
)

// UserWithdrawItem is the model entity for the UserWithdrawItem schema.
type UserWithdrawItem struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// CoinTypeID holds the value of the "coin_type_id" field.
	CoinTypeID uuid.UUID `json:"coin_type_id,omitempty"`
	// WithdrawToAccountID holds the value of the "withdraw_to_account_id" field.
	WithdrawToAccountID uuid.UUID `json:"withdraw_to_account_id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount uint64 `json:"amount,omitempty"`
	// PlatformTransactionID holds the value of the "platform_transaction_id" field.
	PlatformTransactionID uuid.UUID `json:"platform_transaction_id,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserWithdrawItem) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case userwithdrawitem.FieldAmount, userwithdrawitem.FieldCreateAt, userwithdrawitem.FieldUpdateAt, userwithdrawitem.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case userwithdrawitem.FieldID, userwithdrawitem.FieldAppID, userwithdrawitem.FieldUserID, userwithdrawitem.FieldCoinTypeID, userwithdrawitem.FieldWithdrawToAccountID, userwithdrawitem.FieldPlatformTransactionID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserWithdrawItem", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserWithdrawItem fields.
func (uwi *UserWithdrawItem) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userwithdrawitem.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				uwi.ID = *value
			}
		case userwithdrawitem.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				uwi.AppID = *value
			}
		case userwithdrawitem.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				uwi.UserID = *value
			}
		case userwithdrawitem.FieldCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type_id", values[i])
			} else if value != nil {
				uwi.CoinTypeID = *value
			}
		case userwithdrawitem.FieldWithdrawToAccountID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field withdraw_to_account_id", values[i])
			} else if value != nil {
				uwi.WithdrawToAccountID = *value
			}
		case userwithdrawitem.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				uwi.Amount = uint64(value.Int64)
			}
		case userwithdrawitem.FieldPlatformTransactionID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field platform_transaction_id", values[i])
			} else if value != nil {
				uwi.PlatformTransactionID = *value
			}
		case userwithdrawitem.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				uwi.CreateAt = uint32(value.Int64)
			}
		case userwithdrawitem.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				uwi.UpdateAt = uint32(value.Int64)
			}
		case userwithdrawitem.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				uwi.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UserWithdrawItem.
// Note that you need to call UserWithdrawItem.Unwrap() before calling this method if this UserWithdrawItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (uwi *UserWithdrawItem) Update() *UserWithdrawItemUpdateOne {
	return (&UserWithdrawItemClient{config: uwi.config}).UpdateOne(uwi)
}

// Unwrap unwraps the UserWithdrawItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uwi *UserWithdrawItem) Unwrap() *UserWithdrawItem {
	tx, ok := uwi.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserWithdrawItem is not a transactional entity")
	}
	uwi.config.driver = tx.drv
	return uwi
}

// String implements the fmt.Stringer.
func (uwi *UserWithdrawItem) String() string {
	var builder strings.Builder
	builder.WriteString("UserWithdrawItem(")
	builder.WriteString(fmt.Sprintf("id=%v", uwi.ID))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", uwi.AppID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", uwi.UserID))
	builder.WriteString(", coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", uwi.CoinTypeID))
	builder.WriteString(", withdraw_to_account_id=")
	builder.WriteString(fmt.Sprintf("%v", uwi.WithdrawToAccountID))
	builder.WriteString(", amount=")
	builder.WriteString(fmt.Sprintf("%v", uwi.Amount))
	builder.WriteString(", platform_transaction_id=")
	builder.WriteString(fmt.Sprintf("%v", uwi.PlatformTransactionID))
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", uwi.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", uwi.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", uwi.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// UserWithdrawItems is a parsable slice of UserWithdrawItem.
type UserWithdrawItems []*UserWithdrawItem

func (uwi UserWithdrawItems) config(cfg config) {
	for _i := range uwi {
		uwi[_i].config = cfg
	}
}
