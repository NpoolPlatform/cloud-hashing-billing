// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/coinaccountinfo"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// CoinAccountInfoUpdate is the builder for updating CoinAccountInfo entities.
type CoinAccountInfoUpdate struct {
	config
	hooks    []Hook
	mutation *CoinAccountInfoMutation
}

// Where appends a list predicates to the CoinAccountInfoUpdate builder.
func (caiu *CoinAccountInfoUpdate) Where(ps ...predicate.CoinAccountInfo) *CoinAccountInfoUpdate {
	caiu.mutation.Where(ps...)
	return caiu
}

// SetCoinTypeID sets the "coin_type_id" field.
func (caiu *CoinAccountInfoUpdate) SetCoinTypeID(u uuid.UUID) *CoinAccountInfoUpdate {
	caiu.mutation.SetCoinTypeID(u)
	return caiu
}

// SetAddress sets the "address" field.
func (caiu *CoinAccountInfoUpdate) SetAddress(s string) *CoinAccountInfoUpdate {
	caiu.mutation.SetAddress(s)
	return caiu
}

// SetGeneratedBy sets the "generated_by" field.
func (caiu *CoinAccountInfoUpdate) SetGeneratedBy(cb coinaccountinfo.GeneratedBy) *CoinAccountInfoUpdate {
	caiu.mutation.SetGeneratedBy(cb)
	return caiu
}

// SetUsedFor sets the "used_for" field.
func (caiu *CoinAccountInfoUpdate) SetUsedFor(cf coinaccountinfo.UsedFor) *CoinAccountInfoUpdate {
	caiu.mutation.SetUsedFor(cf)
	return caiu
}

// SetIdle sets the "idle" field.
func (caiu *CoinAccountInfoUpdate) SetIdle(b bool) *CoinAccountInfoUpdate {
	caiu.mutation.SetIdle(b)
	return caiu
}

// SetAppID sets the "app_id" field.
func (caiu *CoinAccountInfoUpdate) SetAppID(u uuid.UUID) *CoinAccountInfoUpdate {
	caiu.mutation.SetAppID(u)
	return caiu
}

// SetUserID sets the "user_id" field.
func (caiu *CoinAccountInfoUpdate) SetUserID(u uuid.UUID) *CoinAccountInfoUpdate {
	caiu.mutation.SetUserID(u)
	return caiu
}

// SetCreateAt sets the "create_at" field.
func (caiu *CoinAccountInfoUpdate) SetCreateAt(u uint32) *CoinAccountInfoUpdate {
	caiu.mutation.ResetCreateAt()
	caiu.mutation.SetCreateAt(u)
	return caiu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (caiu *CoinAccountInfoUpdate) SetNillableCreateAt(u *uint32) *CoinAccountInfoUpdate {
	if u != nil {
		caiu.SetCreateAt(*u)
	}
	return caiu
}

// AddCreateAt adds u to the "create_at" field.
func (caiu *CoinAccountInfoUpdate) AddCreateAt(u uint32) *CoinAccountInfoUpdate {
	caiu.mutation.AddCreateAt(u)
	return caiu
}

// SetUpdateAt sets the "update_at" field.
func (caiu *CoinAccountInfoUpdate) SetUpdateAt(u uint32) *CoinAccountInfoUpdate {
	caiu.mutation.ResetUpdateAt()
	caiu.mutation.SetUpdateAt(u)
	return caiu
}

// AddUpdateAt adds u to the "update_at" field.
func (caiu *CoinAccountInfoUpdate) AddUpdateAt(u uint32) *CoinAccountInfoUpdate {
	caiu.mutation.AddUpdateAt(u)
	return caiu
}

// SetDeleteAt sets the "delete_at" field.
func (caiu *CoinAccountInfoUpdate) SetDeleteAt(u uint32) *CoinAccountInfoUpdate {
	caiu.mutation.ResetDeleteAt()
	caiu.mutation.SetDeleteAt(u)
	return caiu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (caiu *CoinAccountInfoUpdate) SetNillableDeleteAt(u *uint32) *CoinAccountInfoUpdate {
	if u != nil {
		caiu.SetDeleteAt(*u)
	}
	return caiu
}

// AddDeleteAt adds u to the "delete_at" field.
func (caiu *CoinAccountInfoUpdate) AddDeleteAt(u uint32) *CoinAccountInfoUpdate {
	caiu.mutation.AddDeleteAt(u)
	return caiu
}

// Mutation returns the CoinAccountInfoMutation object of the builder.
func (caiu *CoinAccountInfoUpdate) Mutation() *CoinAccountInfoMutation {
	return caiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (caiu *CoinAccountInfoUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	caiu.defaults()
	if len(caiu.hooks) == 0 {
		if err = caiu.check(); err != nil {
			return 0, err
		}
		affected, err = caiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CoinAccountInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = caiu.check(); err != nil {
				return 0, err
			}
			caiu.mutation = mutation
			affected, err = caiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(caiu.hooks) - 1; i >= 0; i-- {
			if caiu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = caiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, caiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (caiu *CoinAccountInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := caiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (caiu *CoinAccountInfoUpdate) Exec(ctx context.Context) error {
	_, err := caiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (caiu *CoinAccountInfoUpdate) ExecX(ctx context.Context) {
	if err := caiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (caiu *CoinAccountInfoUpdate) defaults() {
	if _, ok := caiu.mutation.UpdateAt(); !ok {
		v := coinaccountinfo.UpdateDefaultUpdateAt()
		caiu.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (caiu *CoinAccountInfoUpdate) check() error {
	if v, ok := caiu.mutation.GeneratedBy(); ok {
		if err := coinaccountinfo.GeneratedByValidator(v); err != nil {
			return &ValidationError{Name: "generated_by", err: fmt.Errorf("ent: validator failed for field \"generated_by\": %w", err)}
		}
	}
	if v, ok := caiu.mutation.UsedFor(); ok {
		if err := coinaccountinfo.UsedForValidator(v); err != nil {
			return &ValidationError{Name: "used_for", err: fmt.Errorf("ent: validator failed for field \"used_for\": %w", err)}
		}
	}
	return nil
}

func (caiu *CoinAccountInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   coinaccountinfo.Table,
			Columns: coinaccountinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: coinaccountinfo.FieldID,
			},
		},
	}
	if ps := caiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := caiu.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinaccountinfo.FieldCoinTypeID,
		})
	}
	if value, ok := caiu.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coinaccountinfo.FieldAddress,
		})
	}
	if value, ok := caiu.mutation.GeneratedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: coinaccountinfo.FieldGeneratedBy,
		})
	}
	if value, ok := caiu.mutation.UsedFor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: coinaccountinfo.FieldUsedFor,
		})
	}
	if value, ok := caiu.mutation.Idle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: coinaccountinfo.FieldIdle,
		})
	}
	if value, ok := caiu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinaccountinfo.FieldAppID,
		})
	}
	if value, ok := caiu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinaccountinfo.FieldUserID,
		})
	}
	if value, ok := caiu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinaccountinfo.FieldCreateAt,
		})
	}
	if value, ok := caiu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinaccountinfo.FieldCreateAt,
		})
	}
	if value, ok := caiu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinaccountinfo.FieldUpdateAt,
		})
	}
	if value, ok := caiu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinaccountinfo.FieldUpdateAt,
		})
	}
	if value, ok := caiu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinaccountinfo.FieldDeleteAt,
		})
	}
	if value, ok := caiu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinaccountinfo.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, caiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coinaccountinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CoinAccountInfoUpdateOne is the builder for updating a single CoinAccountInfo entity.
type CoinAccountInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CoinAccountInfoMutation
}

// SetCoinTypeID sets the "coin_type_id" field.
func (caiuo *CoinAccountInfoUpdateOne) SetCoinTypeID(u uuid.UUID) *CoinAccountInfoUpdateOne {
	caiuo.mutation.SetCoinTypeID(u)
	return caiuo
}

// SetAddress sets the "address" field.
func (caiuo *CoinAccountInfoUpdateOne) SetAddress(s string) *CoinAccountInfoUpdateOne {
	caiuo.mutation.SetAddress(s)
	return caiuo
}

// SetGeneratedBy sets the "generated_by" field.
func (caiuo *CoinAccountInfoUpdateOne) SetGeneratedBy(cb coinaccountinfo.GeneratedBy) *CoinAccountInfoUpdateOne {
	caiuo.mutation.SetGeneratedBy(cb)
	return caiuo
}

// SetUsedFor sets the "used_for" field.
func (caiuo *CoinAccountInfoUpdateOne) SetUsedFor(cf coinaccountinfo.UsedFor) *CoinAccountInfoUpdateOne {
	caiuo.mutation.SetUsedFor(cf)
	return caiuo
}

// SetIdle sets the "idle" field.
func (caiuo *CoinAccountInfoUpdateOne) SetIdle(b bool) *CoinAccountInfoUpdateOne {
	caiuo.mutation.SetIdle(b)
	return caiuo
}

// SetAppID sets the "app_id" field.
func (caiuo *CoinAccountInfoUpdateOne) SetAppID(u uuid.UUID) *CoinAccountInfoUpdateOne {
	caiuo.mutation.SetAppID(u)
	return caiuo
}

// SetUserID sets the "user_id" field.
func (caiuo *CoinAccountInfoUpdateOne) SetUserID(u uuid.UUID) *CoinAccountInfoUpdateOne {
	caiuo.mutation.SetUserID(u)
	return caiuo
}

// SetCreateAt sets the "create_at" field.
func (caiuo *CoinAccountInfoUpdateOne) SetCreateAt(u uint32) *CoinAccountInfoUpdateOne {
	caiuo.mutation.ResetCreateAt()
	caiuo.mutation.SetCreateAt(u)
	return caiuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (caiuo *CoinAccountInfoUpdateOne) SetNillableCreateAt(u *uint32) *CoinAccountInfoUpdateOne {
	if u != nil {
		caiuo.SetCreateAt(*u)
	}
	return caiuo
}

// AddCreateAt adds u to the "create_at" field.
func (caiuo *CoinAccountInfoUpdateOne) AddCreateAt(u uint32) *CoinAccountInfoUpdateOne {
	caiuo.mutation.AddCreateAt(u)
	return caiuo
}

// SetUpdateAt sets the "update_at" field.
func (caiuo *CoinAccountInfoUpdateOne) SetUpdateAt(u uint32) *CoinAccountInfoUpdateOne {
	caiuo.mutation.ResetUpdateAt()
	caiuo.mutation.SetUpdateAt(u)
	return caiuo
}

// AddUpdateAt adds u to the "update_at" field.
func (caiuo *CoinAccountInfoUpdateOne) AddUpdateAt(u uint32) *CoinAccountInfoUpdateOne {
	caiuo.mutation.AddUpdateAt(u)
	return caiuo
}

// SetDeleteAt sets the "delete_at" field.
func (caiuo *CoinAccountInfoUpdateOne) SetDeleteAt(u uint32) *CoinAccountInfoUpdateOne {
	caiuo.mutation.ResetDeleteAt()
	caiuo.mutation.SetDeleteAt(u)
	return caiuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (caiuo *CoinAccountInfoUpdateOne) SetNillableDeleteAt(u *uint32) *CoinAccountInfoUpdateOne {
	if u != nil {
		caiuo.SetDeleteAt(*u)
	}
	return caiuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (caiuo *CoinAccountInfoUpdateOne) AddDeleteAt(u uint32) *CoinAccountInfoUpdateOne {
	caiuo.mutation.AddDeleteAt(u)
	return caiuo
}

// Mutation returns the CoinAccountInfoMutation object of the builder.
func (caiuo *CoinAccountInfoUpdateOne) Mutation() *CoinAccountInfoMutation {
	return caiuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (caiuo *CoinAccountInfoUpdateOne) Select(field string, fields ...string) *CoinAccountInfoUpdateOne {
	caiuo.fields = append([]string{field}, fields...)
	return caiuo
}

// Save executes the query and returns the updated CoinAccountInfo entity.
func (caiuo *CoinAccountInfoUpdateOne) Save(ctx context.Context) (*CoinAccountInfo, error) {
	var (
		err  error
		node *CoinAccountInfo
	)
	caiuo.defaults()
	if len(caiuo.hooks) == 0 {
		if err = caiuo.check(); err != nil {
			return nil, err
		}
		node, err = caiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CoinAccountInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = caiuo.check(); err != nil {
				return nil, err
			}
			caiuo.mutation = mutation
			node, err = caiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(caiuo.hooks) - 1; i >= 0; i-- {
			if caiuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = caiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, caiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (caiuo *CoinAccountInfoUpdateOne) SaveX(ctx context.Context) *CoinAccountInfo {
	node, err := caiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (caiuo *CoinAccountInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := caiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (caiuo *CoinAccountInfoUpdateOne) ExecX(ctx context.Context) {
	if err := caiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (caiuo *CoinAccountInfoUpdateOne) defaults() {
	if _, ok := caiuo.mutation.UpdateAt(); !ok {
		v := coinaccountinfo.UpdateDefaultUpdateAt()
		caiuo.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (caiuo *CoinAccountInfoUpdateOne) check() error {
	if v, ok := caiuo.mutation.GeneratedBy(); ok {
		if err := coinaccountinfo.GeneratedByValidator(v); err != nil {
			return &ValidationError{Name: "generated_by", err: fmt.Errorf("ent: validator failed for field \"generated_by\": %w", err)}
		}
	}
	if v, ok := caiuo.mutation.UsedFor(); ok {
		if err := coinaccountinfo.UsedForValidator(v); err != nil {
			return &ValidationError{Name: "used_for", err: fmt.Errorf("ent: validator failed for field \"used_for\": %w", err)}
		}
	}
	return nil
}

func (caiuo *CoinAccountInfoUpdateOne) sqlSave(ctx context.Context) (_node *CoinAccountInfo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   coinaccountinfo.Table,
			Columns: coinaccountinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: coinaccountinfo.FieldID,
			},
		},
	}
	id, ok := caiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CoinAccountInfo.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := caiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, coinaccountinfo.FieldID)
		for _, f := range fields {
			if !coinaccountinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != coinaccountinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := caiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := caiuo.mutation.CoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinaccountinfo.FieldCoinTypeID,
		})
	}
	if value, ok := caiuo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coinaccountinfo.FieldAddress,
		})
	}
	if value, ok := caiuo.mutation.GeneratedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: coinaccountinfo.FieldGeneratedBy,
		})
	}
	if value, ok := caiuo.mutation.UsedFor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: coinaccountinfo.FieldUsedFor,
		})
	}
	if value, ok := caiuo.mutation.Idle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: coinaccountinfo.FieldIdle,
		})
	}
	if value, ok := caiuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinaccountinfo.FieldAppID,
		})
	}
	if value, ok := caiuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinaccountinfo.FieldUserID,
		})
	}
	if value, ok := caiuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinaccountinfo.FieldCreateAt,
		})
	}
	if value, ok := caiuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinaccountinfo.FieldCreateAt,
		})
	}
	if value, ok := caiuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinaccountinfo.FieldUpdateAt,
		})
	}
	if value, ok := caiuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinaccountinfo.FieldUpdateAt,
		})
	}
	if value, ok := caiuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinaccountinfo.FieldDeleteAt,
		})
	}
	if value, ok := caiuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinaccountinfo.FieldDeleteAt,
		})
	}
	_node = &CoinAccountInfo{config: caiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, caiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coinaccountinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
