// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/goodbenefit"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// GoodBenefitUpdate is the builder for updating GoodBenefit entities.
type GoodBenefitUpdate struct {
	config
	hooks    []Hook
	mutation *GoodBenefitMutation
}

// Where appends a list predicates to the GoodBenefitUpdate builder.
func (gbu *GoodBenefitUpdate) Where(ps ...predicate.GoodBenefit) *GoodBenefitUpdate {
	gbu.mutation.Where(ps...)
	return gbu
}

// SetGoodID sets the "good_id" field.
func (gbu *GoodBenefitUpdate) SetGoodID(u uuid.UUID) *GoodBenefitUpdate {
	gbu.mutation.SetGoodID(u)
	return gbu
}

// SetBenefitAccountID sets the "benefit_account_id" field.
func (gbu *GoodBenefitUpdate) SetBenefitAccountID(u uuid.UUID) *GoodBenefitUpdate {
	gbu.mutation.SetBenefitAccountID(u)
	return gbu
}

// SetBenefitIntervalHours sets the "benefit_interval_hours" field.
func (gbu *GoodBenefitUpdate) SetBenefitIntervalHours(u uint32) *GoodBenefitUpdate {
	gbu.mutation.ResetBenefitIntervalHours()
	gbu.mutation.SetBenefitIntervalHours(u)
	return gbu
}

// AddBenefitIntervalHours adds u to the "benefit_interval_hours" field.
func (gbu *GoodBenefitUpdate) AddBenefitIntervalHours(u int32) *GoodBenefitUpdate {
	gbu.mutation.AddBenefitIntervalHours(u)
	return gbu
}

// SetCreateAt sets the "create_at" field.
func (gbu *GoodBenefitUpdate) SetCreateAt(u uint32) *GoodBenefitUpdate {
	gbu.mutation.ResetCreateAt()
	gbu.mutation.SetCreateAt(u)
	return gbu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (gbu *GoodBenefitUpdate) SetNillableCreateAt(u *uint32) *GoodBenefitUpdate {
	if u != nil {
		gbu.SetCreateAt(*u)
	}
	return gbu
}

// AddCreateAt adds u to the "create_at" field.
func (gbu *GoodBenefitUpdate) AddCreateAt(u int32) *GoodBenefitUpdate {
	gbu.mutation.AddCreateAt(u)
	return gbu
}

// SetUpdateAt sets the "update_at" field.
func (gbu *GoodBenefitUpdate) SetUpdateAt(u uint32) *GoodBenefitUpdate {
	gbu.mutation.ResetUpdateAt()
	gbu.mutation.SetUpdateAt(u)
	return gbu
}

// AddUpdateAt adds u to the "update_at" field.
func (gbu *GoodBenefitUpdate) AddUpdateAt(u int32) *GoodBenefitUpdate {
	gbu.mutation.AddUpdateAt(u)
	return gbu
}

// SetDeleteAt sets the "delete_at" field.
func (gbu *GoodBenefitUpdate) SetDeleteAt(u uint32) *GoodBenefitUpdate {
	gbu.mutation.ResetDeleteAt()
	gbu.mutation.SetDeleteAt(u)
	return gbu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (gbu *GoodBenefitUpdate) SetNillableDeleteAt(u *uint32) *GoodBenefitUpdate {
	if u != nil {
		gbu.SetDeleteAt(*u)
	}
	return gbu
}

// AddDeleteAt adds u to the "delete_at" field.
func (gbu *GoodBenefitUpdate) AddDeleteAt(u int32) *GoodBenefitUpdate {
	gbu.mutation.AddDeleteAt(u)
	return gbu
}

// Mutation returns the GoodBenefitMutation object of the builder.
func (gbu *GoodBenefitUpdate) Mutation() *GoodBenefitMutation {
	return gbu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gbu *GoodBenefitUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	gbu.defaults()
	if len(gbu.hooks) == 0 {
		affected, err = gbu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodBenefitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gbu.mutation = mutation
			affected, err = gbu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gbu.hooks) - 1; i >= 0; i-- {
			if gbu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gbu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gbu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gbu *GoodBenefitUpdate) SaveX(ctx context.Context) int {
	affected, err := gbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gbu *GoodBenefitUpdate) Exec(ctx context.Context) error {
	_, err := gbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gbu *GoodBenefitUpdate) ExecX(ctx context.Context) {
	if err := gbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gbu *GoodBenefitUpdate) defaults() {
	if _, ok := gbu.mutation.UpdateAt(); !ok {
		v := goodbenefit.UpdateDefaultUpdateAt()
		gbu.mutation.SetUpdateAt(v)
	}
}

func (gbu *GoodBenefitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodbenefit.Table,
			Columns: goodbenefit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodbenefit.FieldID,
			},
		},
	}
	if ps := gbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gbu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodbenefit.FieldGoodID,
		})
	}
	if value, ok := gbu.mutation.BenefitAccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodbenefit.FieldBenefitAccountID,
		})
	}
	if value, ok := gbu.mutation.BenefitIntervalHours(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldBenefitIntervalHours,
		})
	}
	if value, ok := gbu.mutation.AddedBenefitIntervalHours(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldBenefitIntervalHours,
		})
	}
	if value, ok := gbu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldCreateAt,
		})
	}
	if value, ok := gbu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldCreateAt,
		})
	}
	if value, ok := gbu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldUpdateAt,
		})
	}
	if value, ok := gbu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldUpdateAt,
		})
	}
	if value, ok := gbu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldDeleteAt,
		})
	}
	if value, ok := gbu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodbenefit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// GoodBenefitUpdateOne is the builder for updating a single GoodBenefit entity.
type GoodBenefitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GoodBenefitMutation
}

// SetGoodID sets the "good_id" field.
func (gbuo *GoodBenefitUpdateOne) SetGoodID(u uuid.UUID) *GoodBenefitUpdateOne {
	gbuo.mutation.SetGoodID(u)
	return gbuo
}

// SetBenefitAccountID sets the "benefit_account_id" field.
func (gbuo *GoodBenefitUpdateOne) SetBenefitAccountID(u uuid.UUID) *GoodBenefitUpdateOne {
	gbuo.mutation.SetBenefitAccountID(u)
	return gbuo
}

// SetBenefitIntervalHours sets the "benefit_interval_hours" field.
func (gbuo *GoodBenefitUpdateOne) SetBenefitIntervalHours(u uint32) *GoodBenefitUpdateOne {
	gbuo.mutation.ResetBenefitIntervalHours()
	gbuo.mutation.SetBenefitIntervalHours(u)
	return gbuo
}

// AddBenefitIntervalHours adds u to the "benefit_interval_hours" field.
func (gbuo *GoodBenefitUpdateOne) AddBenefitIntervalHours(u int32) *GoodBenefitUpdateOne {
	gbuo.mutation.AddBenefitIntervalHours(u)
	return gbuo
}

// SetCreateAt sets the "create_at" field.
func (gbuo *GoodBenefitUpdateOne) SetCreateAt(u uint32) *GoodBenefitUpdateOne {
	gbuo.mutation.ResetCreateAt()
	gbuo.mutation.SetCreateAt(u)
	return gbuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (gbuo *GoodBenefitUpdateOne) SetNillableCreateAt(u *uint32) *GoodBenefitUpdateOne {
	if u != nil {
		gbuo.SetCreateAt(*u)
	}
	return gbuo
}

// AddCreateAt adds u to the "create_at" field.
func (gbuo *GoodBenefitUpdateOne) AddCreateAt(u int32) *GoodBenefitUpdateOne {
	gbuo.mutation.AddCreateAt(u)
	return gbuo
}

// SetUpdateAt sets the "update_at" field.
func (gbuo *GoodBenefitUpdateOne) SetUpdateAt(u uint32) *GoodBenefitUpdateOne {
	gbuo.mutation.ResetUpdateAt()
	gbuo.mutation.SetUpdateAt(u)
	return gbuo
}

// AddUpdateAt adds u to the "update_at" field.
func (gbuo *GoodBenefitUpdateOne) AddUpdateAt(u int32) *GoodBenefitUpdateOne {
	gbuo.mutation.AddUpdateAt(u)
	return gbuo
}

// SetDeleteAt sets the "delete_at" field.
func (gbuo *GoodBenefitUpdateOne) SetDeleteAt(u uint32) *GoodBenefitUpdateOne {
	gbuo.mutation.ResetDeleteAt()
	gbuo.mutation.SetDeleteAt(u)
	return gbuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (gbuo *GoodBenefitUpdateOne) SetNillableDeleteAt(u *uint32) *GoodBenefitUpdateOne {
	if u != nil {
		gbuo.SetDeleteAt(*u)
	}
	return gbuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (gbuo *GoodBenefitUpdateOne) AddDeleteAt(u int32) *GoodBenefitUpdateOne {
	gbuo.mutation.AddDeleteAt(u)
	return gbuo
}

// Mutation returns the GoodBenefitMutation object of the builder.
func (gbuo *GoodBenefitUpdateOne) Mutation() *GoodBenefitMutation {
	return gbuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gbuo *GoodBenefitUpdateOne) Select(field string, fields ...string) *GoodBenefitUpdateOne {
	gbuo.fields = append([]string{field}, fields...)
	return gbuo
}

// Save executes the query and returns the updated GoodBenefit entity.
func (gbuo *GoodBenefitUpdateOne) Save(ctx context.Context) (*GoodBenefit, error) {
	var (
		err  error
		node *GoodBenefit
	)
	gbuo.defaults()
	if len(gbuo.hooks) == 0 {
		node, err = gbuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodBenefitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gbuo.mutation = mutation
			node, err = gbuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gbuo.hooks) - 1; i >= 0; i-- {
			if gbuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gbuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, gbuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*GoodBenefit)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GoodBenefitMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gbuo *GoodBenefitUpdateOne) SaveX(ctx context.Context) *GoodBenefit {
	node, err := gbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gbuo *GoodBenefitUpdateOne) Exec(ctx context.Context) error {
	_, err := gbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gbuo *GoodBenefitUpdateOne) ExecX(ctx context.Context) {
	if err := gbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gbuo *GoodBenefitUpdateOne) defaults() {
	if _, ok := gbuo.mutation.UpdateAt(); !ok {
		v := goodbenefit.UpdateDefaultUpdateAt()
		gbuo.mutation.SetUpdateAt(v)
	}
}

func (gbuo *GoodBenefitUpdateOne) sqlSave(ctx context.Context) (_node *GoodBenefit, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodbenefit.Table,
			Columns: goodbenefit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodbenefit.FieldID,
			},
		},
	}
	id, ok := gbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GoodBenefit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goodbenefit.FieldID)
		for _, f := range fields {
			if !goodbenefit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != goodbenefit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gbuo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodbenefit.FieldGoodID,
		})
	}
	if value, ok := gbuo.mutation.BenefitAccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodbenefit.FieldBenefitAccountID,
		})
	}
	if value, ok := gbuo.mutation.BenefitIntervalHours(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldBenefitIntervalHours,
		})
	}
	if value, ok := gbuo.mutation.AddedBenefitIntervalHours(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldBenefitIntervalHours,
		})
	}
	if value, ok := gbuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldCreateAt,
		})
	}
	if value, ok := gbuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldCreateAt,
		})
	}
	if value, ok := gbuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldUpdateAt,
		})
	}
	if value, ok := gbuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldUpdateAt,
		})
	}
	if value, ok := gbuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldDeleteAt,
		})
	}
	if value, ok := gbuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodbenefit.FieldDeleteAt,
		})
	}
	_node = &GoodBenefit{config: gbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodbenefit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
