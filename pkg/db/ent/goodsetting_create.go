// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/goodsetting"
	"github.com/google/uuid"
)

// GoodSettingCreate is the builder for creating a GoodSetting entity.
type GoodSettingCreate struct {
	config
	mutation *GoodSettingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetGoodID sets the "good_id" field.
func (gsc *GoodSettingCreate) SetGoodID(u uuid.UUID) *GoodSettingCreate {
	gsc.mutation.SetGoodID(u)
	return gsc
}

// SetWarmAccountUsdAmount sets the "warm_account_usd_amount" field.
func (gsc *GoodSettingCreate) SetWarmAccountUsdAmount(u uint64) *GoodSettingCreate {
	gsc.mutation.SetWarmAccountUsdAmount(u)
	return gsc
}

// SetCreateAt sets the "create_at" field.
func (gsc *GoodSettingCreate) SetCreateAt(u uint32) *GoodSettingCreate {
	gsc.mutation.SetCreateAt(u)
	return gsc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (gsc *GoodSettingCreate) SetNillableCreateAt(u *uint32) *GoodSettingCreate {
	if u != nil {
		gsc.SetCreateAt(*u)
	}
	return gsc
}

// SetUpdateAt sets the "update_at" field.
func (gsc *GoodSettingCreate) SetUpdateAt(u uint32) *GoodSettingCreate {
	gsc.mutation.SetUpdateAt(u)
	return gsc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (gsc *GoodSettingCreate) SetNillableUpdateAt(u *uint32) *GoodSettingCreate {
	if u != nil {
		gsc.SetUpdateAt(*u)
	}
	return gsc
}

// SetDeleteAt sets the "delete_at" field.
func (gsc *GoodSettingCreate) SetDeleteAt(u uint32) *GoodSettingCreate {
	gsc.mutation.SetDeleteAt(u)
	return gsc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (gsc *GoodSettingCreate) SetNillableDeleteAt(u *uint32) *GoodSettingCreate {
	if u != nil {
		gsc.SetDeleteAt(*u)
	}
	return gsc
}

// SetID sets the "id" field.
func (gsc *GoodSettingCreate) SetID(u uuid.UUID) *GoodSettingCreate {
	gsc.mutation.SetID(u)
	return gsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (gsc *GoodSettingCreate) SetNillableID(u *uuid.UUID) *GoodSettingCreate {
	if u != nil {
		gsc.SetID(*u)
	}
	return gsc
}

// Mutation returns the GoodSettingMutation object of the builder.
func (gsc *GoodSettingCreate) Mutation() *GoodSettingMutation {
	return gsc.mutation
}

// Save creates the GoodSetting in the database.
func (gsc *GoodSettingCreate) Save(ctx context.Context) (*GoodSetting, error) {
	var (
		err  error
		node *GoodSetting
	)
	gsc.defaults()
	if len(gsc.hooks) == 0 {
		if err = gsc.check(); err != nil {
			return nil, err
		}
		node, err = gsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gsc.check(); err != nil {
				return nil, err
			}
			gsc.mutation = mutation
			if node, err = gsc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gsc.hooks) - 1; i >= 0; i-- {
			if gsc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gsc *GoodSettingCreate) SaveX(ctx context.Context) *GoodSetting {
	v, err := gsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gsc *GoodSettingCreate) Exec(ctx context.Context) error {
	_, err := gsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gsc *GoodSettingCreate) ExecX(ctx context.Context) {
	if err := gsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gsc *GoodSettingCreate) defaults() {
	if _, ok := gsc.mutation.CreateAt(); !ok {
		v := goodsetting.DefaultCreateAt()
		gsc.mutation.SetCreateAt(v)
	}
	if _, ok := gsc.mutation.UpdateAt(); !ok {
		v := goodsetting.DefaultUpdateAt()
		gsc.mutation.SetUpdateAt(v)
	}
	if _, ok := gsc.mutation.DeleteAt(); !ok {
		v := goodsetting.DefaultDeleteAt()
		gsc.mutation.SetDeleteAt(v)
	}
	if _, ok := gsc.mutation.ID(); !ok {
		v := goodsetting.DefaultID()
		gsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gsc *GoodSettingCreate) check() error {
	if _, ok := gsc.mutation.GoodID(); !ok {
		return &ValidationError{Name: "good_id", err: errors.New(`ent: missing required field "GoodSetting.good_id"`)}
	}
	if _, ok := gsc.mutation.WarmAccountUsdAmount(); !ok {
		return &ValidationError{Name: "warm_account_usd_amount", err: errors.New(`ent: missing required field "GoodSetting.warm_account_usd_amount"`)}
	}
	if _, ok := gsc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "GoodSetting.create_at"`)}
	}
	if _, ok := gsc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "GoodSetting.update_at"`)}
	}
	if _, ok := gsc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "GoodSetting.delete_at"`)}
	}
	return nil
}

func (gsc *GoodSettingCreate) sqlSave(ctx context.Context) (*GoodSetting, error) {
	_node, _spec := gsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (gsc *GoodSettingCreate) createSpec() (*GoodSetting, *sqlgraph.CreateSpec) {
	var (
		_node = &GoodSetting{config: gsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: goodsetting.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodsetting.FieldID,
			},
		}
	)
	_spec.OnConflict = gsc.conflict
	if id, ok := gsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := gsc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodsetting.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := gsc.mutation.WarmAccountUsdAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: goodsetting.FieldWarmAccountUsdAmount,
		})
		_node.WarmAccountUsdAmount = value
	}
	if value, ok := gsc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodsetting.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := gsc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodsetting.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := gsc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodsetting.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodSetting.Create().
//		SetGoodID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodSettingUpsert) {
//			SetGoodID(v+v).
//		}).
//		Exec(ctx)
//
func (gsc *GoodSettingCreate) OnConflict(opts ...sql.ConflictOption) *GoodSettingUpsertOne {
	gsc.conflict = opts
	return &GoodSettingUpsertOne{
		create: gsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodSetting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gsc *GoodSettingCreate) OnConflictColumns(columns ...string) *GoodSettingUpsertOne {
	gsc.conflict = append(gsc.conflict, sql.ConflictColumns(columns...))
	return &GoodSettingUpsertOne{
		create: gsc,
	}
}

type (
	// GoodSettingUpsertOne is the builder for "upsert"-ing
	//  one GoodSetting node.
	GoodSettingUpsertOne struct {
		create *GoodSettingCreate
	}

	// GoodSettingUpsert is the "OnConflict" setter.
	GoodSettingUpsert struct {
		*sql.UpdateSet
	}
)

// SetGoodID sets the "good_id" field.
func (u *GoodSettingUpsert) SetGoodID(v uuid.UUID) *GoodSettingUpsert {
	u.Set(goodsetting.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodSettingUpsert) UpdateGoodID() *GoodSettingUpsert {
	u.SetExcluded(goodsetting.FieldGoodID)
	return u
}

// SetWarmAccountUsdAmount sets the "warm_account_usd_amount" field.
func (u *GoodSettingUpsert) SetWarmAccountUsdAmount(v uint64) *GoodSettingUpsert {
	u.Set(goodsetting.FieldWarmAccountUsdAmount, v)
	return u
}

// UpdateWarmAccountUsdAmount sets the "warm_account_usd_amount" field to the value that was provided on create.
func (u *GoodSettingUpsert) UpdateWarmAccountUsdAmount() *GoodSettingUpsert {
	u.SetExcluded(goodsetting.FieldWarmAccountUsdAmount)
	return u
}

// AddWarmAccountUsdAmount adds v to the "warm_account_usd_amount" field.
func (u *GoodSettingUpsert) AddWarmAccountUsdAmount(v uint64) *GoodSettingUpsert {
	u.Add(goodsetting.FieldWarmAccountUsdAmount, v)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *GoodSettingUpsert) SetCreateAt(v uint32) *GoodSettingUpsert {
	u.Set(goodsetting.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *GoodSettingUpsert) UpdateCreateAt() *GoodSettingUpsert {
	u.SetExcluded(goodsetting.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *GoodSettingUpsert) AddCreateAt(v uint32) *GoodSettingUpsert {
	u.Add(goodsetting.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *GoodSettingUpsert) SetUpdateAt(v uint32) *GoodSettingUpsert {
	u.Set(goodsetting.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *GoodSettingUpsert) UpdateUpdateAt() *GoodSettingUpsert {
	u.SetExcluded(goodsetting.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *GoodSettingUpsert) AddUpdateAt(v uint32) *GoodSettingUpsert {
	u.Add(goodsetting.FieldUpdateAt, v)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *GoodSettingUpsert) SetDeleteAt(v uint32) *GoodSettingUpsert {
	u.Set(goodsetting.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *GoodSettingUpsert) UpdateDeleteAt() *GoodSettingUpsert {
	u.SetExcluded(goodsetting.FieldDeleteAt)
	return u
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *GoodSettingUpsert) AddDeleteAt(v uint32) *GoodSettingUpsert {
	u.Add(goodsetting.FieldDeleteAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GoodSetting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodsetting.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodSettingUpsertOne) UpdateNewValues() *GoodSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(goodsetting.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.GoodSetting.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *GoodSettingUpsertOne) Ignore() *GoodSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodSettingUpsertOne) DoNothing() *GoodSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodSettingCreate.OnConflict
// documentation for more info.
func (u *GoodSettingUpsertOne) Update(set func(*GoodSettingUpsert)) *GoodSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodSettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetGoodID sets the "good_id" field.
func (u *GoodSettingUpsertOne) SetGoodID(v uuid.UUID) *GoodSettingUpsertOne {
	return u.Update(func(s *GoodSettingUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodSettingUpsertOne) UpdateGoodID() *GoodSettingUpsertOne {
	return u.Update(func(s *GoodSettingUpsert) {
		s.UpdateGoodID()
	})
}

// SetWarmAccountUsdAmount sets the "warm_account_usd_amount" field.
func (u *GoodSettingUpsertOne) SetWarmAccountUsdAmount(v uint64) *GoodSettingUpsertOne {
	return u.Update(func(s *GoodSettingUpsert) {
		s.SetWarmAccountUsdAmount(v)
	})
}

// AddWarmAccountUsdAmount adds v to the "warm_account_usd_amount" field.
func (u *GoodSettingUpsertOne) AddWarmAccountUsdAmount(v uint64) *GoodSettingUpsertOne {
	return u.Update(func(s *GoodSettingUpsert) {
		s.AddWarmAccountUsdAmount(v)
	})
}

// UpdateWarmAccountUsdAmount sets the "warm_account_usd_amount" field to the value that was provided on create.
func (u *GoodSettingUpsertOne) UpdateWarmAccountUsdAmount() *GoodSettingUpsertOne {
	return u.Update(func(s *GoodSettingUpsert) {
		s.UpdateWarmAccountUsdAmount()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *GoodSettingUpsertOne) SetCreateAt(v uint32) *GoodSettingUpsertOne {
	return u.Update(func(s *GoodSettingUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *GoodSettingUpsertOne) AddCreateAt(v uint32) *GoodSettingUpsertOne {
	return u.Update(func(s *GoodSettingUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *GoodSettingUpsertOne) UpdateCreateAt() *GoodSettingUpsertOne {
	return u.Update(func(s *GoodSettingUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *GoodSettingUpsertOne) SetUpdateAt(v uint32) *GoodSettingUpsertOne {
	return u.Update(func(s *GoodSettingUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *GoodSettingUpsertOne) AddUpdateAt(v uint32) *GoodSettingUpsertOne {
	return u.Update(func(s *GoodSettingUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *GoodSettingUpsertOne) UpdateUpdateAt() *GoodSettingUpsertOne {
	return u.Update(func(s *GoodSettingUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *GoodSettingUpsertOne) SetDeleteAt(v uint32) *GoodSettingUpsertOne {
	return u.Update(func(s *GoodSettingUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *GoodSettingUpsertOne) AddDeleteAt(v uint32) *GoodSettingUpsertOne {
	return u.Update(func(s *GoodSettingUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *GoodSettingUpsertOne) UpdateDeleteAt() *GoodSettingUpsertOne {
	return u.Update(func(s *GoodSettingUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *GoodSettingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoodSettingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodSettingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GoodSettingUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: GoodSettingUpsertOne.ID is not supported by MySQL driver. Use GoodSettingUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GoodSettingUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GoodSettingCreateBulk is the builder for creating many GoodSetting entities in bulk.
type GoodSettingCreateBulk struct {
	config
	builders []*GoodSettingCreate
	conflict []sql.ConflictOption
}

// Save creates the GoodSetting entities in the database.
func (gscb *GoodSettingCreateBulk) Save(ctx context.Context) ([]*GoodSetting, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gscb.builders))
	nodes := make([]*GoodSetting, len(gscb.builders))
	mutators := make([]Mutator, len(gscb.builders))
	for i := range gscb.builders {
		func(i int, root context.Context) {
			builder := gscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoodSettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gscb *GoodSettingCreateBulk) SaveX(ctx context.Context) []*GoodSetting {
	v, err := gscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gscb *GoodSettingCreateBulk) Exec(ctx context.Context) error {
	_, err := gscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gscb *GoodSettingCreateBulk) ExecX(ctx context.Context) {
	if err := gscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodSetting.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodSettingUpsert) {
//			SetGoodID(v+v).
//		}).
//		Exec(ctx)
//
func (gscb *GoodSettingCreateBulk) OnConflict(opts ...sql.ConflictOption) *GoodSettingUpsertBulk {
	gscb.conflict = opts
	return &GoodSettingUpsertBulk{
		create: gscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodSetting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gscb *GoodSettingCreateBulk) OnConflictColumns(columns ...string) *GoodSettingUpsertBulk {
	gscb.conflict = append(gscb.conflict, sql.ConflictColumns(columns...))
	return &GoodSettingUpsertBulk{
		create: gscb,
	}
}

// GoodSettingUpsertBulk is the builder for "upsert"-ing
// a bulk of GoodSetting nodes.
type GoodSettingUpsertBulk struct {
	create *GoodSettingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GoodSetting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodsetting.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodSettingUpsertBulk) UpdateNewValues() *GoodSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(goodsetting.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GoodSetting.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *GoodSettingUpsertBulk) Ignore() *GoodSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodSettingUpsertBulk) DoNothing() *GoodSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodSettingCreateBulk.OnConflict
// documentation for more info.
func (u *GoodSettingUpsertBulk) Update(set func(*GoodSettingUpsert)) *GoodSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodSettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetGoodID sets the "good_id" field.
func (u *GoodSettingUpsertBulk) SetGoodID(v uuid.UUID) *GoodSettingUpsertBulk {
	return u.Update(func(s *GoodSettingUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodSettingUpsertBulk) UpdateGoodID() *GoodSettingUpsertBulk {
	return u.Update(func(s *GoodSettingUpsert) {
		s.UpdateGoodID()
	})
}

// SetWarmAccountUsdAmount sets the "warm_account_usd_amount" field.
func (u *GoodSettingUpsertBulk) SetWarmAccountUsdAmount(v uint64) *GoodSettingUpsertBulk {
	return u.Update(func(s *GoodSettingUpsert) {
		s.SetWarmAccountUsdAmount(v)
	})
}

// AddWarmAccountUsdAmount adds v to the "warm_account_usd_amount" field.
func (u *GoodSettingUpsertBulk) AddWarmAccountUsdAmount(v uint64) *GoodSettingUpsertBulk {
	return u.Update(func(s *GoodSettingUpsert) {
		s.AddWarmAccountUsdAmount(v)
	})
}

// UpdateWarmAccountUsdAmount sets the "warm_account_usd_amount" field to the value that was provided on create.
func (u *GoodSettingUpsertBulk) UpdateWarmAccountUsdAmount() *GoodSettingUpsertBulk {
	return u.Update(func(s *GoodSettingUpsert) {
		s.UpdateWarmAccountUsdAmount()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *GoodSettingUpsertBulk) SetCreateAt(v uint32) *GoodSettingUpsertBulk {
	return u.Update(func(s *GoodSettingUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *GoodSettingUpsertBulk) AddCreateAt(v uint32) *GoodSettingUpsertBulk {
	return u.Update(func(s *GoodSettingUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *GoodSettingUpsertBulk) UpdateCreateAt() *GoodSettingUpsertBulk {
	return u.Update(func(s *GoodSettingUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *GoodSettingUpsertBulk) SetUpdateAt(v uint32) *GoodSettingUpsertBulk {
	return u.Update(func(s *GoodSettingUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *GoodSettingUpsertBulk) AddUpdateAt(v uint32) *GoodSettingUpsertBulk {
	return u.Update(func(s *GoodSettingUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *GoodSettingUpsertBulk) UpdateUpdateAt() *GoodSettingUpsertBulk {
	return u.Update(func(s *GoodSettingUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *GoodSettingUpsertBulk) SetDeleteAt(v uint32) *GoodSettingUpsertBulk {
	return u.Update(func(s *GoodSettingUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *GoodSettingUpsertBulk) AddDeleteAt(v uint32) *GoodSettingUpsertBulk {
	return u.Update(func(s *GoodSettingUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *GoodSettingUpsertBulk) UpdateDeleteAt() *GoodSettingUpsertBulk {
	return u.Update(func(s *GoodSettingUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *GoodSettingUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GoodSettingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoodSettingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodSettingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
