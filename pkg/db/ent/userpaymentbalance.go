// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/userpaymentbalance"
	"github.com/google/uuid"
)

// UserPaymentBalance is the model entity for the UserPaymentBalance schema.
type UserPaymentBalance struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// PaymentID holds the value of the "payment_id" field.
	PaymentID uuid.UUID `json:"payment_id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount uint64 `json:"amount,omitempty"`
	// CoinUsdCurrency holds the value of the "coin_usd_currency" field.
	CoinUsdCurrency uint64 `json:"coin_usd_currency,omitempty"`
	// CoinTypeID holds the value of the "coin_type_id" field.
	CoinTypeID uuid.UUID `json:"coin_type_id,omitempty"`
	// BalanceType holds the value of the "balance_type" field.
	BalanceType string `json:"balance_type,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserPaymentBalance) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case userpaymentbalance.FieldAmount, userpaymentbalance.FieldCoinUsdCurrency, userpaymentbalance.FieldCreateAt, userpaymentbalance.FieldUpdateAt, userpaymentbalance.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case userpaymentbalance.FieldBalanceType:
			values[i] = new(sql.NullString)
		case userpaymentbalance.FieldID, userpaymentbalance.FieldAppID, userpaymentbalance.FieldUserID, userpaymentbalance.FieldPaymentID, userpaymentbalance.FieldCoinTypeID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserPaymentBalance", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserPaymentBalance fields.
func (upb *UserPaymentBalance) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userpaymentbalance.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				upb.ID = *value
			}
		case userpaymentbalance.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				upb.AppID = *value
			}
		case userpaymentbalance.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				upb.UserID = *value
			}
		case userpaymentbalance.FieldPaymentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field payment_id", values[i])
			} else if value != nil {
				upb.PaymentID = *value
			}
		case userpaymentbalance.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				upb.Amount = uint64(value.Int64)
			}
		case userpaymentbalance.FieldCoinUsdCurrency:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field coin_usd_currency", values[i])
			} else if value.Valid {
				upb.CoinUsdCurrency = uint64(value.Int64)
			}
		case userpaymentbalance.FieldCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type_id", values[i])
			} else if value != nil {
				upb.CoinTypeID = *value
			}
		case userpaymentbalance.FieldBalanceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field balance_type", values[i])
			} else if value.Valid {
				upb.BalanceType = value.String
			}
		case userpaymentbalance.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				upb.CreateAt = uint32(value.Int64)
			}
		case userpaymentbalance.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				upb.UpdateAt = uint32(value.Int64)
			}
		case userpaymentbalance.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				upb.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UserPaymentBalance.
// Note that you need to call UserPaymentBalance.Unwrap() before calling this method if this UserPaymentBalance
// was returned from a transaction, and the transaction was committed or rolled back.
func (upb *UserPaymentBalance) Update() *UserPaymentBalanceUpdateOne {
	return (&UserPaymentBalanceClient{config: upb.config}).UpdateOne(upb)
}

// Unwrap unwraps the UserPaymentBalance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (upb *UserPaymentBalance) Unwrap() *UserPaymentBalance {
	_tx, ok := upb.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserPaymentBalance is not a transactional entity")
	}
	upb.config.driver = _tx.drv
	return upb
}

// String implements the fmt.Stringer.
func (upb *UserPaymentBalance) String() string {
	var builder strings.Builder
	builder.WriteString("UserPaymentBalance(")
	builder.WriteString(fmt.Sprintf("id=%v, ", upb.ID))
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", upb.AppID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", upb.UserID))
	builder.WriteString(", ")
	builder.WriteString("payment_id=")
	builder.WriteString(fmt.Sprintf("%v", upb.PaymentID))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", upb.Amount))
	builder.WriteString(", ")
	builder.WriteString("coin_usd_currency=")
	builder.WriteString(fmt.Sprintf("%v", upb.CoinUsdCurrency))
	builder.WriteString(", ")
	builder.WriteString("coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", upb.CoinTypeID))
	builder.WriteString(", ")
	builder.WriteString("balance_type=")
	builder.WriteString(upb.BalanceType)
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(fmt.Sprintf("%v", upb.CreateAt))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(fmt.Sprintf("%v", upb.UpdateAt))
	builder.WriteString(", ")
	builder.WriteString("delete_at=")
	builder.WriteString(fmt.Sprintf("%v", upb.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// UserPaymentBalances is a parsable slice of UserPaymentBalance.
type UserPaymentBalances []*UserPaymentBalance

func (upb UserPaymentBalances) config(cfg config) {
	for _i := range upb {
		upb[_i].config = cfg
	}
}
