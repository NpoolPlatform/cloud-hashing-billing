// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/coinaccountinfo"
	"github.com/google/uuid"
)

// CoinAccountInfoCreate is the builder for creating a CoinAccountInfo entity.
type CoinAccountInfoCreate struct {
	config
	mutation *CoinAccountInfoMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCoinTypeID sets the "coin_type_id" field.
func (caic *CoinAccountInfoCreate) SetCoinTypeID(u uuid.UUID) *CoinAccountInfoCreate {
	caic.mutation.SetCoinTypeID(u)
	return caic
}

// SetAddress sets the "address" field.
func (caic *CoinAccountInfoCreate) SetAddress(s string) *CoinAccountInfoCreate {
	caic.mutation.SetAddress(s)
	return caic
}

// SetPlatformHoldPrivateKey sets the "platform_hold_private_key" field.
func (caic *CoinAccountInfoCreate) SetPlatformHoldPrivateKey(b bool) *CoinAccountInfoCreate {
	caic.mutation.SetPlatformHoldPrivateKey(b)
	return caic
}

// SetCreateAt sets the "create_at" field.
func (caic *CoinAccountInfoCreate) SetCreateAt(u uint32) *CoinAccountInfoCreate {
	caic.mutation.SetCreateAt(u)
	return caic
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (caic *CoinAccountInfoCreate) SetNillableCreateAt(u *uint32) *CoinAccountInfoCreate {
	if u != nil {
		caic.SetCreateAt(*u)
	}
	return caic
}

// SetUpdateAt sets the "update_at" field.
func (caic *CoinAccountInfoCreate) SetUpdateAt(u uint32) *CoinAccountInfoCreate {
	caic.mutation.SetUpdateAt(u)
	return caic
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (caic *CoinAccountInfoCreate) SetNillableUpdateAt(u *uint32) *CoinAccountInfoCreate {
	if u != nil {
		caic.SetUpdateAt(*u)
	}
	return caic
}

// SetDeleteAt sets the "delete_at" field.
func (caic *CoinAccountInfoCreate) SetDeleteAt(u uint32) *CoinAccountInfoCreate {
	caic.mutation.SetDeleteAt(u)
	return caic
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (caic *CoinAccountInfoCreate) SetNillableDeleteAt(u *uint32) *CoinAccountInfoCreate {
	if u != nil {
		caic.SetDeleteAt(*u)
	}
	return caic
}

// SetID sets the "id" field.
func (caic *CoinAccountInfoCreate) SetID(u uuid.UUID) *CoinAccountInfoCreate {
	caic.mutation.SetID(u)
	return caic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (caic *CoinAccountInfoCreate) SetNillableID(u *uuid.UUID) *CoinAccountInfoCreate {
	if u != nil {
		caic.SetID(*u)
	}
	return caic
}

// Mutation returns the CoinAccountInfoMutation object of the builder.
func (caic *CoinAccountInfoCreate) Mutation() *CoinAccountInfoMutation {
	return caic.mutation
}

// Save creates the CoinAccountInfo in the database.
func (caic *CoinAccountInfoCreate) Save(ctx context.Context) (*CoinAccountInfo, error) {
	var (
		err  error
		node *CoinAccountInfo
	)
	caic.defaults()
	if len(caic.hooks) == 0 {
		if err = caic.check(); err != nil {
			return nil, err
		}
		node, err = caic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CoinAccountInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = caic.check(); err != nil {
				return nil, err
			}
			caic.mutation = mutation
			if node, err = caic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(caic.hooks) - 1; i >= 0; i-- {
			if caic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = caic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, caic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (caic *CoinAccountInfoCreate) SaveX(ctx context.Context) *CoinAccountInfo {
	v, err := caic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (caic *CoinAccountInfoCreate) Exec(ctx context.Context) error {
	_, err := caic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (caic *CoinAccountInfoCreate) ExecX(ctx context.Context) {
	if err := caic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (caic *CoinAccountInfoCreate) defaults() {
	if _, ok := caic.mutation.CreateAt(); !ok {
		v := coinaccountinfo.DefaultCreateAt()
		caic.mutation.SetCreateAt(v)
	}
	if _, ok := caic.mutation.UpdateAt(); !ok {
		v := coinaccountinfo.DefaultUpdateAt()
		caic.mutation.SetUpdateAt(v)
	}
	if _, ok := caic.mutation.DeleteAt(); !ok {
		v := coinaccountinfo.DefaultDeleteAt()
		caic.mutation.SetDeleteAt(v)
	}
	if _, ok := caic.mutation.ID(); !ok {
		v := coinaccountinfo.DefaultID()
		caic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (caic *CoinAccountInfoCreate) check() error {
	if _, ok := caic.mutation.CoinTypeID(); !ok {
		return &ValidationError{Name: "coin_type_id", err: errors.New(`ent: missing required field "CoinAccountInfo.coin_type_id"`)}
	}
	if _, ok := caic.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "CoinAccountInfo.address"`)}
	}
	if _, ok := caic.mutation.PlatformHoldPrivateKey(); !ok {
		return &ValidationError{Name: "platform_hold_private_key", err: errors.New(`ent: missing required field "CoinAccountInfo.platform_hold_private_key"`)}
	}
	if _, ok := caic.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "CoinAccountInfo.create_at"`)}
	}
	if _, ok := caic.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "CoinAccountInfo.update_at"`)}
	}
	if _, ok := caic.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "CoinAccountInfo.delete_at"`)}
	}
	return nil
}

func (caic *CoinAccountInfoCreate) sqlSave(ctx context.Context) (*CoinAccountInfo, error) {
	_node, _spec := caic.createSpec()
	if err := sqlgraph.CreateNode(ctx, caic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (caic *CoinAccountInfoCreate) createSpec() (*CoinAccountInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &CoinAccountInfo{config: caic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: coinaccountinfo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: coinaccountinfo.FieldID,
			},
		}
	)
	_spec.OnConflict = caic.conflict
	if id, ok := caic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := caic.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: coinaccountinfo.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := caic.mutation.Address(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coinaccountinfo.FieldAddress,
		})
		_node.Address = value
	}
	if value, ok := caic.mutation.PlatformHoldPrivateKey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: coinaccountinfo.FieldPlatformHoldPrivateKey,
		})
		_node.PlatformHoldPrivateKey = value
	}
	if value, ok := caic.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinaccountinfo.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := caic.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinaccountinfo.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := caic.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: coinaccountinfo.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CoinAccountInfo.Create().
//		SetCoinTypeID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CoinAccountInfoUpsert) {
//			SetCoinTypeID(v+v).
//		}).
//		Exec(ctx)
//
func (caic *CoinAccountInfoCreate) OnConflict(opts ...sql.ConflictOption) *CoinAccountInfoUpsertOne {
	caic.conflict = opts
	return &CoinAccountInfoUpsertOne{
		create: caic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CoinAccountInfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (caic *CoinAccountInfoCreate) OnConflictColumns(columns ...string) *CoinAccountInfoUpsertOne {
	caic.conflict = append(caic.conflict, sql.ConflictColumns(columns...))
	return &CoinAccountInfoUpsertOne{
		create: caic,
	}
}

type (
	// CoinAccountInfoUpsertOne is the builder for "upsert"-ing
	//  one CoinAccountInfo node.
	CoinAccountInfoUpsertOne struct {
		create *CoinAccountInfoCreate
	}

	// CoinAccountInfoUpsert is the "OnConflict" setter.
	CoinAccountInfoUpsert struct {
		*sql.UpdateSet
	}
)

// SetCoinTypeID sets the "coin_type_id" field.
func (u *CoinAccountInfoUpsert) SetCoinTypeID(v uuid.UUID) *CoinAccountInfoUpsert {
	u.Set(coinaccountinfo.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *CoinAccountInfoUpsert) UpdateCoinTypeID() *CoinAccountInfoUpsert {
	u.SetExcluded(coinaccountinfo.FieldCoinTypeID)
	return u
}

// SetAddress sets the "address" field.
func (u *CoinAccountInfoUpsert) SetAddress(v string) *CoinAccountInfoUpsert {
	u.Set(coinaccountinfo.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *CoinAccountInfoUpsert) UpdateAddress() *CoinAccountInfoUpsert {
	u.SetExcluded(coinaccountinfo.FieldAddress)
	return u
}

// SetPlatformHoldPrivateKey sets the "platform_hold_private_key" field.
func (u *CoinAccountInfoUpsert) SetPlatformHoldPrivateKey(v bool) *CoinAccountInfoUpsert {
	u.Set(coinaccountinfo.FieldPlatformHoldPrivateKey, v)
	return u
}

// UpdatePlatformHoldPrivateKey sets the "platform_hold_private_key" field to the value that was provided on create.
func (u *CoinAccountInfoUpsert) UpdatePlatformHoldPrivateKey() *CoinAccountInfoUpsert {
	u.SetExcluded(coinaccountinfo.FieldPlatformHoldPrivateKey)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *CoinAccountInfoUpsert) SetCreateAt(v uint32) *CoinAccountInfoUpsert {
	u.Set(coinaccountinfo.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *CoinAccountInfoUpsert) UpdateCreateAt() *CoinAccountInfoUpsert {
	u.SetExcluded(coinaccountinfo.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *CoinAccountInfoUpsert) AddCreateAt(v uint32) *CoinAccountInfoUpsert {
	u.Add(coinaccountinfo.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *CoinAccountInfoUpsert) SetUpdateAt(v uint32) *CoinAccountInfoUpsert {
	u.Set(coinaccountinfo.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *CoinAccountInfoUpsert) UpdateUpdateAt() *CoinAccountInfoUpsert {
	u.SetExcluded(coinaccountinfo.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *CoinAccountInfoUpsert) AddUpdateAt(v uint32) *CoinAccountInfoUpsert {
	u.Add(coinaccountinfo.FieldUpdateAt, v)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *CoinAccountInfoUpsert) SetDeleteAt(v uint32) *CoinAccountInfoUpsert {
	u.Set(coinaccountinfo.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *CoinAccountInfoUpsert) UpdateDeleteAt() *CoinAccountInfoUpsert {
	u.SetExcluded(coinaccountinfo.FieldDeleteAt)
	return u
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *CoinAccountInfoUpsert) AddDeleteAt(v uint32) *CoinAccountInfoUpsert {
	u.Add(coinaccountinfo.FieldDeleteAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CoinAccountInfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(coinaccountinfo.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CoinAccountInfoUpsertOne) UpdateNewValues() *CoinAccountInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(coinaccountinfo.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.CoinAccountInfo.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CoinAccountInfoUpsertOne) Ignore() *CoinAccountInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CoinAccountInfoUpsertOne) DoNothing() *CoinAccountInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CoinAccountInfoCreate.OnConflict
// documentation for more info.
func (u *CoinAccountInfoUpsertOne) Update(set func(*CoinAccountInfoUpsert)) *CoinAccountInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CoinAccountInfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *CoinAccountInfoUpsertOne) SetCoinTypeID(v uuid.UUID) *CoinAccountInfoUpsertOne {
	return u.Update(func(s *CoinAccountInfoUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *CoinAccountInfoUpsertOne) UpdateCoinTypeID() *CoinAccountInfoUpsertOne {
	return u.Update(func(s *CoinAccountInfoUpsert) {
		s.UpdateCoinTypeID()
	})
}

// SetAddress sets the "address" field.
func (u *CoinAccountInfoUpsertOne) SetAddress(v string) *CoinAccountInfoUpsertOne {
	return u.Update(func(s *CoinAccountInfoUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *CoinAccountInfoUpsertOne) UpdateAddress() *CoinAccountInfoUpsertOne {
	return u.Update(func(s *CoinAccountInfoUpsert) {
		s.UpdateAddress()
	})
}

// SetPlatformHoldPrivateKey sets the "platform_hold_private_key" field.
func (u *CoinAccountInfoUpsertOne) SetPlatformHoldPrivateKey(v bool) *CoinAccountInfoUpsertOne {
	return u.Update(func(s *CoinAccountInfoUpsert) {
		s.SetPlatformHoldPrivateKey(v)
	})
}

// UpdatePlatformHoldPrivateKey sets the "platform_hold_private_key" field to the value that was provided on create.
func (u *CoinAccountInfoUpsertOne) UpdatePlatformHoldPrivateKey() *CoinAccountInfoUpsertOne {
	return u.Update(func(s *CoinAccountInfoUpsert) {
		s.UpdatePlatformHoldPrivateKey()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *CoinAccountInfoUpsertOne) SetCreateAt(v uint32) *CoinAccountInfoUpsertOne {
	return u.Update(func(s *CoinAccountInfoUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *CoinAccountInfoUpsertOne) AddCreateAt(v uint32) *CoinAccountInfoUpsertOne {
	return u.Update(func(s *CoinAccountInfoUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *CoinAccountInfoUpsertOne) UpdateCreateAt() *CoinAccountInfoUpsertOne {
	return u.Update(func(s *CoinAccountInfoUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *CoinAccountInfoUpsertOne) SetUpdateAt(v uint32) *CoinAccountInfoUpsertOne {
	return u.Update(func(s *CoinAccountInfoUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *CoinAccountInfoUpsertOne) AddUpdateAt(v uint32) *CoinAccountInfoUpsertOne {
	return u.Update(func(s *CoinAccountInfoUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *CoinAccountInfoUpsertOne) UpdateUpdateAt() *CoinAccountInfoUpsertOne {
	return u.Update(func(s *CoinAccountInfoUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *CoinAccountInfoUpsertOne) SetDeleteAt(v uint32) *CoinAccountInfoUpsertOne {
	return u.Update(func(s *CoinAccountInfoUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *CoinAccountInfoUpsertOne) AddDeleteAt(v uint32) *CoinAccountInfoUpsertOne {
	return u.Update(func(s *CoinAccountInfoUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *CoinAccountInfoUpsertOne) UpdateDeleteAt() *CoinAccountInfoUpsertOne {
	return u.Update(func(s *CoinAccountInfoUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *CoinAccountInfoUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CoinAccountInfoCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CoinAccountInfoUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CoinAccountInfoUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CoinAccountInfoUpsertOne.ID is not supported by MySQL driver. Use CoinAccountInfoUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CoinAccountInfoUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CoinAccountInfoCreateBulk is the builder for creating many CoinAccountInfo entities in bulk.
type CoinAccountInfoCreateBulk struct {
	config
	builders []*CoinAccountInfoCreate
	conflict []sql.ConflictOption
}

// Save creates the CoinAccountInfo entities in the database.
func (caicb *CoinAccountInfoCreateBulk) Save(ctx context.Context) ([]*CoinAccountInfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(caicb.builders))
	nodes := make([]*CoinAccountInfo, len(caicb.builders))
	mutators := make([]Mutator, len(caicb.builders))
	for i := range caicb.builders {
		func(i int, root context.Context) {
			builder := caicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CoinAccountInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, caicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = caicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, caicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, caicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (caicb *CoinAccountInfoCreateBulk) SaveX(ctx context.Context) []*CoinAccountInfo {
	v, err := caicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (caicb *CoinAccountInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := caicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (caicb *CoinAccountInfoCreateBulk) ExecX(ctx context.Context) {
	if err := caicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CoinAccountInfo.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CoinAccountInfoUpsert) {
//			SetCoinTypeID(v+v).
//		}).
//		Exec(ctx)
//
func (caicb *CoinAccountInfoCreateBulk) OnConflict(opts ...sql.ConflictOption) *CoinAccountInfoUpsertBulk {
	caicb.conflict = opts
	return &CoinAccountInfoUpsertBulk{
		create: caicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CoinAccountInfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (caicb *CoinAccountInfoCreateBulk) OnConflictColumns(columns ...string) *CoinAccountInfoUpsertBulk {
	caicb.conflict = append(caicb.conflict, sql.ConflictColumns(columns...))
	return &CoinAccountInfoUpsertBulk{
		create: caicb,
	}
}

// CoinAccountInfoUpsertBulk is the builder for "upsert"-ing
// a bulk of CoinAccountInfo nodes.
type CoinAccountInfoUpsertBulk struct {
	create *CoinAccountInfoCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CoinAccountInfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(coinaccountinfo.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CoinAccountInfoUpsertBulk) UpdateNewValues() *CoinAccountInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(coinaccountinfo.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CoinAccountInfo.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *CoinAccountInfoUpsertBulk) Ignore() *CoinAccountInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CoinAccountInfoUpsertBulk) DoNothing() *CoinAccountInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CoinAccountInfoCreateBulk.OnConflict
// documentation for more info.
func (u *CoinAccountInfoUpsertBulk) Update(set func(*CoinAccountInfoUpsert)) *CoinAccountInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CoinAccountInfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *CoinAccountInfoUpsertBulk) SetCoinTypeID(v uuid.UUID) *CoinAccountInfoUpsertBulk {
	return u.Update(func(s *CoinAccountInfoUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *CoinAccountInfoUpsertBulk) UpdateCoinTypeID() *CoinAccountInfoUpsertBulk {
	return u.Update(func(s *CoinAccountInfoUpsert) {
		s.UpdateCoinTypeID()
	})
}

// SetAddress sets the "address" field.
func (u *CoinAccountInfoUpsertBulk) SetAddress(v string) *CoinAccountInfoUpsertBulk {
	return u.Update(func(s *CoinAccountInfoUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *CoinAccountInfoUpsertBulk) UpdateAddress() *CoinAccountInfoUpsertBulk {
	return u.Update(func(s *CoinAccountInfoUpsert) {
		s.UpdateAddress()
	})
}

// SetPlatformHoldPrivateKey sets the "platform_hold_private_key" field.
func (u *CoinAccountInfoUpsertBulk) SetPlatformHoldPrivateKey(v bool) *CoinAccountInfoUpsertBulk {
	return u.Update(func(s *CoinAccountInfoUpsert) {
		s.SetPlatformHoldPrivateKey(v)
	})
}

// UpdatePlatformHoldPrivateKey sets the "platform_hold_private_key" field to the value that was provided on create.
func (u *CoinAccountInfoUpsertBulk) UpdatePlatformHoldPrivateKey() *CoinAccountInfoUpsertBulk {
	return u.Update(func(s *CoinAccountInfoUpsert) {
		s.UpdatePlatformHoldPrivateKey()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *CoinAccountInfoUpsertBulk) SetCreateAt(v uint32) *CoinAccountInfoUpsertBulk {
	return u.Update(func(s *CoinAccountInfoUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *CoinAccountInfoUpsertBulk) AddCreateAt(v uint32) *CoinAccountInfoUpsertBulk {
	return u.Update(func(s *CoinAccountInfoUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *CoinAccountInfoUpsertBulk) UpdateCreateAt() *CoinAccountInfoUpsertBulk {
	return u.Update(func(s *CoinAccountInfoUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *CoinAccountInfoUpsertBulk) SetUpdateAt(v uint32) *CoinAccountInfoUpsertBulk {
	return u.Update(func(s *CoinAccountInfoUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *CoinAccountInfoUpsertBulk) AddUpdateAt(v uint32) *CoinAccountInfoUpsertBulk {
	return u.Update(func(s *CoinAccountInfoUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *CoinAccountInfoUpsertBulk) UpdateUpdateAt() *CoinAccountInfoUpsertBulk {
	return u.Update(func(s *CoinAccountInfoUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *CoinAccountInfoUpsertBulk) SetDeleteAt(v uint32) *CoinAccountInfoUpsertBulk {
	return u.Update(func(s *CoinAccountInfoUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *CoinAccountInfoUpsertBulk) AddDeleteAt(v uint32) *CoinAccountInfoUpsertBulk {
	return u.Update(func(s *CoinAccountInfoUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *CoinAccountInfoUpsertBulk) UpdateDeleteAt() *CoinAccountInfoUpsertBulk {
	return u.Update(func(s *CoinAccountInfoUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *CoinAccountInfoUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CoinAccountInfoCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CoinAccountInfoCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CoinAccountInfoUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
