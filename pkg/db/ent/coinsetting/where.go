// Code generated by ent, DO NOT EDIT.

package coinsetting

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CoinTypeID applies equality check predicate on the "coin_type_id" field. It's identical to CoinTypeIDEQ.
func CoinTypeID(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinTypeID), v))
	})
}

// WarmAccountCoinAmount applies equality check predicate on the "warm_account_coin_amount" field. It's identical to WarmAccountCoinAmountEQ.
func WarmAccountCoinAmount(v uint64) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWarmAccountCoinAmount), v))
	})
}

// PaymentAccountCoinAmount applies equality check predicate on the "payment_account_coin_amount" field. It's identical to PaymentAccountCoinAmountEQ.
func PaymentAccountCoinAmount(v uint64) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentAccountCoinAmount), v))
	})
}

// PlatformOfflineAccountID applies equality check predicate on the "platform_offline_account_id" field. It's identical to PlatformOfflineAccountIDEQ.
func PlatformOfflineAccountID(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformOfflineAccountID), v))
	})
}

// UserOnlineAccountID applies equality check predicate on the "user_online_account_id" field. It's identical to UserOnlineAccountIDEQ.
func UserOnlineAccountID(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserOnlineAccountID), v))
	})
}

// UserOfflineAccountID applies equality check predicate on the "user_offline_account_id" field. It's identical to UserOfflineAccountIDEQ.
func UserOfflineAccountID(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserOfflineAccountID), v))
	})
}

// GoodIncomingAccountID applies equality check predicate on the "good_incoming_account_id" field. It's identical to GoodIncomingAccountIDEQ.
func GoodIncomingAccountID(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodIncomingAccountID), v))
	})
}

// GasProviderAccountID applies equality check predicate on the "gas_provider_account_id" field. It's identical to GasProviderAccountIDEQ.
func GasProviderAccountID(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGasProviderAccountID), v))
	})
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v uint32) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v uint32) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// DeleteAt applies equality check predicate on the "delete_at" field. It's identical to DeleteAtEQ.
func DeleteAt(v uint32) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteAt), v))
	})
}

// CoinTypeIDEQ applies the EQ predicate on the "coin_type_id" field.
func CoinTypeIDEQ(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDNEQ applies the NEQ predicate on the "coin_type_id" field.
func CoinTypeIDNEQ(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDIn applies the In predicate on the "coin_type_id" field.
func CoinTypeIDIn(vs ...uuid.UUID) predicate.CoinSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoinSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCoinTypeID), v...))
	})
}

// CoinTypeIDNotIn applies the NotIn predicate on the "coin_type_id" field.
func CoinTypeIDNotIn(vs ...uuid.UUID) predicate.CoinSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoinSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCoinTypeID), v...))
	})
}

// CoinTypeIDGT applies the GT predicate on the "coin_type_id" field.
func CoinTypeIDGT(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDGTE applies the GTE predicate on the "coin_type_id" field.
func CoinTypeIDGTE(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDLT applies the LT predicate on the "coin_type_id" field.
func CoinTypeIDLT(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoinTypeID), v))
	})
}

// CoinTypeIDLTE applies the LTE predicate on the "coin_type_id" field.
func CoinTypeIDLTE(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoinTypeID), v))
	})
}

// WarmAccountCoinAmountEQ applies the EQ predicate on the "warm_account_coin_amount" field.
func WarmAccountCoinAmountEQ(v uint64) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWarmAccountCoinAmount), v))
	})
}

// WarmAccountCoinAmountNEQ applies the NEQ predicate on the "warm_account_coin_amount" field.
func WarmAccountCoinAmountNEQ(v uint64) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWarmAccountCoinAmount), v))
	})
}

// WarmAccountCoinAmountIn applies the In predicate on the "warm_account_coin_amount" field.
func WarmAccountCoinAmountIn(vs ...uint64) predicate.CoinSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoinSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWarmAccountCoinAmount), v...))
	})
}

// WarmAccountCoinAmountNotIn applies the NotIn predicate on the "warm_account_coin_amount" field.
func WarmAccountCoinAmountNotIn(vs ...uint64) predicate.CoinSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoinSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWarmAccountCoinAmount), v...))
	})
}

// WarmAccountCoinAmountGT applies the GT predicate on the "warm_account_coin_amount" field.
func WarmAccountCoinAmountGT(v uint64) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWarmAccountCoinAmount), v))
	})
}

// WarmAccountCoinAmountGTE applies the GTE predicate on the "warm_account_coin_amount" field.
func WarmAccountCoinAmountGTE(v uint64) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWarmAccountCoinAmount), v))
	})
}

// WarmAccountCoinAmountLT applies the LT predicate on the "warm_account_coin_amount" field.
func WarmAccountCoinAmountLT(v uint64) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWarmAccountCoinAmount), v))
	})
}

// WarmAccountCoinAmountLTE applies the LTE predicate on the "warm_account_coin_amount" field.
func WarmAccountCoinAmountLTE(v uint64) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWarmAccountCoinAmount), v))
	})
}

// PaymentAccountCoinAmountEQ applies the EQ predicate on the "payment_account_coin_amount" field.
func PaymentAccountCoinAmountEQ(v uint64) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentAccountCoinAmount), v))
	})
}

// PaymentAccountCoinAmountNEQ applies the NEQ predicate on the "payment_account_coin_amount" field.
func PaymentAccountCoinAmountNEQ(v uint64) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaymentAccountCoinAmount), v))
	})
}

// PaymentAccountCoinAmountIn applies the In predicate on the "payment_account_coin_amount" field.
func PaymentAccountCoinAmountIn(vs ...uint64) predicate.CoinSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoinSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPaymentAccountCoinAmount), v...))
	})
}

// PaymentAccountCoinAmountNotIn applies the NotIn predicate on the "payment_account_coin_amount" field.
func PaymentAccountCoinAmountNotIn(vs ...uint64) predicate.CoinSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoinSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPaymentAccountCoinAmount), v...))
	})
}

// PaymentAccountCoinAmountGT applies the GT predicate on the "payment_account_coin_amount" field.
func PaymentAccountCoinAmountGT(v uint64) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaymentAccountCoinAmount), v))
	})
}

// PaymentAccountCoinAmountGTE applies the GTE predicate on the "payment_account_coin_amount" field.
func PaymentAccountCoinAmountGTE(v uint64) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaymentAccountCoinAmount), v))
	})
}

// PaymentAccountCoinAmountLT applies the LT predicate on the "payment_account_coin_amount" field.
func PaymentAccountCoinAmountLT(v uint64) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaymentAccountCoinAmount), v))
	})
}

// PaymentAccountCoinAmountLTE applies the LTE predicate on the "payment_account_coin_amount" field.
func PaymentAccountCoinAmountLTE(v uint64) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaymentAccountCoinAmount), v))
	})
}

// PlatformOfflineAccountIDEQ applies the EQ predicate on the "platform_offline_account_id" field.
func PlatformOfflineAccountIDEQ(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatformOfflineAccountID), v))
	})
}

// PlatformOfflineAccountIDNEQ applies the NEQ predicate on the "platform_offline_account_id" field.
func PlatformOfflineAccountIDNEQ(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatformOfflineAccountID), v))
	})
}

// PlatformOfflineAccountIDIn applies the In predicate on the "platform_offline_account_id" field.
func PlatformOfflineAccountIDIn(vs ...uuid.UUID) predicate.CoinSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoinSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPlatformOfflineAccountID), v...))
	})
}

// PlatformOfflineAccountIDNotIn applies the NotIn predicate on the "platform_offline_account_id" field.
func PlatformOfflineAccountIDNotIn(vs ...uuid.UUID) predicate.CoinSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoinSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPlatformOfflineAccountID), v...))
	})
}

// PlatformOfflineAccountIDGT applies the GT predicate on the "platform_offline_account_id" field.
func PlatformOfflineAccountIDGT(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlatformOfflineAccountID), v))
	})
}

// PlatformOfflineAccountIDGTE applies the GTE predicate on the "platform_offline_account_id" field.
func PlatformOfflineAccountIDGTE(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlatformOfflineAccountID), v))
	})
}

// PlatformOfflineAccountIDLT applies the LT predicate on the "platform_offline_account_id" field.
func PlatformOfflineAccountIDLT(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlatformOfflineAccountID), v))
	})
}

// PlatformOfflineAccountIDLTE applies the LTE predicate on the "platform_offline_account_id" field.
func PlatformOfflineAccountIDLTE(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlatformOfflineAccountID), v))
	})
}

// UserOnlineAccountIDEQ applies the EQ predicate on the "user_online_account_id" field.
func UserOnlineAccountIDEQ(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserOnlineAccountID), v))
	})
}

// UserOnlineAccountIDNEQ applies the NEQ predicate on the "user_online_account_id" field.
func UserOnlineAccountIDNEQ(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserOnlineAccountID), v))
	})
}

// UserOnlineAccountIDIn applies the In predicate on the "user_online_account_id" field.
func UserOnlineAccountIDIn(vs ...uuid.UUID) predicate.CoinSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoinSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserOnlineAccountID), v...))
	})
}

// UserOnlineAccountIDNotIn applies the NotIn predicate on the "user_online_account_id" field.
func UserOnlineAccountIDNotIn(vs ...uuid.UUID) predicate.CoinSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoinSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserOnlineAccountID), v...))
	})
}

// UserOnlineAccountIDGT applies the GT predicate on the "user_online_account_id" field.
func UserOnlineAccountIDGT(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserOnlineAccountID), v))
	})
}

// UserOnlineAccountIDGTE applies the GTE predicate on the "user_online_account_id" field.
func UserOnlineAccountIDGTE(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserOnlineAccountID), v))
	})
}

// UserOnlineAccountIDLT applies the LT predicate on the "user_online_account_id" field.
func UserOnlineAccountIDLT(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserOnlineAccountID), v))
	})
}

// UserOnlineAccountIDLTE applies the LTE predicate on the "user_online_account_id" field.
func UserOnlineAccountIDLTE(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserOnlineAccountID), v))
	})
}

// UserOfflineAccountIDEQ applies the EQ predicate on the "user_offline_account_id" field.
func UserOfflineAccountIDEQ(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserOfflineAccountID), v))
	})
}

// UserOfflineAccountIDNEQ applies the NEQ predicate on the "user_offline_account_id" field.
func UserOfflineAccountIDNEQ(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserOfflineAccountID), v))
	})
}

// UserOfflineAccountIDIn applies the In predicate on the "user_offline_account_id" field.
func UserOfflineAccountIDIn(vs ...uuid.UUID) predicate.CoinSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoinSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserOfflineAccountID), v...))
	})
}

// UserOfflineAccountIDNotIn applies the NotIn predicate on the "user_offline_account_id" field.
func UserOfflineAccountIDNotIn(vs ...uuid.UUID) predicate.CoinSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoinSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserOfflineAccountID), v...))
	})
}

// UserOfflineAccountIDGT applies the GT predicate on the "user_offline_account_id" field.
func UserOfflineAccountIDGT(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserOfflineAccountID), v))
	})
}

// UserOfflineAccountIDGTE applies the GTE predicate on the "user_offline_account_id" field.
func UserOfflineAccountIDGTE(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserOfflineAccountID), v))
	})
}

// UserOfflineAccountIDLT applies the LT predicate on the "user_offline_account_id" field.
func UserOfflineAccountIDLT(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserOfflineAccountID), v))
	})
}

// UserOfflineAccountIDLTE applies the LTE predicate on the "user_offline_account_id" field.
func UserOfflineAccountIDLTE(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserOfflineAccountID), v))
	})
}

// GoodIncomingAccountIDEQ applies the EQ predicate on the "good_incoming_account_id" field.
func GoodIncomingAccountIDEQ(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodIncomingAccountID), v))
	})
}

// GoodIncomingAccountIDNEQ applies the NEQ predicate on the "good_incoming_account_id" field.
func GoodIncomingAccountIDNEQ(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGoodIncomingAccountID), v))
	})
}

// GoodIncomingAccountIDIn applies the In predicate on the "good_incoming_account_id" field.
func GoodIncomingAccountIDIn(vs ...uuid.UUID) predicate.CoinSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoinSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGoodIncomingAccountID), v...))
	})
}

// GoodIncomingAccountIDNotIn applies the NotIn predicate on the "good_incoming_account_id" field.
func GoodIncomingAccountIDNotIn(vs ...uuid.UUID) predicate.CoinSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoinSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGoodIncomingAccountID), v...))
	})
}

// GoodIncomingAccountIDGT applies the GT predicate on the "good_incoming_account_id" field.
func GoodIncomingAccountIDGT(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGoodIncomingAccountID), v))
	})
}

// GoodIncomingAccountIDGTE applies the GTE predicate on the "good_incoming_account_id" field.
func GoodIncomingAccountIDGTE(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGoodIncomingAccountID), v))
	})
}

// GoodIncomingAccountIDLT applies the LT predicate on the "good_incoming_account_id" field.
func GoodIncomingAccountIDLT(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGoodIncomingAccountID), v))
	})
}

// GoodIncomingAccountIDLTE applies the LTE predicate on the "good_incoming_account_id" field.
func GoodIncomingAccountIDLTE(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGoodIncomingAccountID), v))
	})
}

// GasProviderAccountIDEQ applies the EQ predicate on the "gas_provider_account_id" field.
func GasProviderAccountIDEQ(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGasProviderAccountID), v))
	})
}

// GasProviderAccountIDNEQ applies the NEQ predicate on the "gas_provider_account_id" field.
func GasProviderAccountIDNEQ(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGasProviderAccountID), v))
	})
}

// GasProviderAccountIDIn applies the In predicate on the "gas_provider_account_id" field.
func GasProviderAccountIDIn(vs ...uuid.UUID) predicate.CoinSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoinSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGasProviderAccountID), v...))
	})
}

// GasProviderAccountIDNotIn applies the NotIn predicate on the "gas_provider_account_id" field.
func GasProviderAccountIDNotIn(vs ...uuid.UUID) predicate.CoinSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoinSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGasProviderAccountID), v...))
	})
}

// GasProviderAccountIDGT applies the GT predicate on the "gas_provider_account_id" field.
func GasProviderAccountIDGT(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGasProviderAccountID), v))
	})
}

// GasProviderAccountIDGTE applies the GTE predicate on the "gas_provider_account_id" field.
func GasProviderAccountIDGTE(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGasProviderAccountID), v))
	})
}

// GasProviderAccountIDLT applies the LT predicate on the "gas_provider_account_id" field.
func GasProviderAccountIDLT(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGasProviderAccountID), v))
	})
}

// GasProviderAccountIDLTE applies the LTE predicate on the "gas_provider_account_id" field.
func GasProviderAccountIDLTE(v uuid.UUID) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGasProviderAccountID), v))
	})
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v uint32) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v uint32) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...uint32) predicate.CoinSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoinSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateAt), v...))
	})
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...uint32) predicate.CoinSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoinSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateAt), v...))
	})
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v uint32) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateAt), v))
	})
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v uint32) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateAt), v))
	})
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v uint32) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateAt), v))
	})
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v uint32) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateAt), v))
	})
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v uint32) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v uint32) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...uint32) predicate.CoinSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoinSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...uint32) predicate.CoinSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoinSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v uint32) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v uint32) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v uint32) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v uint32) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateAt), v))
	})
}

// DeleteAtEQ applies the EQ predicate on the "delete_at" field.
func DeleteAtEQ(v uint32) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtNEQ applies the NEQ predicate on the "delete_at" field.
func DeleteAtNEQ(v uint32) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtIn applies the In predicate on the "delete_at" field.
func DeleteAtIn(vs ...uint32) predicate.CoinSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoinSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleteAt), v...))
	})
}

// DeleteAtNotIn applies the NotIn predicate on the "delete_at" field.
func DeleteAtNotIn(vs ...uint32) predicate.CoinSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CoinSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleteAt), v...))
	})
}

// DeleteAtGT applies the GT predicate on the "delete_at" field.
func DeleteAtGT(v uint32) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtGTE applies the GTE predicate on the "delete_at" field.
func DeleteAtGTE(v uint32) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtLT applies the LT predicate on the "delete_at" field.
func DeleteAtLT(v uint32) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtLTE applies the LTE predicate on the "delete_at" field.
func DeleteAtLTE(v uint32) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleteAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CoinSetting) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CoinSetting) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CoinSetting) predicate.CoinSetting {
	return predicate.CoinSetting(func(s *sql.Selector) {
		p(s.Not())
	})
}
